
require "shadergen/shadergen_info"
require "shadergen/shadergen_common"
require "shadergen/shadergen_glsl12"
require "shadergen/shadergen_hlsl20"

ShaderGen =
{
	init,
	getMaxLightsCount,
	--------------------------------------------------------------------------------
	-- INFO: Returns generated sources for vertex type, render pass and lights count
	--------------------------------------------------------------------------------
	-- PARAMETERS:
	--   vertex_type
	--   render_pass
	--   lights_count
	--
	-- RETURNS:
	--   sources - generated program sources
	--     {
	--       LightsCount = 4,
	--       Uniforms = bit.bor(vid.EUF_MODEL_VIEW_MATRIX, vid.EUF_NORMAL_MATRIX),
	--       Attributes = bit.bor(vid.EAF_POSITION, vid.EAF_NORMAL),
	--       Vertex = { Source = "void main(void) {}", Ver = vid.EVSV_GLSL_1_2 },
	--       Pixel  = { Source = "void main(void) {}", Ver = vid.EPSV_GLSL_1_2 },
	--     }
	--------------------------------------------------------------------------------	
	getSourcesFor,
	getCurrentTag,
	getTagsCount,
	getTag,
}

SHADERGEN_MAX_LIGHTS_COUNT = 4

local _ShaderGen =
{
	[vid.EDT_OPENGL21] =
	{
		VertexShaderVer = vid.EVSV_GLSL_1_2,
		PixelShaderVer = vid.EPSV_GLSL_1_2,
		GenVertexShader	= GLSL12GenVertexShader,
		GenPixelShader	= GLSL12GenPixelShader,
	},
	[vid.EDT_DIRECTX9] =
	{
		VertexShaderVer = vid.EVSV_HLSL_2_a,
		PixelShaderVer = vid.EPSV_HLSL_2_a,
		GenVertexShader	= HLSL20GenVertexShader,
		GenPixelShader	= HLSL20GenPixelShader,
	},
}

local function _GenShaderHeader()
	local text = ""
	text = text.."// This file automaticaly generated by MyEngine Shader Generator\n"
	text = text..string.format("// Date/time: %s\n", os.getCurrentTimeString())--os.date())
	text = text.."// DON'T EDIT this file or you may lost your changes!\n\n"
	return text
end

function _ShaderGenGenGPUProgram(vtype, arg1, lightcnt)
	local pass = tolua.cast(arg1, "const vid::SRenderPass")
	local lightcntGen = lightcnt
	if MyDriver:getRenderPath() == vid.ERP_DEFERRED_SHADING then
		lightcntGen = 0
	end
	local sources = ShaderGen.getSourcesFor(vtype, pass, lightcntGen)
	if sources ~= nil then
		sources.LightsCount = lightcnt
		MyDriver:addGPUProgram(vtype, pass,
			sources.Uniforms, sources.Attributes, sources.LightsCount,
			sources.Vertex.Ver, sources.Vertex.Source,
			sources.Pixel.Ver, sources.Pixel.Source,
			sources.Tag)
	else
		LOG_ERR(string.format(
			"ShaderGen: Can't add GPU program sources for vtype=%s lights=%d",
			vid.getVertexTypeName(vtype), lightcnt
			))
	end
end

local function _ShaderGenInit()
	MyScript:setScriptCallback(scr.ESCT_GEN_GPU_PROGRAM,
		"_ShaderGenGenGPUProgram")
	MyScript:setScriptCallback(scr.ESCT_GET_GEN_GPU_PROGRAM_MAX_LIGHTS,
		"_ShaderGenGetMaxLightsCount")
	MyScript:setScriptCallback(scr.ESCT_GET_GEN_GPU_PROGRAM_TAG,
		"_ShaderGenGetCurrentTag")
end
ShaderGen.init = _ShaderGenInit

function _ShaderGenGetMaxLightsCount()
	return SHADERGEN_MAX_LIGHTS_COUNT
end
ShaderGen.getMaxLightsCount = _ShaderGenGetMaxLightsCount

local driver_type = MyDriver:getDriverType()
local perpixel  = MyDevice:getDeviceFlagValue(dev.EDCF_SHADERS_HIGH_QUALITY)

local function _ShaderGenGetSourcesFor(vertex_type, render_pass, lights_count)
	local sources = nil
	if render_pass ~= nil
			and _ShaderGen[driver_type].GenVertexShader ~= nil
			and _ShaderGen[driver_type].GenPixelShader ~= nil then
		sources = {}
		if lights_count > SHADERGEN_MAX_LIGHTS_COUNT then
			lights_count = SHADERGEN_MAX_LIGHTS_COUNT
		end
		local info = ShaderGenInfo(vertex_type, render_pass, perpixel, lights_count)
		sources.Tag = ShaderGen.getCurrentTag()
		sources.LightsCount = lights_count
		sources.Uniforms = info.Uniforms.Mask
		sources.Attributes  = info.Attribs.Mask
		sources.Vertex = {}
		sources.Vertex.Ver = _ShaderGen[driver_type].VertexShaderVer
		sources.Vertex.Source = _GenShaderHeader().._ShaderGen[driver_type].GenVertexShader(
			info, render_pass)
		sources.Pixel = {}
		sources.Pixel.Ver = _ShaderGen[driver_type].PixelShaderVer
		sources.Pixel.Source = _GenShaderHeader().._ShaderGen[driver_type].GenPixelShader(
			info, render_pass)
	end
	return sources
end
ShaderGen.getSourcesFor = _ShaderGenGetSourcesFor

local _ShaderGenTags =
{
	[1] = "LowQual",
	[2] = "HighQual",
}

function _ShaderGenGetCurrentTag()
	local hiQual = (SETUP_SETTINGS[StartupDriverIndex].ShadersHighQuality == 1)
	local tag = _ShaderGenTags[1]
	if hiQual then
		tag = _ShaderGenTags[2]
	end
	return tag
end
ShaderGen.getCurrentTag = _ShaderGenGetCurrentTag

function _ShaderGenGetTagsCount()
	return table.getn(_ShaderGenTags)
end
ShaderGen.getTagsCount = _ShaderGenGetTagsCount

function _ShaderGenGetTag(index)
	local idx = 1
	if index ~= nil then
		idx = tonumber(index) + 1
	end
	return _ShaderGenTags[idx]
end
ShaderGen.getTag = _ShaderGenGetTag
