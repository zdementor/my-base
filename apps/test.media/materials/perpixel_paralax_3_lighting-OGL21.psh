#version 120

#define M_DIFFUSE(mat)   mat[0].rgba
#define M_AMBIENT(mat)   mat[1].rgba
#define M_SPECULAR(mat)  vec4(mat[2].rgb,1.0)
#define M_EMISSIVE(mat)  vec4(mat[3].rgb,1.0)
#define M_SHININESS(mat) mat[2].a

#define L_DIFFUSE(lig)  vec4(lig[0].rgb,1.0)
#define L_AMBIENT(lig)  vec4(lig[1].rgb,1.0)
#define L_SPECULAR(lig) vec4(lig[2].rgb,1.0)
#define L_POSITION(lig) lig[3].xyz
#define L_RADIUS(lig)   lig[3].w

uniform vec4 GlobalAmbientColor;
uniform vec4 MaterialColors[4];
uniform float MaterialShininess;
uniform mat4 Lighting[4];
uniform sampler2D Texture0;
uniform sampler2D Texture3;

varying vec3 Position;
varying vec3 EyeVec;
varying vec3 LightVec[4];

#define scale 0.04
#define bias -scale/2.0

void main(void)
{
	vec3 eyeVec 	= normalize(EyeVec);
    vec3 position	= Position.xyz;

	// get corrected height
	float h = scale * (texture2D(Texture3, gl_TexCoord[0].st).a) + bias;
	vec2 tcoord0 = gl_TexCoord[0].st + vec2(eyeVec.x,-eyeVec.y) * h;

	vec3 normal = normalize((texture2D(Texture3, tcoord0)* 2 - 1).xyz);

    vec4 tcol0 = texture2D(Texture0, tcoord0);
    vec4 tcol = tcol0;

    vec4 mDiffuse = M_DIFFUSE(MaterialColors);
    vec4 mAmbient = M_AMBIENT(MaterialColors);
    vec4 mSpecular = M_SPECULAR(MaterialColors);
    vec4 mEmissive = M_EMISSIVE(MaterialColors);
	float mShininess = MaterialShininess;

	vec3 SeparateSpecular = vec3(0.0,0.0,0.0);
    vec4 color = vec4(0.0, 0.0, 0.0, mDiffuse.a);
    color.rgb = GlobalAmbientColor.rgb * mAmbient.rgb + mEmissive.rgb;

    // calculating lighting from point lights
	{
		int i = 0;
	    vec4 lDiffuse  = L_DIFFUSE(Lighting[i]);
    	vec4 lAmbient  = L_AMBIENT(Lighting[i]);
	    vec4 lSpecular = L_SPECULAR(Lighting[i]);
    	vec3 lPosition = L_POSITION(Lighting[i]);
	    float lRadius  = L_RADIUS(Lighting[i]);
    	float lDist = length(lPosition - position);
		vec3 lightVec = normalize(LightVec[i].xyz);
		float idx = min(lDist / lRadius, 1.0);
		float attenuation = -idx * idx + 1.0;
		float NdotL = max(dot(normal, lightVec), 0.0);
	    color.rgb += attenuation *
			(NdotL * lDiffuse.rgb * mDiffuse.rgb);
		vec3 halfVec = normalize(eyeVec + lightVec);
    	float NdotHV = max(dot(normal, halfVec),0.0);
	    // separate specular component
    	SeparateSpecular += attenuation *
    		pow(NdotHV, mShininess) * mSpecular.rgb * lSpecular.rgb;
	}
	{
		int i = 1;
	    vec4 lDiffuse  = L_DIFFUSE(Lighting[i]);
    	vec4 lAmbient  = L_AMBIENT(Lighting[i]);
	    vec4 lSpecular = L_SPECULAR(Lighting[i]);
    	vec3 lPosition = L_POSITION(Lighting[i]);
	    float lRadius  = L_RADIUS(Lighting[i]);
    	float lDist = length(lPosition - position);
		vec3 lightVec = normalize(LightVec[i].xyz);
		float idx = min(lDist / lRadius, 1.0);
		float attenuation = -idx * idx + 1.0;
		float NdotL = max(dot(normal, lightVec), 0.0);
	    color.rgb += attenuation *
			(NdotL * lDiffuse.rgb * mDiffuse.rgb);
		vec3 halfVec = normalize(eyeVec + lightVec);
    	float NdotHV = max(dot(normal, halfVec),0.0);
	    // separate specular component
    	SeparateSpecular += attenuation *
    		pow(NdotHV, mShininess) * mSpecular.rgb * lSpecular.rgb;
	}
	{
		int i = 2;
	    vec4 lDiffuse  = L_DIFFUSE(Lighting[i]);
    	vec4 lAmbient  = L_AMBIENT(Lighting[i]);
	    vec4 lSpecular = L_SPECULAR(Lighting[i]);
    	vec3 lPosition = L_POSITION(Lighting[i]);
	    float lRadius  = L_RADIUS(Lighting[i]);
    	float lDist = length(lPosition - position);
		vec3 lightVec = normalize(LightVec[i].xyz);
		float idx = min(lDist / lRadius, 1.0);
		float attenuation = -idx * idx + 1.0;
		float NdotL = max(dot(normal, lightVec), 0.0);
	    color.rgb += attenuation *
			(NdotL * lDiffuse.rgb * mDiffuse.rgb);
		vec3 halfVec = normalize(eyeVec + lightVec);
    	float NdotHV = max(dot(normal, halfVec),0.0);
	    // separate specular component
    	SeparateSpecular += attenuation *
    		pow(NdotHV, mShininess) * mSpecular.rgb * lSpecular.rgb;
	}
	{
		int i = 3;
	    vec4 lDiffuse  = L_DIFFUSE(Lighting[i]);
    	vec4 lAmbient  = L_AMBIENT(Lighting[i]);
	    vec4 lSpecular = L_SPECULAR(Lighting[i]);
    	vec3 lPosition = L_POSITION(Lighting[i]);
	    float lRadius  = L_RADIUS(Lighting[i]);
    	float lDist = length(lPosition - position);
		vec3 lightVec = normalize(LightVec[i].xyz);
		float idx = min(lDist / lRadius, 1.0);
		float attenuation = -idx * idx + 1.0;
		float NdotL = max(dot(normal, lightVec), 0.0);
	    color.rgb += attenuation *
			(NdotL * lDiffuse.rgb * mDiffuse.rgb);
		vec3 halfVec = normalize(eyeVec + lightVec);
    	float NdotHV = max(dot(normal, halfVec),0.0);
	    // separate specular component
    	SeparateSpecular += attenuation *
    		pow(NdotHV, mShininess) * mSpecular.rgb * lSpecular.rgb;
	}

    gl_FragColor = tcol;
    gl_FragColor *= color;
	gl_FragColor.rgb += SeparateSpecular;
}
