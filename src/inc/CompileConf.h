//|-------------------------------------------------------------------------
//| File:        CompileConf.h
//|
//| Descr:       This file is a part of the 'MyEngine'
//| Author:      Zhuk 'zdementor' Dmitry (aka ZDimitor)
//| Email:       zdimitor@pochta.ru, sibergames@nm.ru
//|
//|     Copyright (c) 2004-2009 by Zhuk Dmitry, Krasnoyarsk - Moscow
//|                      All Rights Reserved.
//|-------------------------------------------------------------------------
#ifndef CompileConfHPP
#define CompileConfHPP
//----------------------------------------------------------------------------

// Initial platform/compiler-related stuff to set.

#define MY_PLATFORM_WIN32 1
#define MY_PLATFORM_LINUX 2
#define MY_PLATFORM_APPLE 3

#define MY_COMPILER_MSVC 1
#define MY_COMPILER_GNUC 2
#define MY_COMPILER_BORL 3

// Finds the compiler type and version.

#if defined( _MSC_VER )
#   define MY_COMPILER MY_COMPILER_MSVC
#   define MY_COMP_VER _MSC_VER
#	if _M_X64
#		define MY_COMP_ARCH_64 1
#	endif
#elif defined( __GNUC__ )
#   define MY_COMPILER MY_COMPILER_GNUC
#   define MY_COMP_VER (((__GNUC__)*100)+__GNUC_MINOR__)
#elif defined( __BORLANDC__ )
#   define MY_COMPILER MY_COMPILER_BORL
#   define MY_COMP_VER __BCPLUSPLUS__
#else
#   error "No known compiler. Abort! Abort!"
#endif

#ifndef MY_COMP_ARCH_64
#define MY_COMP_ARCH_64 0
#endif

// Finds the current CPU architecture

#define MY_X32 1
#define MY_X64 2

#if MY_COMP_ARCH_64
#	define MY_CPU_ARCH MY_X64
#else
#	define MY_CPU_ARCH MY_X32
#endif

// Finds the current platform 

#if defined( __WIN32__ ) || defined( _WIN32 )
#   define MY_PLATFORM MY_PLATFORM_WIN32

#elif defined( __APPLE_CC__)
#   define MY_PLATFORM MY_PLATFORM_APPLE

#else
#   define MY_PLATFORM MY_PLATFORM_LINUX
#endif

// OS specific Settings
#if MY_PLATFORM == MY_PLATFORM_WIN32
#	define __MY_IMPORT__ __declspec(dllimport)
#	define __MY_EXPORT__ __declspec(dllexport)
// Win32 compilers use _DEBUG for specifying debug builds.
#   ifdef _DEBUG
#       define MY_DEBUG_MODE 1
#   else
#       define MY_DEBUG_MODE 0
#   endif
// See if we can use __forceinline or if we need to use __inline instead 
#   if MY_COMP_VER >= 1200
#       define MY_FORCEINLINE	__forceinline
#       define MY_INLINE		__inline
#	else
#		define MY_FORCEINLINE	__inline
#       define MY_INLINE		__inline
#   endif
#else // Linux/Apple Settings
#	define __MY_IMPORT__ extern
#	define __MY_EXPORT__ extern
// Unlike the Win32 compilers, Linux compilers seem to use DEBUG for when
// specifying a debug build.
#   ifdef DEBUG
#       define MY_DEBUG_MODE 1
#   else
#       define MY_DEBUG_MODE 0
#   endif
#	define MY_FORCEINLINE	__inline
#	define MY_INLINE		__inline
#endif // #if MY_PLATFORM == MY_PLATFORM_WIN32

#if MY_DEBUG_MODE       
#	define MY_ASSERT(exp) assert(exp)
#else
#	define MY_ASSERT(exp) (void)0;
#endif

// include needed libraries
#if MY_PLATFORM == MY_PLATFORM_WIN32    
#	include <wchar.h>
#	include <windows.h>
#endif // #if MY_PLATFORM == MY_PLATFORM_WIN32  
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <float.h>
#include <typeinfo.h>
#include <io.h>
#include <memory.h>

// Compiler settings
#if MY_COMPILER == MY_COMPILER_MSVC
#   if MY_DEBUG_MODE       
#       pragma comment(linker, "/NODEFAULTLIB:libc.lib")
#       pragma comment(linker, "/NODEFAULTLIB:libcmt.lib")
#       pragma comment(linker, "/NODEFAULTLIB:msvcrt.lib")
#       pragma comment(linker, "/NODEFAULTLIB:libcd.lib ")
#       pragma comment(linker, "/NODEFAULTLIB:libcmtd.lib")       
#   else
#       pragma comment(linker, "/NODEFAULTLIB:libc.lib")
#       pragma comment(linker, "/NODEFAULTLIB:libcmt.lib")
#       pragma comment(linker, "/NODEFAULTLIB:libcd.lib")
#       pragma comment(linker, "/NODEFAULTLIB:libcmtd.lib ")
#       pragma comment(linker, "/NODEFAULTLIB:msvcrtd.lib")
#   endif    
// Turn off warnings generated by long std templates
// This warns about truncation to 255 characters in debug/browse info
#   pragma warning (disable : 4786)
// Turn off warnings generated by long std templates
// This warns about truncation to 255 characters in debug/browse info
#   pragma warning (disable : 4503)
// disable: "conversion from 'double' to 'float', possible loss of data
#   pragma warning (disable : 4244)
// disable: "truncation from 'double' to 'float'
#   pragma warning (disable : 4305)
// disable: "<type> needs to have dll-interface to be used by clients'
// Happens on STL member variables which are not public therefore is ok
#   pragma warning (disable : 4251)
// disable: "non dll-interface class used as base for dll-interface class"
// Happens when deriving from Singleton because bug in compiler ignores
// template export
#   pragma warning (disable : 4275)
// disable: "C++ Exception Specification ignored"
// This is because MSVC 6 did not implement all the C++ exception 
// specifications in the ANSI C++ draft.
#   pragma warning( disable : 4290 )
// disable: "no suitable definition provided for explicit template 
// instantiation request" Occurs in VC7 for no justifiable reason on all 
// #includes of Singleton
#   pragma warning( disable: 4661)
// disable: deprecation warnings when using CRT calls in VC8 
// These show up on all C runtime lib code in VC8, disable since they clutter
// the warnings with things we may not be able to do anything about (e.g. 
// generated code from nvparse etc). I doubt very much that these calls
// will ever be actually removed from VC anyway, it would break too much code.
#   pragma warning( disable: 4996)
// disable: "no definition for inline function"
#   pragma warning( disable: 4506)
// disable: warning 'this' : used in base member initializer list
#   pragma warning( disable: 4355)
#   undef _DEFINE_DEPRECATED_HASH_CLASSES
#   if MY_COMP_VER > 1300
#       define _DEFINE_DEPRECATED_HASH_CLASSES 0
#   else
#      define _DEFINE_DEPRECATED_HASH_CLASSES 1
#   endif
#endif

// A quick define to overcome different names for the same function
#if MY_PLATFORM == MY_PLATFORM_WIN32
#   define   swprintf   _snwprintf
#   if MY_COMPILER == MY_COMPILER_BORL
		inline float sqrtf( float x ) {return (float)sqrt((double)x);}
		inline int floorf( float x ) {return (int)floor((double)x);}
		inline int ceilf( float x ) {return (int)ceil((double)x);}
#   endif
#else // Linux/Apple Settings
#   define stricmp strcasecmp
#endif // #if MY_PLATFORM == MY_PLATFORM_WIN32

//-----------------------------------------------------------------------------
#endif
