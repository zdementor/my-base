//----------------------------------------------------------------------------
namespace scn {
//----------------------------------------------------------------------------

class ISceneManager
{
    //! Return singleton object
    static ISceneManager& getSingleton();

    //! Gets pointer to an animateable mesh. Loads it if needed.
    //! Currently there are the following mesh formats supported:
    //! .bsp(Quake3 Level), .md2(Quake2 Model), .3ds(3D Studio), .cfg(Cal3d)
    //! make a feature request on the Irrlicht Engine homepage if you like.
    //! \param  filename: Filename of the mesh to load.
    //! \return Returns NULL if failed and the pointer to the mesh if 
    //! successful.
    IAnimatedMesh* getMesh(const char *filename);

    //! Sets the active camera. The previous active camera will be deactivated.
    //! \param camera: The new camera which should be active.
    void setActiveCamera(ICameraSceneNode *camera);

    //! Returns the current active camera.
    //! \return The active camera is returned. Note that this can be NULL, if there
    //! was no camera created yet.
    ICameraSceneNode* getActiveCamera();

    //! Must be called before each call renderScene()
    void preRenderScene();

    //! Must be called after each call renderScene()
    void postRenderScene();

    //! Returns the root scene node in the currently activated Scene Cluster.
	//! This is the scene node wich is parent of all scene nodes in current Scene Cluster.
	//! The root scene node is a special scene node which
    //! only exists to manage all scene nodes. It is not rendered and cannot
    //! be removed from the scene.
    //! \return Returns a pointer to the root scene node.
    ISceneNode* getRootSceneNode() = 0;

    //! Returns the first scene node with the specified id.
    //! \param id: The id to search for
    //! \param start: Scene node to start from.
	//! If null is specified, the first scene node is taken.
    //! \return Returns pointer to the first scene node with this id,
    //! and null if no scene node could be found.
    ISceneNode* getSceneNodeFromId(int id, ISceneNode* start=0);

	//! Return Root Scene Node of the Scene Cluster by its index
	ISceneNode* getSceneClusterRootSceneNode(unsigned idx);

	//! Returns index of the Scene Cluster with all cached nodes
	unsigned getCacheSceneClusterIndex();

	//! Returns index of the currently activated Scene Cluster
	unsigned getCurrentSceneClusterIndex();

	//! Activeate current Scene Cluster by its index
	void setCurrentSceneClusterIndex(unsigned idx);

	//! Returns count of the Scene Clusters
	unsigned getSceneClusterCount();

	//! Enable/disable Scene Cluster by its index
	void setSceneClusterEnabled(unsigned idx, bool enabled);

    //! Adds a scene node to the deletion queue. 
    void addToDeletionQueue(ISceneNode* node, int delta_time_ms=0);

    //! Adds a scene node to the visibility queue. 
    void addToVisibilityChangeQueue(ISceneNode* node, bool visibility, int delta_time_ms=0);

    //! Clears scene clusters with needed mask, and cache if wished. 
    void clearScene(
		unsigned clear_mask = 0xffffffff, bool clear_cache = true);

	float getLODDistance(E_LOD_LEVEL lod);
	void setLODDistance(E_LOD_LEVEL lod, float dist);

	void setOctTreeCullingEnabled(bool enabled);
	bool isOctTreeCullingEnabled();

	void setOccludersCullingEnabled(bool enabled);
	bool isOccludersCullingEnabled();

	//! return first scene node in scene node typed list
	ISceneNode* getFirstSceneNodeInTypeList(scn::E_SCENE_NODE_TYPE type);

	//! return scene node in scene node typed list
	ISceneNode* getNextSceneNodeInTypeList(ISceneNode *node) = 0;

	//! return first scene node in scene node list
	ISceneNode* getFirstSceneNodeInList();

	//! return scene node in scene node list
	ISceneNode* getNextSceneNodeInList(ISceneNode *node);

	int getSceneNodesCount();

	int getVisibleSceneNodesCount();

	//! Returns a 3d ray which would go through the 2d screen coodinates.
	const core::line3df& getRayFromScreenCoordinates(const core::position2di &pos);

	//! Calculates 2d screen position from a 3d position.
	const core::position2di& getScreenCoordinatesFrom3DPosition(const core::vector3df &pos3d);

    //! Adds a camera scene node which is able to be controlled with the mouse similar
    //! like in the 3D Software Maya by Alias Wavefront.
    //! \param parent: Parent scene node of the camera. Can be null.
    //! \param rotateSpeed: Rotation speed of the camera.
    //! \param zoomSpeed: Zoom speed of the camera.
    //! \param tranlationSpeed: TranslationSpeed of the camera.
    //! \param id: id of the camera. This id can be used to identify the camera.
    //! \return Returns a pointer to the interface of the camera if successful, otherwise 0.
    //! This pointer should not be dropped. See IUnknown::drop() for more information.
    ICameraSceneNode* addCameraSceneNodeMaya(ISceneNode *parent = NULL,
		float rotateSpeed = 100.0f, float moveSpeed = 100.0f, float zoomSpeed = 100.0f, 
        int id = -1);

    //! Adds a camera scene node which is able to be controled with the mouse and keys
    //! like in most first person shooters (FPS): 
    //! \param parent: Parent scene node of the camera. Can be null.
    //! \param rotateSpeed: Speed with wich the camera is rotated. This can be done
    //! only with the mouse.
    //! \param movespeed: Speed with which the camera is moved. Movement is done with
    //! the cursor keys.
	//! \param zoomSpeed: Speed with which the camera is zooming.
    //! \param id: id of the camera. This id can be used to identify the camera.
    //! \return Returns a pointer to the interface of the camera if successful, otherwise 0.
    //! This pointer should not be dropped. See IUnknown::drop() for more information.   
	ICameraSceneNode* addCameraSceneNodeFPS(ISceneNode *player = 0, 
        float rotateSpeed=100.0f, float moveSpeed=100.0f, float zoomSpeed=100.0f,
		int id = -1);

    //! Add Overview Camera Scene Node
    ICameraSceneNode* addCameraSceneNodeOverview(ISceneNode *parent = NULL,
        float rotateSpeed = 100.0f, float zoomSpeed = 100.0f,
		int id = -1);

	//////////////////////////////////////////////////////////////////////

    //! clear selected nodes list
    void clearSelectionList();

    //! add node to the selection list
    void addSceneNodeToSelectionList(ISceneNode *node);

    //! rem node from the selection list
    bool remSceneNodeFromSelectionList(ISceneNode *node);

    //! returns selected nodes count
    int getSelectedSceneNodesCount();

    //! returns selected node by index
    ISceneNode* getSelectedSceneNode(int idx);

	bool isSelectionListFreezed();
	void freezeSelectionList();
	void unfreezeSelectionList();

	//////////////////////////////////////////////////////////////////////

	void setSceneRenderFlag(E_SCENE_RENDER_FLAG flag, bool value);
	bool getSceneRenderFlag(E_SCENE_RENDER_FLAG flag);

	//////////////////////////////////////////////////////////////////////

    //! choosing node from screen coordinates
    ISceneNode* getSceneNodeFromScreenCoordinates(const core::position2di &scr_pos);

	bool isSceneEditorStarted();

	//! Creating scene node from parameters
	ISceneNode* createSceneNode(
		SSceneNodeCommonParams &snparams, bool log_info = false);

	//! Cloning scene node (return new created scene node)
	//! \param node_to_clone : scene node, wich we wants to clone
	//! \param with_animators : this parameter must be true if we wants 
	//! to attach all animators of initial scene node to new one
    ISceneNode* cloneSceneNode(
		ISceneNode *node_to_clone, bool with_animators=true, bool log_info=false);

	//! Reloading scene node from the scratch
	ISceneNode* reloadSceneNode(ISceneNode *node);

	//! Loading scene node from xml-file
	ISceneNode* loadSceneNode(const char* filename, bool cache_it=true);

	//! Saving scene node to xml-file
	bool saveSceneNode(const char* filename, ISceneNode *node);

	//! return material xml-text
	const char* getMaterialXMLText(const vid::SMaterial &material);

    //! returns file name of the already loaded mesh
    const char* findMeshFileName(IAnimatedMesh* mesh);  

	//! returns file name of the already loaded mesh
    const char* findMeshFullFileName(IAnimatedMesh* amesh);

	//! returns an already loaded mesh
    IAnimatedMesh* findMesh(const char *filename);  

	//////////////////////////////////
	//!      scene callbacks
	//////////////////////////////////

	void onStartSceneEditor();
	void onStopSceneEditor();
};

//---------------------------------------------------------------------------- 
} // end namespace scn
//----------------------------------------------------------------------------
