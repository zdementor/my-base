//----------------------------------------------------------------------------
namespace scn {
//----------------------------------------------------------------------------  

class ICameraSceneNode : public ISceneNode
{
    //! Gets the current projection matrix of the camera.
    //! \return Returns the current projection matrix of the camera.
    const core::matrix4& getProjectionMatrix();

    //! Gets the current view matrix of the camera.
    //! \return Returns the current view matrix of the camera.
    const core::matrix4& getViewMatrix();

    //! Sets the look at target of the camera
    //! \param pos: Look at target of the camera.
    void setTarget(const core::vector3df& pos);

    //! Gets the current look at target of the camera
    //! \return Returns the current look at target of the camera
    core::vector3df getTarget() const;

    //! Sets the up vector of the camera.
    //! \param pos: New upvector of the camera.
    void setUpVector(const core::vector3df& pos);

    //! Gets the up vector of the camera.
    //! \return Returns the up vector of the camera.
    core::vector3df getUpVector() const;    

    //! Sets the value of the near clipping plane. (default: 1.0f)
    //! \param zn: New z near value.
    void setNearValue(float zn);

    //! \return Returns the value of the near plane of the camera.
    float getNearValue();

    //! Sets the value of the far clipping plane (default: 2000.0f)
    //! \param zf: New z far value.
    void setFarValue(float zf);

    //! \return Returns the value of the far plane of the camera.
    float getFarValue();

    //! Sets the aspect ratio (default: 4.0f / 3.0f)
    //! ( This method has affect only for cameras with perspective projection )
    //! \param aspect: New aspect ratio.
    void setAspectRatio(float aspect);

    //! \return Returns the aspect ratio of the camera.
    float getAspectRatio();

    //! Sets the field of view (Default: PI / 2.5f)
    //! ( This method has affect only for cameras with perspective projection )
    //! \param fovy: New field of view.
    void setFOV(float fovy);

    //! \return Returns the field of view of the camera.
    float getFOV();

    //! Setting height and width of view volume (Default: 5000x5000)
    //! ( This method has affect only for cameras with orthogonal projection )
    //! \param width: New width of camera view
    void setViewVolume(core::dimension2df view_volume);

    //! \return Returns height and width of view volume
    core::dimension2df getViewVolume();

    //! Returns the view frustrum. Needed sometimes by bspTree or LOD render nodes.
    //! \return Returns the current view frustrum.
    const core::view_frustrum& getViewFrustrum();

    //! setting camera projection mode
    //! \param prj: new camera projection type
    void setProjectionType(E_CAMERA_PROJECTION_TYPE prj);

    //! setting camera projection mode
    E_CAMERA_PROJECTION_TYPE getProjectionType();

    float getZoomSpeed();
    void setZoomSpeed(float zoom_speed);

    float getRotationSpeed();
    void setRotationSpeed(float rot_speed);

    float getMoveSpeed();
    void setMoveSpeed(float move_speed);

	void setSceneEditorCamera(bool value);
	bool isSceneEditorCamera();
};

//---------------------------------------------------------------------------- 
} // end namespace scn
//----------------------------------------------------------------------------
