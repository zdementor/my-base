/*
** Lua binding: MyLuaBind
** Generated automatically by tolua++-1.0.92 on 10/09/16 19:56:30.
*/

#ifndef __cplusplus
#include "stdlib.h"
#endif
#include "string.h"

#include "tolua++.h"

/* Exported function */
int tolua_MyLuaBind_open (lua_State* tolua_S);

#include <my.h>
#include <io/IEventReceiver.h>
#include <dev/IDevice.h>
#include <dev/IPluginManager.h>
#include <res/IResourceManager.h>
#include <img/SColor.h>
#include <os/os.h>
#include <os/IMemStat.h>
#include <vid/IVideoDriver.h>
#include <vid/IRenderTarget.h>
#include <io/ILogger.h>
#include <io/IFileSystem.h>
#include <io/IFileList.h>
#include <scr/IScriptManager.h>
#include <game/IGameManager.h>
#include <game/IGameNodeWeapon.h>
#include <game/IGameNodeMainPlayer.h>
#include <game/IGameUnitsFormation.h>
#include <game/IGameTasksManager.h>
#include <game/IGameEventsDispatcher.h>
#include <game/IGameAIModule.h>
#include <scn/ISceneManager.h>
#include <scn/ISceneNode.h>
#include <scn/IMaterialsManager.h>
#include <scn/IMaterialsManager.h>
#include <scn/ICullingSystem.h>
#include <scn/IParticleSystemSceneNode.h>
#include <scn/IAnimatedMeshSceneNode.h>
#include <scn/IBillboardSceneNode.h>
#include <scn/IDummyTransformationSceneNode.h>
#include <scn/IKTreeSceneNode.h>
#include <scn/ILensFlareSceneNode.h>
#include <scn/ILightSceneNode.h>
#include <scn/ISkyBoxSceneNode.h>
#include <scn/ITerrainSceneNode.h>
#include <scn/ITestSceneNode.h>
#include <io/IInputDispatcher.h>
#include <io/ICursorControl.h>
#include <img/SColor.h>
#include <scn/ISceneNodeAnimator.h>
#include <scn/ITextSceneNode.h>
#include <gui/MyCEGUISystem.h>
#include <mm/ISoundDriver.h>
#include <mm/ISound.h>
#include <mm/ISoundData.h>
#include <img/IImage.h>
#include <vid/IFont.h>
#include <dev/IProfiler.h>
#include <dyn/IDynamicManager.h>
//
using namespace my;
//
#define IUnknown my::IUnknown
//
// disable: 'int' : forcing value to bool 'true' or 'false' (performance warning)
#pragma warning (disable : 4800)
//
namespace MyCEGUI {
	bool create(const char* cegui_ini_file_name)
	{ return MyCEGUI::create(cegui_ini_file_name, SCRIPT_MANAGER.getCoreScripterPtr()); }}
namespace my {
namespace core {
	bool isPtrsEq(void *p1, void *p2)
	{ return p1 == p2; }}}

/* function to release collected object via destructor */
#ifdef __cplusplus

static int tolua_collect_scn__SImposterParameters (lua_State* tolua_S)
{
 scn::SImposterParameters* self = (scn::SImposterParameters*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_game__SWeaponParameters (lua_State* tolua_S)
{
 game::SWeaponParameters* self = (game::SWeaponParameters*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_game__SGameNodeCommonParams (lua_State* tolua_S)
{
 game::SGameNodeCommonParams* self = (game::SGameNodeCommonParams*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__wave (lua_State* tolua_S)
{
 core::wave* self = (core::wave*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_game__SSceneProps (lua_State* tolua_S)
{
 game::SSceneProps* self = (game::SSceneProps*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_scn__SSceneNodeParameters (lua_State* tolua_S)
{
 scn::SSceneNodeParameters* self = (scn::SSceneNodeParameters*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_game__SWeaponBulletParameters (lua_State* tolua_S)
{
 game::SWeaponBulletParameters* self = (game::SWeaponBulletParameters*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_scn__SAnimationFrame (lua_State* tolua_S)
{
 scn::SAnimationFrame* self = (scn::SAnimationFrame*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_game__SGameSceneProps (lua_State* tolua_S)
{
 game::SGameSceneProps* self = (game::SGameSceneProps*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__rectf (lua_State* tolua_S)
{
 core::rectf* self = (core::rectf*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__aabbox3df (lua_State* tolua_S)
{
 core::aabbox3df* self = (core::aabbox3df*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__matrix4 (lua_State* tolua_S)
{
 core::matrix4* self = (core::matrix4*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__position2df (lua_State* tolua_S)
{
 core::position2df* self = (core::position2df*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_vid__SFog (lua_State* tolua_S)
{
 vid::SFog* self = (vid::SFog*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_vid__SLight (lua_State* tolua_S)
{
 vid::SLight* self = (vid::SLight*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_scn__SBillboardParams (lua_State* tolua_S)
{
 scn::SBillboardParams* self = (scn::SBillboardParams*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_img__SColorf (lua_State* tolua_S)
{
 img::SColorf* self = (img::SColorf*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__dimension2df (lua_State* tolua_S)
{
 core::dimension2df* self = (core::dimension2df*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_vid__SMaterial (lua_State* tolua_S)
{
 vid::SMaterial* self = (vid::SMaterial*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__vector3df (lua_State* tolua_S)
{
 core::vector3df* self = (core::vector3df*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_u64 (lua_State* tolua_S)
{
 u64* self = (u64*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_vid__STextureLayer (lua_State* tolua_S)
{
 vid::STextureLayer* self = (vid::STextureLayer*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_game__SGameNodeParams (lua_State* tolua_S)
{
 game::SGameNodeParams* self = (game::SGameNodeParams*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_game__SBulletParameters (lua_State* tolua_S)
{
 game::SBulletParameters* self = (game::SBulletParameters*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__position2di (lua_State* tolua_S)
{
 core::position2di* self = (core::position2di*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_io__SEvent (lua_State* tolua_S)
{
 io::SEvent* self = (io::SEvent*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_game__SGameNodeAIParams (lua_State* tolua_S)
{
 game::SGameNodeAIParams* self = (game::SGameNodeAIParams*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__stringc (lua_State* tolua_S)
{
 core::stringc* self = (core::stringc*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__dimension2di (lua_State* tolua_S)
{
 core::dimension2di* self = (core::dimension2di*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_vid__STexCoordModifier (lua_State* tolua_S)
{
 vid::STexCoordModifier* self = (vid::STexCoordModifier*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_scn__SSceneNodeMaterial (lua_State* tolua_S)
{
 scn::SSceneNodeMaterial* self = (scn::SSceneNodeMaterial*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_scn__SImposterCreationParameters (lua_State* tolua_S)
{
 scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_scn__SSceneNodeTransformation (lua_State* tolua_S)
{
 scn::SSceneNodeTransformation* self = (scn::SSceneNodeTransformation*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_game__SVideoProps (lua_State* tolua_S)
{
 game::SVideoProps* self = (game::SVideoProps*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_scn__SSceneNodeCommonParams (lua_State* tolua_S)
{
 scn::SSceneNodeCommonParams* self = (scn::SSceneNodeCommonParams*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_img__SColor (lua_State* tolua_S)
{
 img::SColor* self = (img::SColor*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__vector2df (lua_State* tolua_S)
{
 core::vector2df* self = (core::vector2df*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__plane3df (lua_State* tolua_S)
{
 core::plane3df* self = (core::plane3df*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__line3df (lua_State* tolua_S)
{
 core::line3df* self = (core::line3df*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__recti (lua_State* tolua_S)
{
 core::recti* self = (core::recti*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}

static int tolua_collect_core__vector2di (lua_State* tolua_S)
{
 core::vector2di* self = (core::vector2di*) tolua_tousertype(tolua_S,1,0);
 delete self;
 return 0;
}
#endif


/* function to register type */
static void tolua_reg_types (lua_State* tolua_S)
{
 tolua_usertype(tolua_S,"mm::ISoundData");
 tolua_usertype(tolua_S,"scn::IParticleAffector");
 tolua_usertype(tolua_S,"game::IGameTasksManager");
 tolua_usertype(tolua_S,"core::stringc");
 tolua_usertype(tolua_S,"game::SWeaponParameters");
 tolua_usertype(tolua_S,"io::SPaintEvent");
 tolua_usertype(tolua_S,"game::SGameNodeCommonParams");
 tolua_usertype(tolua_S,"dyn::IDynamicManager");
 tolua_usertype(tolua_S,"mm::ISoundDriver");
 tolua_usertype(tolua_S,"scn::ISceneNode");
 tolua_usertype(tolua_S,"os::IMemStatus");
 tolua_usertype(tolua_S,"scr::ICoreScriptManager");
 tolua_usertype(tolua_S,"scn::IMaterialsManager");
 tolua_usertype(tolua_S,"scn::IParticleEmitter");
 tolua_usertype(tolua_S,"scn::SSceneNodeParameters");
 tolua_usertype(tolua_S,"core::view_frustrum");
 tolua_usertype(tolua_S,"core::wave");
 tolua_usertype(tolua_S,"game::SWeaponBulletParameters");
 tolua_usertype(tolua_S,"scn::SAnimationFrame");
 tolua_usertype(tolua_S,"scr::IScriptManager");
 tolua_usertype(tolua_S,"os::ITimerSecond");
 tolua_usertype(tolua_S,"core::recti");
 tolua_usertype(tolua_S,"scn::IParticleSystemSceneNode");
 tolua_usertype(tolua_S,"core::vector2df");
 tolua_usertype(tolua_S,"os::ITimer");
 tolua_usertype(tolua_S,"os::STimeValue");
 tolua_usertype(tolua_S,"game::IGameNode");
 tolua_usertype(tolua_S,"game::SVideoProps");
 tolua_usertype(tolua_S,"dev::IPluginManager");
 tolua_usertype(tolua_S,"scn::ILightSceneNode");
 tolua_usertype(tolua_S,"core::position2df");
 tolua_usertype(tolua_S,"io::ICursorControl");
 tolua_usertype(tolua_S,"scn::IShadow");
 tolua_usertype(tolua_S,"vid::IRenderBuffer");
 tolua_usertype(tolua_S,"game::IGameNodeAI");
 tolua_usertype(tolua_S,"vid::IIndexBuffer");
 tolua_usertype(tolua_S,"scn::SBillboardParams");
 tolua_usertype(tolua_S,"io::SKeyEvent");
 tolua_usertype(tolua_S,"game::IGameManager");
 tolua_usertype(tolua_S,"vid::IVertexBuffer");
 tolua_usertype(tolua_S,"scn::SLens");
 tolua_usertype(tolua_S,"scn::IDummyTransformationSceneNode");
 tolua_usertype(tolua_S,"io::ILogger");
 tolua_usertype(tolua_S,"game::IGameUnitsFormation");
 tolua_usertype(tolua_S,"vid::STextureLayer");
 tolua_usertype(tolua_S,"scn::SAnimationState");
 tolua_usertype(tolua_S,"dev::IProfiler");
 tolua_usertype(tolua_S,"core::position2di");
 tolua_usertype(tolua_S,"scn::ICameraSceneNode");
 tolua_usertype(tolua_S,"res::IResourceManager");
 tolua_usertype(tolua_S,"scn::ICullingSystem");
 tolua_usertype(tolua_S,"scn::IBillboardSceneNode");
 tolua_usertype(tolua_S,"vid::STexCoordModifier");
 tolua_usertype(tolua_S,"vid::SGPUProgramShaderInfo");
 tolua_usertype(tolua_S,"scn::SImposterCreationParameters");
 tolua_usertype(tolua_S,"os::ITimerMain");
 tolua_usertype(tolua_S,"game::IGameInventory");
 tolua_usertype(tolua_S,"vid::SFog");
 tolua_usertype(tolua_S,"vid::SMaterial");
 tolua_usertype(tolua_S,"vid::SRenderPass");
 tolua_usertype(tolua_S,"scn::ISkyBoxSceneNode");
 tolua_usertype(tolua_S,"core::line3df");
 tolua_usertype(tolua_S,"io::SMouseEvent");
 tolua_usertype(tolua_S,"core::vector2di");
 tolua_usertype(tolua_S,"scn::SAnimationFrameParameters");
 tolua_usertype(tolua_S,"dyn::SDynamicObjectParams");
 tolua_usertype(tolua_S,"scn::ITestSceneNode");
 tolua_usertype(tolua_S,"scn::SImposterParameters");
 tolua_usertype(tolua_S,"vid::ITexture");
 tolua_usertype(tolua_S,"scn::IKTreeSceneNode");
 tolua_usertype(tolua_S,"dyn::IDynamicObject");
 tolua_usertype(tolua_S,"CEGUI::Texture");
 tolua_usertype(tolua_S,"CEGUI::ListboxItem");
 tolua_usertype(tolua_S,"scn::IAnimatedMesh");
 tolua_usertype(tolua_S,"img::IImageLibrary");
 tolua_usertype(tolua_S,"IUnknown");
 tolua_usertype(tolua_S,"u64");
 tolua_usertype(tolua_S,"scn::IMesh");
 tolua_usertype(tolua_S,"game::SGameNodeAIParams");
 tolua_usertype(tolua_S,"img::SColorf");
 tolua_usertype(tolua_S,"img::SColor");
 tolua_usertype(tolua_S,"game::IGameAIModule");
 tolua_usertype(tolua_S,"vid::IVideoDriver");
 tolua_usertype(tolua_S,"scn::STileSet");
 tolua_usertype(tolua_S,"vid::SGPUProgramInfo");
 tolua_usertype(tolua_S,"scn::ISceneNodeAnimator");
 tolua_usertype(tolua_S,"game::SBulletParameters");
 tolua_usertype(tolua_S,"game::IGameNodeWeapon");
 tolua_usertype(tolua_S,"dev::IDevice");
 tolua_usertype(tolua_S,"game::IGameNodeItem");
 tolua_usertype(tolua_S,"core::aabbox3df");
 tolua_usertype(tolua_S,"core::matrix4");
 tolua_usertype(tolua_S,"scn::ISceneManager");
 tolua_usertype(tolua_S,"vid::IRenderTarget");
 tolua_usertype(tolua_S,"game::SGameNodeParams");
 tolua_usertype(tolua_S,"scn::IParticleFadeOutAffector");
 tolua_usertype(tolua_S,"game::SGameSceneProps");
 tolua_usertype(tolua_S,"scn::ILensFlareSceneNode");
 tolua_usertype(tolua_S,"game::SSceneProps");
 tolua_usertype(tolua_S,"vid::SLight");
 tolua_usertype(tolua_S,"scn::ITerrainSceneNode");
 tolua_usertype(tolua_S,"game::IPathFindTask");
 tolua_usertype(tolua_S,"vid::IGPUProgram");
 tolua_usertype(tolua_S,"core::dimension2df");
 tolua_usertype(tolua_S,"io::IFileSystem");
 tolua_usertype(tolua_S,"scn::ITextSceneNode");
 tolua_usertype(tolua_S,"core::vector3df");
 tolua_usertype(tolua_S,"scn::IAnimatedMeshSceneNode");
 tolua_usertype(tolua_S,"game::IGameEventsDispatcher");
 tolua_usertype(tolua_S,"dev::SProfileParameter");
 tolua_usertype(tolua_S,"scr::ICoreScriptManagerInterface");
 tolua_usertype(tolua_S,"CEGUI::Window");
 tolua_usertype(tolua_S,"io::SEvent");
 tolua_usertype(tolua_S,"img::IImage");
 tolua_usertype(tolua_S,"scn::IParticleGravityAffector");
 tolua_usertype(tolua_S,"io::IFileList");
 tolua_usertype(tolua_S,"game::IGameNodeMainPlayer");
 tolua_usertype(tolua_S,"scn::SSceneNodeMaterial");
 tolua_usertype(tolua_S,"io::SLogEvent");
 tolua_usertype(tolua_S,"scn::SSceneNodeTransformation");
 tolua_usertype(tolua_S,"core::rectf");
 tolua_usertype(tolua_S,"scn::SSceneNodeCommonParams");
 tolua_usertype(tolua_S,"mm::ISound");
 tolua_usertype(tolua_S,"vid::IVideoModeList");
 tolua_usertype(tolua_S,"core::dimension2di");
 tolua_usertype(tolua_S,"io::IInputDispatcher");
 tolua_usertype(tolua_S,"vid::IFont");
 tolua_usertype(tolua_S,"core::plane3df");
}

/* function: core::isPtrsEq */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_isPtrsEq00
static int tolua_MyLuaBind_core_isPtrsEq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isuserdata(tolua_S,1,0,&tolua_err) ||
 !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  void* p1 = ((void*)  tolua_touserdata(tolua_S,1,0));
  void* p2 = ((void*)  tolua_touserdata(tolua_S,2,0));
 {
  bool tolua_ret = (bool)  core::isPtrsEq(p1,p2);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isPtrsEq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isLocked of class  IUnknown */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_IUnknown_isLocked00
static int tolua_MyLuaBind_IUnknown_isLocked00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"IUnknown",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  IUnknown* self = (IUnknown*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isLocked'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isLocked();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isLocked'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: lockObject of class  IUnknown */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_IUnknown_lockObject00
static int tolua_MyLuaBind_IUnknown_lockObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"IUnknown",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  IUnknown* self = (IUnknown*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'lockObject'",NULL);
#endif
 {
  self->lockObject();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'lockObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: unlockObject of class  IUnknown */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_IUnknown_unlockObject00
static int tolua_MyLuaBind_IUnknown_unlockObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"IUnknown",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  IUnknown* self = (IUnknown*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'unlockObject'",NULL);
#endif
 {
  self->unlockObject();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'unlockObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: scn::getSceneNodeTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_getSceneNodeTypeName00
static int tolua_MyLuaBind_scn_getSceneNodeTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::E_SCENE_NODE_TYPE type = ((scn::E_SCENE_NODE_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  scn::getSceneNodeTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneNodeTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: scn::getSceneNodeTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_getSceneNodeTypeReadableName00
static int tolua_MyLuaBind_scn_getSceneNodeTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::E_SCENE_NODE_TYPE type = ((scn::E_SCENE_NODE_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  scn::getSceneNodeTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneNodeTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: scn::getParticleAffectorTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_getParticleAffectorTypeName00
static int tolua_MyLuaBind_scn_getParticleAffectorTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::E_PARTICLE_AFFECTOR_TYPE type = ((scn::E_PARTICLE_AFFECTOR_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  scn::getParticleAffectorTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParticleAffectorTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: scn::getParticleAffectorTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_getParticleAffectorTypeReadableName00
static int tolua_MyLuaBind_scn_getParticleAffectorTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::E_PARTICLE_AFFECTOR_TYPE type = ((scn::E_PARTICLE_AFFECTOR_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  scn::getParticleAffectorTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParticleAffectorTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: scn::getParticleEmitterTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_getParticleEmitterTypeName00
static int tolua_MyLuaBind_scn_getParticleEmitterTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::E_PARTICLE_EMITTER_TYPE type = ((scn::E_PARTICLE_EMITTER_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  scn::getParticleEmitterTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParticleEmitterTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: scn::getParticleEmitterTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_getParticleEmitterTypeReadableName00
static int tolua_MyLuaBind_scn_getParticleEmitterTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::E_PARTICLE_EMITTER_TYPE type = ((scn::E_PARTICLE_EMITTER_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  scn::getParticleEmitterTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParticleEmitterTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: scn::getSceneNodeCorePropertiesTagValue */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_getSceneNodeCorePropertiesTagValue00
static int tolua_MyLuaBind_scn_getSceneNodeCorePropertiesTagValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  const char* tolua_ret = (const char*)  scn::getSceneNodeCorePropertiesTagValue();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneNodeCorePropertiesTagValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: game::getGameNodeTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_getGameNodeTypeName00
static int tolua_MyLuaBind_game_getGameNodeTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::E_GAME_NODE_TYPE type = ((game::E_GAME_NODE_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  game::getGameNodeTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameNodeTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: game::getGameNodeTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_getGameNodeTypeReadableName00
static int tolua_MyLuaBind_game_getGameNodeTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::E_GAME_NODE_TYPE type = ((game::E_GAME_NODE_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  game::getGameNodeTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameNodeTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: game::getGameNodeCorePropertiesTagValue */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_getGameNodeCorePropertiesTagValue00
static int tolua_MyLuaBind_game_getGameNodeCorePropertiesTagValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  const char* tolua_ret = (const char*)  game::getGameNodeCorePropertiesTagValue();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameNodeCorePropertiesTagValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: img::getColorFormatName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_getColorFormatName00
static int tolua_MyLuaBind_img_getColorFormatName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::E_COLOR_FORMAT fmt = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  img::getColorFormatName(fmt);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColorFormatName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: img::getBitsPerPixelFromFormat */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_getBitsPerPixelFromFormat00
static int tolua_MyLuaBind_img_getBitsPerPixelFromFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::E_COLOR_FORMAT fmt = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,1,0));
 {
  unsigned tolua_ret = (unsigned)  img::getBitsPerPixelFromFormat(fmt);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBitsPerPixelFromFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getDriverTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getDriverTypeName00
static int tolua_MyLuaBind_vid_getDriverTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_DRIVER_TYPE type = ((vid::E_DRIVER_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getDriverTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDriverTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getDriverTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getDriverTypeReadableName00
static int tolua_MyLuaBind_vid_getDriverTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_DRIVER_TYPE type = ((vid::E_DRIVER_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getDriverTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDriverTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getTextureLayerTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getTextureLayerTypeName00
static int tolua_MyLuaBind_vid_getTextureLayerTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_TEXTURE_LAYER_TYPE type = ((vid::E_TEXTURE_LAYER_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getTextureLayerTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTextureLayerTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getTextureLayerTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getTextureLayerTypeReadableName00
static int tolua_MyLuaBind_vid_getTextureLayerTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_TEXTURE_LAYER_TYPE type = ((vid::E_TEXTURE_LAYER_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getTextureLayerTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTextureLayerTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getVertexTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getVertexTypeName00
static int tolua_MyLuaBind_vid_getVertexTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_VERTEX_TYPE vtype = ((vid::E_VERTEX_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getVertexTypeName(vtype);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVertexTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getMaterialFlagName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getMaterialFlagName00
static int tolua_MyLuaBind_vid_getMaterialFlagName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_MATERIAL_FLAG flag = ((vid::E_MATERIAL_FLAG) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getMaterialFlagName(flag);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaterialFlagName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getMaterialFlagReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getMaterialFlagReadableName00
static int tolua_MyLuaBind_vid_getMaterialFlagReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_MATERIAL_FLAG flag = ((vid::E_MATERIAL_FLAG) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getMaterialFlagReadableName(flag);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaterialFlagReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getSrcBlendFunctionName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getSrcBlendFunctionName00
static int tolua_MyLuaBind_vid_getSrcBlendFunctionName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_SRC_BLEND_FUNCTION func = ((vid::E_SRC_BLEND_FUNCTION) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getSrcBlendFunctionName(func);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSrcBlendFunctionName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getSrcBlendFunctionReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getSrcBlendFunctionReadableName00
static int tolua_MyLuaBind_vid_getSrcBlendFunctionReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_SRC_BLEND_FUNCTION func = ((vid::E_SRC_BLEND_FUNCTION) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getSrcBlendFunctionReadableName(func);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSrcBlendFunctionReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getDstBlendFunctionName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getDstBlendFunctionName00
static int tolua_MyLuaBind_vid_getDstBlendFunctionName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_DST_BLEND_FUNCTION func = ((vid::E_DST_BLEND_FUNCTION) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getDstBlendFunctionName(func);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDstBlendFunctionName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getDstBlendFunctionReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getDstBlendFunctionReadableName00
static int tolua_MyLuaBind_vid_getDstBlendFunctionReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_DST_BLEND_FUNCTION func = ((vid::E_DST_BLEND_FUNCTION) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getDstBlendFunctionReadableName(func);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDstBlendFunctionReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getBlendEquationName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getBlendEquationName00
static int tolua_MyLuaBind_vid_getBlendEquationName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_BLEND_EQUATION eq = ((vid::E_BLEND_EQUATION) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getBlendEquationName(eq);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBlendEquationName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getBlendEquationReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getBlendEquationReadableName00
static int tolua_MyLuaBind_vid_getBlendEquationReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_BLEND_EQUATION eq = ((vid::E_BLEND_EQUATION) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getBlendEquationReadableName(eq);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBlendEquationReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getTexCoordGenTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getTexCoordGenTypeName00
static int tolua_MyLuaBind_vid_getTexCoordGenTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_TEXCOORD_GEN_TYPE type = ((vid::E_TEXCOORD_GEN_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getTexCoordGenTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexCoordGenTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getTexCoordGenTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getTexCoordGenTypeReadableName00
static int tolua_MyLuaBind_vid_getTexCoordGenTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_TEXCOORD_GEN_TYPE type = ((vid::E_TEXCOORD_GEN_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getTexCoordGenTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexCoordGenTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getTexCoordModTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getTexCoordModTypeName00
static int tolua_MyLuaBind_vid_getTexCoordModTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_TEXCOORD_MOD_TYPE type = ((vid::E_TEXCOORD_MOD_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getTexCoordModTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexCoordModTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getTexCoordModTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getTexCoordModTypeReadableName00
static int tolua_MyLuaBind_vid_getTexCoordModTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_TEXCOORD_MOD_TYPE type = ((vid::E_TEXCOORD_MOD_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getTexCoordModTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexCoordModTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getColorGenTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getColorGenTypeName00
static int tolua_MyLuaBind_vid_getColorGenTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_COLOR_GEN_TYPE type = ((vid::E_COLOR_GEN_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getColorGenTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColorGenTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getColorGenTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getColorGenTypeReadableName00
static int tolua_MyLuaBind_vid_getColorGenTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_COLOR_GEN_TYPE type = ((vid::E_COLOR_GEN_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getColorGenTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColorGenTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getAlphaGenTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getAlphaGenTypeName00
static int tolua_MyLuaBind_vid_getAlphaGenTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_ALPHA_GEN_TYPE type = ((vid::E_ALPHA_GEN_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getAlphaGenTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlphaGenTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getAlphaGenTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getAlphaGenTypeReadableName00
static int tolua_MyLuaBind_vid_getAlphaGenTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_ALPHA_GEN_TYPE type = ((vid::E_ALPHA_GEN_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getAlphaGenTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlphaGenTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getTexCoordAddrModeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getTexCoordAddrModeName00
static int tolua_MyLuaBind_vid_getTexCoordAddrModeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_TEXCOORD_ADDRESS_MODE mode = ((vid::E_TEXCOORD_ADDRESS_MODE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getTexCoordAddrModeName(mode);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexCoordAddrModeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getTexCoordAddrModeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getTexCoordAddrModeReadableName00
static int tolua_MyLuaBind_vid_getTexCoordAddrModeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_TEXCOORD_ADDRESS_MODE mode = ((vid::E_TEXCOORD_ADDRESS_MODE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getTexCoordAddrModeReadableName(mode);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexCoordAddrModeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getLightTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getLightTypeName00
static int tolua_MyLuaBind_vid_getLightTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_LIGHT_TYPE type = ((vid::E_LIGHT_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getLightTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLightTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getLightTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getLightTypeReadableName00
static int tolua_MyLuaBind_vid_getLightTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_LIGHT_TYPE type = ((vid::E_LIGHT_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getLightTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLightTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getFogTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getFogTypeName00
static int tolua_MyLuaBind_vid_getFogTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_FOG_TYPE type = ((vid::E_FOG_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getFogTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFogTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getFogTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getFogTypeReadableName00
static int tolua_MyLuaBind_vid_getFogTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_FOG_TYPE type = ((vid::E_FOG_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getFogTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFogTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getUniformFlag */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getUniformFlag00
static int tolua_MyLuaBind_vid_getUniformFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_UNIFORM_TYPE type = ((vid::E_UNIFORM_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  vid::E_UNIFORM_FLAG tolua_ret = (vid::E_UNIFORM_FLAG)  vid::getUniformFlag(type);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUniformFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getUniformName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getUniformName00
static int tolua_MyLuaBind_vid_getUniformName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_UNIFORM_TYPE type = ((vid::E_UNIFORM_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getUniformName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUniformName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getUniformReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getUniformReadableName00
static int tolua_MyLuaBind_vid_getUniformReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_UNIFORM_TYPE type = ((vid::E_UNIFORM_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getUniformReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUniformReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getPolygonFillModeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getPolygonFillModeName00
static int tolua_MyLuaBind_vid_getPolygonFillModeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_POLYGON_FILL_MODE type = ((vid::E_POLYGON_FILL_MODE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getPolygonFillModeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPolygonFillModeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getPolygonFillModeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getPolygonFillModeReadableName00
static int tolua_MyLuaBind_vid_getPolygonFillModeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_POLYGON_FILL_MODE type = ((vid::E_POLYGON_FILL_MODE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getPolygonFillModeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPolygonFillModeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getCompareTestName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getCompareTestName00
static int tolua_MyLuaBind_vid_getCompareTestName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_COMPARE_TEST test = ((vid::E_COMPARE_TEST) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getCompareTestName(test);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCompareTestName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getCompareTestReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getCompareTestReadableName00
static int tolua_MyLuaBind_vid_getCompareTestReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_COMPARE_TEST test = ((vid::E_COMPARE_TEST) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getCompareTestReadableName(test);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCompareTestReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getRenderPassName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getRenderPassName00
static int tolua_MyLuaBind_vid_getRenderPassName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_RENDER_PASS pass = ((vid::E_RENDER_PASS) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getRenderPassName(pass);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRenderPassName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getRenderPassReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getRenderPassReadableName00
static int tolua_MyLuaBind_vid_getRenderPassReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_RENDER_PASS pass = ((vid::E_RENDER_PASS) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getRenderPassReadableName(pass);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRenderPassReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getDefaultTextureName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getDefaultTextureName00
static int tolua_MyLuaBind_vid_getDefaultTextureName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_DEFAULT_TEXTURE tex = ((vid::E_DEFAULT_TEXTURE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getDefaultTextureName(tex);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDefaultTextureName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getDefaultTextureReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getDefaultTextureReadableName00
static int tolua_MyLuaBind_vid_getDefaultTextureReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_DEFAULT_TEXTURE tex = ((vid::E_DEFAULT_TEXTURE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getDefaultTextureReadableName(tex);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDefaultTextureReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getVertexShaderVersionName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getVertexShaderVersionName00
static int tolua_MyLuaBind_vid_getVertexShaderVersionName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_VERTEX_SHADER_VERSION ver = ((vid::E_VERTEX_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getVertexShaderVersionName(ver);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVertexShaderVersionName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getVertexShaderVersionReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getVertexShaderVersionReadableName00
static int tolua_MyLuaBind_vid_getVertexShaderVersionReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_VERTEX_SHADER_VERSION ver = ((vid::E_VERTEX_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getVertexShaderVersionReadableName(ver);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVertexShaderVersionReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getAlphaTestName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getAlphaTestName00
static int tolua_MyLuaBind_vid_getAlphaTestName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_ALPHA_TEST test = ((vid::E_ALPHA_TEST) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getAlphaTestName(test);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlphaTestName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getAlphaTestReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getAlphaTestReadableName00
static int tolua_MyLuaBind_vid_getAlphaTestReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_ALPHA_TEST test = ((vid::E_ALPHA_TEST) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getAlphaTestReadableName(test);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlphaTestReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getPixelShaderVersionName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getPixelShaderVersionName00
static int tolua_MyLuaBind_vid_getPixelShaderVersionName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_PIXEL_SHADER_VERSION ver = ((vid::E_PIXEL_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getPixelShaderVersionName(ver);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPixelShaderVersionName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getPixelShaderVersionReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getPixelShaderVersionReadableName00
static int tolua_MyLuaBind_vid_getPixelShaderVersionReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_PIXEL_SHADER_VERSION ver = ((vid::E_PIXEL_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  vid::getPixelShaderVersionReadableName(ver);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPixelShaderVersionReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getVertexSize */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getVertexSize00
static int tolua_MyLuaBind_vid_getVertexSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_VERTEX_TYPE type = ((vid::E_VERTEX_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  unsigned tolua_ret = (unsigned)  vid::getVertexSize(type);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVertexSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getVertexComponents */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getVertexComponents00
static int tolua_MyLuaBind_vid_getVertexComponents00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_VERTEX_TYPE type = ((vid::E_VERTEX_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  unsigned tolua_ret = (unsigned)  vid::getVertexComponents(type);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVertexComponents'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getVertexTypeFromComponents */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getVertexTypeFromComponents00
static int tolua_MyLuaBind_vid_getVertexTypeFromComponents00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  unsigned components = ((unsigned)  tolua_tonumber(tolua_S,1,0));
 {
  vid::E_VERTEX_TYPE tolua_ret = (vid::E_VERTEX_TYPE)  vid::getVertexTypeFromComponents(components);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVertexTypeFromComponents'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::getIndexSize */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_getIndexSize00
static int tolua_MyLuaBind_vid_getIndexSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  E_INDEX_TYPE type = ((E_INDEX_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  unsigned tolua_ret = (unsigned)  vid::getIndexSize(type);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getIndexSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: dyn::getDynamicObjectTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dyn_getDynamicObjectTypeName00
static int tolua_MyLuaBind_dyn_getDynamicObjectTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dyn::E_DYNAMIC_OBJECT_TYPE type = ((dyn::E_DYNAMIC_OBJECT_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  dyn::getDynamicObjectTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDynamicObjectTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: dyn::getDynamicObjectTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dyn_getDynamicObjectTypeReadableName00
static int tolua_MyLuaBind_dyn_getDynamicObjectTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dyn::E_DYNAMIC_OBJECT_TYPE type = ((dyn::E_DYNAMIC_OBJECT_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  dyn::getDynamicObjectTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDynamicObjectTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: dyn::getGeomFormName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dyn_getGeomFormName00
static int tolua_MyLuaBind_dyn_getGeomFormName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dyn::E_DYN_OBJ_GEOM_FORM type = ((dyn::E_DYN_OBJ_GEOM_FORM) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  dyn::getGeomFormName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGeomFormName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: dyn::getGeomFormReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dyn_getGeomFormReadableName00
static int tolua_MyLuaBind_dyn_getGeomFormReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dyn::E_DYN_OBJ_GEOM_FORM type = ((dyn::E_DYN_OBJ_GEOM_FORM) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  dyn::getGeomFormReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGeomFormReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: dyn::getDynamicObjectCorePropertiesTagValue */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dyn_getDynamicObjectCorePropertiesTagValue00
static int tolua_MyLuaBind_dyn_getDynamicObjectCorePropertiesTagValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  const char* tolua_ret = (const char*)  dyn::getDynamicObjectCorePropertiesTagValue();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDynamicObjectCorePropertiesTagValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::getFuncTypeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_getFuncTypeName00
static int tolua_MyLuaBind_core_getFuncTypeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::E_FUNC_TYPE type = ((core::E_FUNC_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  core::getFuncTypeName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFuncTypeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::getFuncTypeReadableName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_getFuncTypeReadableName00
static int tolua_MyLuaBind_core_getFuncTypeReadableName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::E_FUNC_TYPE type = ((core::E_FUNC_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  core::getFuncTypeReadableName(type);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFuncTypeReadableName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_new00
static int tolua_MyLuaBind_core_aabbox3df_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::aabbox3df* tolua_ret = (core::aabbox3df*)  new core::aabbox3df();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::aabbox3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_new00_local
static int tolua_MyLuaBind_core_aabbox3df_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::aabbox3df* tolua_ret = (core::aabbox3df*)  new core::aabbox3df();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::aabbox3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_new01
static int tolua_MyLuaBind_core_aabbox3df_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* init = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::aabbox3df* tolua_ret = (core::aabbox3df*)  new core::aabbox3df(*init);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::aabbox3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_aabbox3df_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_new01_local
static int tolua_MyLuaBind_core_aabbox3df_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* init = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::aabbox3df* tolua_ret = (core::aabbox3df*)  new core::aabbox3df(*init);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::aabbox3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_aabbox3df_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_new02
static int tolua_MyLuaBind_core_aabbox3df_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* min = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* max = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
 {
  core::aabbox3df* tolua_ret = (core::aabbox3df*)  new core::aabbox3df(*min,*max);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::aabbox3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_aabbox3df_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_new02_local
static int tolua_MyLuaBind_core_aabbox3df_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* min = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* max = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
 {
  core::aabbox3df* tolua_ret = (core::aabbox3df*)  new core::aabbox3df(*min,*max);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::aabbox3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_aabbox3df_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_new03
static int tolua_MyLuaBind_core_aabbox3df_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float minx = ((float)  tolua_tonumber(tolua_S,2,0));
  float miny = ((float)  tolua_tonumber(tolua_S,3,0));
  float minz = ((float)  tolua_tonumber(tolua_S,4,0));
  float maxx = ((float)  tolua_tonumber(tolua_S,5,0));
  float maxy = ((float)  tolua_tonumber(tolua_S,6,0));
  float maxz = ((float)  tolua_tonumber(tolua_S,7,0));
 {
  core::aabbox3df* tolua_ret = (core::aabbox3df*)  new core::aabbox3df(minx,miny,minz,maxx,maxy,maxz);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::aabbox3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_aabbox3df_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_new03_local
static int tolua_MyLuaBind_core_aabbox3df_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float minx = ((float)  tolua_tonumber(tolua_S,2,0));
  float miny = ((float)  tolua_tonumber(tolua_S,3,0));
  float minz = ((float)  tolua_tonumber(tolua_S,4,0));
  float maxx = ((float)  tolua_tonumber(tolua_S,5,0));
  float maxy = ((float)  tolua_tonumber(tolua_S,6,0));
  float maxz = ((float)  tolua_tonumber(tolua_S,7,0));
 {
  core::aabbox3df* tolua_ret = (core::aabbox3df*)  new core::aabbox3df(minx,miny,minz,maxx,maxy,maxz);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::aabbox3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_aabbox3df_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_new04
static int tolua_MyLuaBind_core_aabbox3df_new04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::aabbox3df* box = ((const core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::aabbox3df* tolua_ret = (core::aabbox3df*)  new core::aabbox3df(*box);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::aabbox3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_aabbox3df_new03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_new04_local
static int tolua_MyLuaBind_core_aabbox3df_new04_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::aabbox3df* box = ((const core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::aabbox3df* tolua_ret = (core::aabbox3df*)  new core::aabbox3df(*box);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::aabbox3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_aabbox3df_new03_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_delete00
static int tolua_MyLuaBind_core_aabbox3df_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df__eq00
static int tolua_MyLuaBind_core_aabbox3df__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::aabbox3df* self = (const core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
  const core::aabbox3df* other = ((const core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addInternalPoint of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_addInternalPoint00
static int tolua_MyLuaBind_core_aabbox3df_addInternalPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* p = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addInternalPoint'",NULL);
#endif
 {
  self->addInternalPoint(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addInternalPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addInternalBox of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_addInternalBox00
static int tolua_MyLuaBind_core_aabbox3df_addInternalBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
  const core::aabbox3df* b = ((const core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addInternalBox'",NULL);
#endif
 {
  self->addInternalBox(*b);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addInternalBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_reset00
static int tolua_MyLuaBind_core_aabbox3df_reset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  float z = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'",NULL);
#endif
 {
  self->reset(x,y,z);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_reset01
static int tolua_MyLuaBind_core_aabbox3df_reset01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
  const core::aabbox3df* initValue = ((const core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'",NULL);
#endif
 {
  self->reset(*initValue);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_aabbox3df_reset00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_reset02
static int tolua_MyLuaBind_core_aabbox3df_reset02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* initValue = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'",NULL);
#endif
 {
  self->reset(*initValue);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_aabbox3df_reset01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCenter of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_getCenter00
static int tolua_MyLuaBind_core_aabbox3df_getCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::aabbox3df* self = (const core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCenter'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getCenter();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getExtend of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_getExtend00
static int tolua_MyLuaBind_core_aabbox3df_getExtend00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::aabbox3df* self = (const core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getExtend'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getExtend();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getExtend'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isEmpty of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_isEmpty00
static int tolua_MyLuaBind_core_aabbox3df_isEmpty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::aabbox3df* self = (const core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isEmpty'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isEmpty();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isEmpty'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: repair of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_repair00
static int tolua_MyLuaBind_core_aabbox3df_repair00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'repair'",NULL);
#endif
 {
  self->repair();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'repair'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isValide of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_isValide00
static int tolua_MyLuaBind_core_aabbox3df_isValide00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::aabbox3df* self = (const core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isValide'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isValide();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isValide'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_aabbox3df_set00
static int tolua_MyLuaBind_core_aabbox3df_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
  const core::aabbox3df* b = ((const core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*b);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MinEdge of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_get_core__aabbox3df_MinEdge
static int tolua_get_core__aabbox3df_MinEdge(lua_State* tolua_S)
{
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MinEdge'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->MinEdge,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MinEdge of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_set_core__aabbox3df_MinEdge
static int tolua_set_core__aabbox3df_MinEdge(lua_State* tolua_S)
{
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MinEdge'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MinEdge = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MaxEdge of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_get_core__aabbox3df_MaxEdge
static int tolua_get_core__aabbox3df_MaxEdge(lua_State* tolua_S)
{
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxEdge'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->MaxEdge,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MaxEdge of class  core::aabbox3df */
#ifndef TOLUA_DISABLE_tolua_set_core__aabbox3df_MaxEdge
static int tolua_set_core__aabbox3df_MaxEdge(lua_State* tolua_S)
{
  core::aabbox3df* self = (core::aabbox3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxEdge'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MaxEdge = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2di_new00
static int tolua_MyLuaBind_core_dimension2di_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::dimension2di* tolua_ret = (core::dimension2di*)  new core::dimension2di();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::dimension2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2di_new00_local
static int tolua_MyLuaBind_core_dimension2di_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::dimension2di* tolua_ret = (core::dimension2di*)  new core::dimension2di();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::dimension2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2di_new01
static int tolua_MyLuaBind_core_dimension2di_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
 {
  core::dimension2di* tolua_ret = (core::dimension2di*)  new core::dimension2di(width,height);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::dimension2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_dimension2di_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2di_new01_local
static int tolua_MyLuaBind_core_dimension2di_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
 {
  core::dimension2di* tolua_ret = (core::dimension2di*)  new core::dimension2di(width,height);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::dimension2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_dimension2di_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2di_new02
static int tolua_MyLuaBind_core_dimension2di_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::dimension2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::dimension2di* other = ((const core::dimension2di*)  tolua_tousertype(tolua_S,2,0));
 {
  core::dimension2di* tolua_ret = (core::dimension2di*)  new core::dimension2di(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::dimension2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_dimension2di_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2di_new02_local
static int tolua_MyLuaBind_core_dimension2di_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::dimension2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::dimension2di* other = ((const core::dimension2di*)  tolua_tousertype(tolua_S,2,0));
 {
  core::dimension2di* tolua_ret = (core::dimension2di*)  new core::dimension2di(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::dimension2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_dimension2di_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2di_delete00
static int tolua_MyLuaBind_core_dimension2di_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::dimension2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::dimension2di* self = (core::dimension2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2di_set00
static int tolua_MyLuaBind_core_dimension2di_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::dimension2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::dimension2di* self = (core::dimension2di*)  tolua_tousertype(tolua_S,1,0);
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(width,height);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2di_set01
static int tolua_MyLuaBind_core_dimension2di_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::dimension2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::dimension2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::dimension2di* self = (core::dimension2di*)  tolua_tousertype(tolua_S,1,0);
  const core::dimension2di* other = ((const core::dimension2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*other);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_dimension2di_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Width of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_get_core__dimension2di_Width
static int tolua_get_core__dimension2di_Width(lua_State* tolua_S)
{
  core::dimension2di* self = (core::dimension2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Width of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_set_core__dimension2di_Width
static int tolua_set_core__dimension2di_Width(lua_State* tolua_S)
{
  core::dimension2di* self = (core::dimension2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Width = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Height of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_get_core__dimension2di_Height
static int tolua_get_core__dimension2di_Height(lua_State* tolua_S)
{
  core::dimension2di* self = (core::dimension2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Height of class  core::dimension2di */
#ifndef TOLUA_DISABLE_tolua_set_core__dimension2di_Height
static int tolua_set_core__dimension2di_Height(lua_State* tolua_S)
{
  core::dimension2di* self = (core::dimension2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Height = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2df_new00
static int tolua_MyLuaBind_core_dimension2df_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::dimension2df* tolua_ret = (core::dimension2df*)  new core::dimension2df();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::dimension2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2df_new00_local
static int tolua_MyLuaBind_core_dimension2df_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::dimension2df* tolua_ret = (core::dimension2df*)  new core::dimension2df();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::dimension2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2df_new01
static int tolua_MyLuaBind_core_dimension2df_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float width = ((float)  tolua_tonumber(tolua_S,2,0));
  float height = ((float)  tolua_tonumber(tolua_S,3,0));
 {
  core::dimension2df* tolua_ret = (core::dimension2df*)  new core::dimension2df(width,height);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::dimension2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_dimension2df_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2df_new01_local
static int tolua_MyLuaBind_core_dimension2df_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float width = ((float)  tolua_tonumber(tolua_S,2,0));
  float height = ((float)  tolua_tonumber(tolua_S,3,0));
 {
  core::dimension2df* tolua_ret = (core::dimension2df*)  new core::dimension2df(width,height);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::dimension2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_dimension2df_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2df_new02
static int tolua_MyLuaBind_core_dimension2df_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::dimension2df* other = ((const core::dimension2df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::dimension2df* tolua_ret = (core::dimension2df*)  new core::dimension2df(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::dimension2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_dimension2df_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2df_new02_local
static int tolua_MyLuaBind_core_dimension2df_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::dimension2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::dimension2df* other = ((const core::dimension2df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::dimension2df* tolua_ret = (core::dimension2df*)  new core::dimension2df(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::dimension2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_dimension2df_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2df_delete00
static int tolua_MyLuaBind_core_dimension2df_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::dimension2df* self = (core::dimension2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2df_set00
static int tolua_MyLuaBind_core_dimension2df_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::dimension2df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::dimension2df* self = (core::dimension2df*)  tolua_tousertype(tolua_S,1,0);
  float width = ((float)  tolua_tonumber(tolua_S,2,0));
  float height = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(width,height);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_dimension2df_set01
static int tolua_MyLuaBind_core_dimension2df_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::dimension2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::dimension2df* self = (core::dimension2df*)  tolua_tousertype(tolua_S,1,0);
  const core::dimension2df* other = ((const core::dimension2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*other);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_dimension2df_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Width of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_get_core__dimension2df_Width
static int tolua_get_core__dimension2df_Width(lua_State* tolua_S)
{
  core::dimension2df* self = (core::dimension2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Width of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_set_core__dimension2df_Width
static int tolua_set_core__dimension2df_Width(lua_State* tolua_S)
{
  core::dimension2df* self = (core::dimension2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Width = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Height of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_get_core__dimension2df_Height
static int tolua_get_core__dimension2df_Height(lua_State* tolua_S)
{
  core::dimension2df* self = (core::dimension2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Height of class  core::dimension2df */
#ifndef TOLUA_DISABLE_tolua_set_core__dimension2df_Height
static int tolua_set_core__dimension2df_Height(lua_State* tolua_S)
{
  core::dimension2df* self = (core::dimension2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Height = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_new00
static int tolua_MyLuaBind_core_line3df_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::line3df* tolua_ret = (core::line3df*)  new core::line3df();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::line3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_new00_local
static int tolua_MyLuaBind_core_line3df_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::line3df* tolua_ret = (core::line3df*)  new core::line3df();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::line3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_new01
static int tolua_MyLuaBind_core_line3df_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float xa = ((float)  tolua_tonumber(tolua_S,2,0));
  float ya = ((float)  tolua_tonumber(tolua_S,3,0));
  float za = ((float)  tolua_tonumber(tolua_S,4,0));
  float xb = ((float)  tolua_tonumber(tolua_S,5,0));
  float yb = ((float)  tolua_tonumber(tolua_S,6,0));
  float zb = ((float)  tolua_tonumber(tolua_S,7,0));
 {
  core::line3df* tolua_ret = (core::line3df*)  new core::line3df(xa,ya,za,xb,yb,zb);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::line3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_line3df_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_new01_local
static int tolua_MyLuaBind_core_line3df_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float xa = ((float)  tolua_tonumber(tolua_S,2,0));
  float ya = ((float)  tolua_tonumber(tolua_S,3,0));
  float za = ((float)  tolua_tonumber(tolua_S,4,0));
  float xb = ((float)  tolua_tonumber(tolua_S,5,0));
  float yb = ((float)  tolua_tonumber(tolua_S,6,0));
  float zb = ((float)  tolua_tonumber(tolua_S,7,0));
 {
  core::line3df* tolua_ret = (core::line3df*)  new core::line3df(xa,ya,za,xb,yb,zb);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::line3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_line3df_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_new02
static int tolua_MyLuaBind_core_line3df_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* start = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* end = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
 {
  core::line3df* tolua_ret = (core::line3df*)  new core::line3df(*start,*end);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::line3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_line3df_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_new02_local
static int tolua_MyLuaBind_core_line3df_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* start = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* end = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
 {
  core::line3df* tolua_ret = (core::line3df*)  new core::line3df(*start,*end);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::line3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_line3df_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_new03
static int tolua_MyLuaBind_core_line3df_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::line3df* other = ((const core::line3df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::line3df* tolua_ret = (core::line3df*)  new core::line3df(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::line3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_line3df_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_new03_local
static int tolua_MyLuaBind_core_line3df_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::line3df* other = ((const core::line3df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::line3df* tolua_ret = (core::line3df*)  new core::line3df(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::line3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_line3df_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_delete00
static int tolua_MyLuaBind_core_line3df_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::line3df* self = (core::line3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df__add00
static int tolua_MyLuaBind_core_line3df__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::line3df* self = (const core::line3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* point = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
 {
  core::line3df tolua_ret = (core::line3df)  self->operator+(*point);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::line3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::line3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::line3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::line3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df__sub00
static int tolua_MyLuaBind_core_line3df__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::line3df* self = (const core::line3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* point = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
 {
  core::line3df tolua_ret = (core::line3df)  self->operator-(*point);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::line3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::line3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::line3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::line3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df__eq00
static int tolua_MyLuaBind_core_line3df__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::line3df* self = (const core::line3df*)  tolua_tousertype(tolua_S,1,0);
  const core::line3df* other = ((const core::line3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_set00
static int tolua_MyLuaBind_core_line3df_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::line3df* self = (core::line3df*)  tolua_tousertype(tolua_S,1,0);
  const float xa = ((const float)  tolua_tonumber(tolua_S,2,0));
  const float ya = ((const float)  tolua_tonumber(tolua_S,3,0));
  const float za = ((const float)  tolua_tonumber(tolua_S,4,0));
  const float xb = ((const float)  tolua_tonumber(tolua_S,5,0));
  const float yb = ((const float)  tolua_tonumber(tolua_S,6,0));
  const float zb = ((const float)  tolua_tonumber(tolua_S,7,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(xa,ya,za,xb,yb,zb);
 tolua_pushnumber(tolua_S,(lua_Number)xa);
 tolua_pushnumber(tolua_S,(lua_Number)ya);
 tolua_pushnumber(tolua_S,(lua_Number)za);
 tolua_pushnumber(tolua_S,(lua_Number)xb);
 tolua_pushnumber(tolua_S,(lua_Number)yb);
 tolua_pushnumber(tolua_S,(lua_Number)zb);
 }
 }
 return 6;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_set01
static int tolua_MyLuaBind_core_line3df_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::line3df* self = (core::line3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* nstart = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* nend = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*nstart,*nend);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_line3df_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_set02
static int tolua_MyLuaBind_core_line3df_set02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::line3df* self = (core::line3df*)  tolua_tousertype(tolua_S,1,0);
  const core::line3df* line = ((const core::line3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*line);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_line3df_set01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLength of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_getLength00
static int tolua_MyLuaBind_core_line3df_getLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::line3df* self = (const core::line3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLength'",NULL);
#endif
 {
  double tolua_ret = (double)  self->getLength();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLengthSQ of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_getLengthSQ00
static int tolua_MyLuaBind_core_line3df_getLengthSQ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::line3df* self = (const core::line3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLengthSQ'",NULL);
#endif
 {
  double tolua_ret = (double)  self->getLengthSQ();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLengthSQ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMiddle of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_getMiddle00
static int tolua_MyLuaBind_core_line3df_getMiddle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::line3df* self = (const core::line3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMiddle'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getMiddle();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMiddle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVector of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_getVector00
static int tolua_MyLuaBind_core_line3df_getVector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::line3df* self = (const core::line3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVector'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getVector();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isPointBetweenStartAndEnd of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_isPointBetweenStartAndEnd00
static int tolua_MyLuaBind_core_line3df_isPointBetweenStartAndEnd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::line3df* self = (const core::line3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* point = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isPointBetweenStartAndEnd'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isPointBetweenStartAndEnd(*point);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isPointBetweenStartAndEnd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getClosestPoint of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_getClosestPoint00
static int tolua_MyLuaBind_core_line3df_getClosestPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::line3df* self = (const core::line3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* point = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getClosestPoint'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getClosestPoint(*point);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getClosestPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getIntersectionWithSphere of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_getIntersectionWithSphere00
static int tolua_MyLuaBind_core_line3df_getIntersectionWithSphere00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::line3df* self = (core::line3df*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df sorigin = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  float sradius = ((float)  tolua_tonumber(tolua_S,3,0));
  double outdistance = ((double)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getIntersectionWithSphere'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getIntersectionWithSphere(sorigin,sradius,outdistance);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 tolua_pushnumber(tolua_S,(lua_Number)outdistance);
 }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getIntersectionWithSphere'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: intersectsWithSphere of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_line3df_intersectsWithSphere00
static int tolua_MyLuaBind_core_line3df_intersectsWithSphere00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::line3df* self = (core::line3df*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df sorigin = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  float sradius = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'intersectsWithSphere'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->intersectsWithSphere(sorigin,sradius);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'intersectsWithSphere'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: start of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_get_core__line3df_start
static int tolua_get_core__line3df_start(lua_State* tolua_S)
{
  core::line3df* self = (core::line3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'start'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->start,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: start of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_set_core__line3df_start
static int tolua_set_core__line3df_start(lua_State* tolua_S)
{
  core::line3df* self = (core::line3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'start'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->start = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: end of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_get_core__line3df_end
static int tolua_get_core__line3df_end(lua_State* tolua_S)
{
  core::line3df* self = (core::line3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'end'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->end,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: end of class  core::line3df */
#ifndef TOLUA_DISABLE_tolua_set_core__line3df_end
static int tolua_set_core__line3df_end(lua_State* tolua_S)
{
  core::line3df* self = (core::line3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'end'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->end = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_new00
static int tolua_MyLuaBind_core_matrix4_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::matrix4* tolua_ret = (core::matrix4*)  new core::matrix4();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::matrix4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_new00_local
static int tolua_MyLuaBind_core_matrix4_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::matrix4* tolua_ret = (core::matrix4*)  new core::matrix4();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::matrix4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_new01
static int tolua_MyLuaBind_core_matrix4_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,10,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,11,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,12,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,13,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,14,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,15,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,16,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,17,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,18,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float m0 = ((float)  tolua_tonumber(tolua_S,2,0));
  float m1 = ((float)  tolua_tonumber(tolua_S,3,0));
  float m2 = ((float)  tolua_tonumber(tolua_S,4,0));
  float m3 = ((float)  tolua_tonumber(tolua_S,5,0));
  float m4 = ((float)  tolua_tonumber(tolua_S,6,0));
  float m5 = ((float)  tolua_tonumber(tolua_S,7,0));
  float m6 = ((float)  tolua_tonumber(tolua_S,8,0));
  float m7 = ((float)  tolua_tonumber(tolua_S,9,0));
  float m8 = ((float)  tolua_tonumber(tolua_S,10,0));
  float m9 = ((float)  tolua_tonumber(tolua_S,11,0));
  float m10 = ((float)  tolua_tonumber(tolua_S,12,0));
  float m11 = ((float)  tolua_tonumber(tolua_S,13,0));
  float m12 = ((float)  tolua_tonumber(tolua_S,14,0));
  float m13 = ((float)  tolua_tonumber(tolua_S,15,0));
  float m14 = ((float)  tolua_tonumber(tolua_S,16,0));
  float m15 = ((float)  tolua_tonumber(tolua_S,17,0));
 {
  core::matrix4* tolua_ret = (core::matrix4*)  new core::matrix4(m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::matrix4");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_matrix4_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_new01_local
static int tolua_MyLuaBind_core_matrix4_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,10,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,11,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,12,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,13,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,14,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,15,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,16,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,17,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,18,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float m0 = ((float)  tolua_tonumber(tolua_S,2,0));
  float m1 = ((float)  tolua_tonumber(tolua_S,3,0));
  float m2 = ((float)  tolua_tonumber(tolua_S,4,0));
  float m3 = ((float)  tolua_tonumber(tolua_S,5,0));
  float m4 = ((float)  tolua_tonumber(tolua_S,6,0));
  float m5 = ((float)  tolua_tonumber(tolua_S,7,0));
  float m6 = ((float)  tolua_tonumber(tolua_S,8,0));
  float m7 = ((float)  tolua_tonumber(tolua_S,9,0));
  float m8 = ((float)  tolua_tonumber(tolua_S,10,0));
  float m9 = ((float)  tolua_tonumber(tolua_S,11,0));
  float m10 = ((float)  tolua_tonumber(tolua_S,12,0));
  float m11 = ((float)  tolua_tonumber(tolua_S,13,0));
  float m12 = ((float)  tolua_tonumber(tolua_S,14,0));
  float m13 = ((float)  tolua_tonumber(tolua_S,15,0));
  float m14 = ((float)  tolua_tonumber(tolua_S,16,0));
  float m15 = ((float)  tolua_tonumber(tolua_S,17,0));
 {
  core::matrix4* tolua_ret = (core::matrix4*)  new core::matrix4(m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::matrix4");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_matrix4_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_delete00
static int tolua_MyLuaBind_core_matrix4_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4__eq00
static int tolua_MyLuaBind_core_matrix4__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::matrix4* other = ((const core::matrix4*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4__mul00
static int tolua_MyLuaBind_core_matrix4__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::matrix4* other = ((const core::matrix4*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
 {
  core::matrix4 tolua_ret = (core::matrix4)  self->operator*(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::matrix4(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::matrix4");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::matrix4));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::matrix4");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4__mul01
static int tolua_MyLuaBind_core_matrix4__mul01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const float number = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
 {
  core::matrix4 tolua_ret = (core::matrix4)  self->operator*(number);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::matrix4(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::matrix4");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::matrix4));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::matrix4");
#endif
 }
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_matrix4__mul00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator&[] of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4__seti00
static int tolua_MyLuaBind_core_matrix4__seti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
  float tolua_value = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator&[]'",NULL);
#endif
 self->operator[](index) =  tolua_value;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.seti'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator[] of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4__geti00
static int tolua_MyLuaBind_core_matrix4__geti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'",NULL);
#endif
 {
  float tolua_ret = (float)  self->operator[](index);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.geti'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator[] of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4__geti01
static int tolua_MyLuaBind_core_matrix4__geti01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'",NULL);
#endif
 {
  const float tolua_ret = (const float)  self->operator[](index);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_matrix4__geti00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeIdentity of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_makeIdentity00
static int tolua_MyLuaBind_core_matrix4_makeIdentity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeIdentity'",NULL);
#endif
 {
  self->makeIdentity();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'makeIdentity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isIdentity of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_isIdentity00
static int tolua_MyLuaBind_core_matrix4_isIdentity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isIdentity'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isIdentity();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isIdentity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTranslation of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_setTranslation00
static int tolua_MyLuaBind_core_matrix4_setTranslation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* translation = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTranslation'",NULL);
#endif
 {
  self->setTranslation(*translation);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTranslation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTranslation of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_getTranslation00
static int tolua_MyLuaBind_core_matrix4_getTranslation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTranslation'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getTranslation();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTranslation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotationRadians of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_setRotationRadians00
static int tolua_MyLuaBind_core_matrix4_setRotationRadians00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* rotation = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotationRadians'",NULL);
#endif
 {
  self->setRotationRadians(*rotation);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotationRadians'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotationDegrees of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_setRotationDegrees00
static int tolua_MyLuaBind_core_matrix4_setRotationDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* rotation = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotationDegrees'",NULL);
#endif
 {
  self->setRotationDegrees(*rotation);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotationDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRotationDegrees of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_getRotationDegrees00
static int tolua_MyLuaBind_core_matrix4_getRotationDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRotationDegrees'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getRotationDegrees();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRotationDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInverseRotationRadians of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_setInverseRotationRadians00
static int tolua_MyLuaBind_core_matrix4_setInverseRotationRadians00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* rotation = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInverseRotationRadians'",NULL);
#endif
 {
  self->setInverseRotationRadians(*rotation);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInverseRotationRadians'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInverseRotationDegrees of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_setInverseRotationDegrees00
static int tolua_MyLuaBind_core_matrix4_setInverseRotationDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* rotation = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInverseRotationDegrees'",NULL);
#endif
 {
  self->setInverseRotationDegrees(*rotation);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInverseRotationDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScale of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_setScale00
static int tolua_MyLuaBind_core_matrix4_setScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* scale = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScale'",NULL);
#endif
 {
  self->setScale(*scale);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: inverseTranslateVect of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_inverseTranslateVect00
static int tolua_MyLuaBind_core_matrix4_inverseTranslateVect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df* vect = ((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'inverseTranslateVect'",NULL);
#endif
 {
  self->inverseTranslateVect(*vect);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'inverseTranslateVect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: inverseRotateVect of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_inverseRotateVect00
static int tolua_MyLuaBind_core_matrix4_inverseRotateVect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df* vect = ((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'inverseRotateVect'",NULL);
#endif
 {
  self->inverseRotateVect(*vect);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'inverseRotateVect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateVect of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_rotateVect00
static int tolua_MyLuaBind_core_matrix4_rotateVect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df* vect = ((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateVect'",NULL);
#endif
 {
  self->rotateVect(*vect);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateVect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: transformVect of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_transformVect00
static int tolua_MyLuaBind_core_matrix4_transformVect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df* vect = ((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'transformVect'",NULL);
#endif
 {
  self->transformVect(*vect);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'transformVect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: transformVect of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_transformVect01
static int tolua_MyLuaBind_core_matrix4_transformVect01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* in = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  core::vector3df* out = ((core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'transformVect'",NULL);
#endif
 {
  self->transformVect(*in,*out);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_matrix4_transformVect00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: translateVect of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_translateVect00
static int tolua_MyLuaBind_core_matrix4_translateVect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df* vect = ((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'translateVect'",NULL);
#endif
 {
  self->translateVect(*vect);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'translateVect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: transformPlane of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_transformPlane00
static int tolua_MyLuaBind_core_matrix4_transformPlane00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::plane3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  core::plane3df* plane = ((core::plane3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'transformPlane'",NULL);
#endif
 {
  self->transformPlane(*plane);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'transformPlane'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: transformPlane of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_transformPlane01
static int tolua_MyLuaBind_core_matrix4_transformPlane01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"core::plane3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::plane3df* in = ((const core::plane3df*)  tolua_tousertype(tolua_S,2,0));
  core::plane3df* out = ((core::plane3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'transformPlane'",NULL);
#endif
 {
  self->transformPlane(*in,*out);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_matrix4_transformPlane00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: transformBox of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_transformBox00
static int tolua_MyLuaBind_core_matrix4_transformBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  core::aabbox3df* box = ((core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'transformBox'",NULL);
#endif
 {
  self->transformBox(*box);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'transformBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: multiplyWith1x4Matrix of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_multiplyWith1x4Matrix00
static int tolua_MyLuaBind_core_matrix4_multiplyWith1x4Matrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  float matrix = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'multiplyWith1x4Matrix'",NULL);
#endif
 {
  self->multiplyWith1x4Matrix(&matrix);
 tolua_pushnumber(tolua_S,(lua_Number)matrix);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'multiplyWith1x4Matrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeInversed of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_makeInversed00
static int tolua_MyLuaBind_core_matrix4_makeInversed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeInversed'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->makeInversed();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'makeInversed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInversed of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_getInversed00
static int tolua_MyLuaBind_core_matrix4_getInversed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  core::matrix4* out = ((core::matrix4*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInversed'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getInversed(*out);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInversed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInversed of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_getInversed01
static int tolua_MyLuaBind_core_matrix4_getInversed01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInversed'",NULL);
#endif
 {
  core::matrix4 tolua_ret = (core::matrix4)  self->getInversed();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::matrix4(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::matrix4");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::matrix4));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::matrix4");
#endif
 }
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_matrix4_getInversed00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getZNear of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_getZNear00
static int tolua_MyLuaBind_core_matrix4_getZNear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getZNear'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getZNear();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getZNear'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getZFar of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_getZFar00
static int tolua_MyLuaBind_core_matrix4_getZFar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getZFar'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getZFar();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getZFar'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildProjectionMatrixPerspectiveRH of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_buildProjectionMatrixPerspectiveRH00
static int tolua_MyLuaBind_core_matrix4_buildProjectionMatrixPerspectiveRH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  float fov = ((float)  tolua_tonumber(tolua_S,2,0));
  float aspect = ((float)  tolua_tonumber(tolua_S,3,0));
  float zn = ((float)  tolua_tonumber(tolua_S,4,0));
  float zf = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildProjectionMatrixPerspectiveRH'",NULL);
#endif
 {
  self->buildProjectionMatrixPerspectiveRH(fov,aspect,zn,zf);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildProjectionMatrixPerspectiveRH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildProjectionMatrixPerspectiveLH of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_buildProjectionMatrixPerspectiveLH00
static int tolua_MyLuaBind_core_matrix4_buildProjectionMatrixPerspectiveLH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  float fov = ((float)  tolua_tonumber(tolua_S,2,0));
  float aspect = ((float)  tolua_tonumber(tolua_S,3,0));
  float zn = ((float)  tolua_tonumber(tolua_S,4,0));
  float zf = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildProjectionMatrixPerspectiveLH'",NULL);
#endif
 {
  self->buildProjectionMatrixPerspectiveLH(fov,aspect,zn,zf);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildProjectionMatrixPerspectiveLH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildProjectionMatrixOrthoLH of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_buildProjectionMatrixOrthoLH00
static int tolua_MyLuaBind_core_matrix4_buildProjectionMatrixOrthoLH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  float width = ((float)  tolua_tonumber(tolua_S,2,0));
  float height = ((float)  tolua_tonumber(tolua_S,3,0));
  float zn = ((float)  tolua_tonumber(tolua_S,4,0));
  float zf = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildProjectionMatrixOrthoLH'",NULL);
#endif
 {
  self->buildProjectionMatrixOrthoLH(width,height,zn,zf);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildProjectionMatrixOrthoLH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildProjectionMatrixOrthoRH of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_buildProjectionMatrixOrthoRH00
static int tolua_MyLuaBind_core_matrix4_buildProjectionMatrixOrthoRH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  float width = ((float)  tolua_tonumber(tolua_S,2,0));
  float height = ((float)  tolua_tonumber(tolua_S,3,0));
  float zn = ((float)  tolua_tonumber(tolua_S,4,0));
  float zf = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildProjectionMatrixOrthoRH'",NULL);
#endif
 {
  self->buildProjectionMatrixOrthoRH(width,height,zn,zf);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildProjectionMatrixOrthoRH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildViewMatrixLH of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_buildViewMatrixLH00
static int tolua_MyLuaBind_core_matrix4_buildViewMatrixLH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* tgt_pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
  const core::vector3df* up_vec = ((const core::vector3df*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildViewMatrixLH'",NULL);
#endif
 {
  self->buildViewMatrixLH(*pos,*tgt_pos,*up_vec);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildViewMatrixLH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildViewMatrixRH of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_buildViewMatrixRH00
static int tolua_MyLuaBind_core_matrix4_buildViewMatrixRH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* tgt_pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
  const core::vector3df* up_vec = ((const core::vector3df*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildViewMatrixRH'",NULL);
#endif
 {
  self->buildViewMatrixRH(*pos,*tgt_pos,*up_vec);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildViewMatrixRH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildShadowMatrix of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_buildShadowMatrix00
static int tolua_MyLuaBind_core_matrix4_buildShadowMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"core::plane3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df light = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  core::plane3df plane = *((core::plane3df*)  tolua_tousertype(tolua_S,3,0));
  float point = ((float)  tolua_tonumber(tolua_S,4,1.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildShadowMatrix'",NULL);
#endif
 {
  self->buildShadowMatrix(light,plane,point);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildShadowMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: interpolate of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_interpolate00
static int tolua_MyLuaBind_core_matrix4_interpolate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  core::matrix4* b = ((core::matrix4*)  tolua_tousertype(tolua_S,2,0));
  float time = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'interpolate'",NULL);
#endif
 {
  core::matrix4 tolua_ret = (core::matrix4)  self->interpolate(*b,time);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::matrix4(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::matrix4");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::matrix4));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::matrix4");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'interpolate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildReflectionMatrix of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_buildReflectionMatrix00
static int tolua_MyLuaBind_core_matrix4_buildReflectionMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::plane3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  const core::plane3df* p = ((const core::plane3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildReflectionMatrix'",NULL);
#endif
 {
  self->buildReflectionMatrix(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildReflectionMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildRotationDegreesMatrix of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_buildRotationDegreesMatrix00
static int tolua_MyLuaBind_core_matrix4_buildRotationDegreesMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  float theta = ((float)  tolua_tonumber(tolua_S,2,0));
  core::vector3df* V = ((core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildRotationDegreesMatrix'",NULL);
#endif
 {
  self->buildRotationDegreesMatrix(theta,*V);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildRotationDegreesMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildRotationRadiansMatrix of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_buildRotationRadiansMatrix00
static int tolua_MyLuaBind_core_matrix4_buildRotationRadiansMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  float theta = ((float)  tolua_tonumber(tolua_S,2,0));
  core::vector3df* V = ((core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildRotationRadiansMatrix'",NULL);
#endif
 {
  self->buildRotationRadiansMatrix(theta,*V);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildRotationRadiansMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: toD3DTextureMatrix of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_toD3DTextureMatrix00
static int tolua_MyLuaBind_core_matrix4_toD3DTextureMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'toD3DTextureMatrix'",NULL);
#endif
 {
  void* tolua_ret = (void*)  self->toD3DTextureMatrix();
 tolua_pushuserdata(tolua_S,(void*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'toD3DTextureMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: toOGLTextureMatrix of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_toOGLTextureMatrix00
static int tolua_MyLuaBind_core_matrix4_toOGLTextureMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'toOGLTextureMatrix'",NULL);
#endif
 {
  void* tolua_ret = (void*)  self->toOGLTextureMatrix();
 tolua_pushuserdata(tolua_S,(void*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'toOGLTextureMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: pointer of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_pointer00
static int tolua_MyLuaBind_core_matrix4_pointer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'pointer'",NULL);
#endif
 {
  const void* tolua_ret = (const void*)  self->pointer();
 tolua_pushuserdata(tolua_S,(void*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'pointer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: pointer of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_pointer01
static int tolua_MyLuaBind_core_matrix4_pointer01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::matrix4* self = (core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'pointer'",NULL);
#endif
 {
  void* tolua_ret = (void*)  self->pointer();
 tolua_pushuserdata(tolua_S,(void*)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_matrix4_pointer00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: determinant of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_determinant00
static int tolua_MyLuaBind_core_matrix4_determinant00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'determinant'",NULL);
#endif
 {
  float tolua_ret = (float)  self->determinant();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'determinant'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTransposed of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_getTransposed00
static int tolua_MyLuaBind_core_matrix4_getTransposed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTransposed'",NULL);
#endif
 {
  core::matrix4 tolua_ret = (core::matrix4)  self->getTransposed();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::matrix4(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::matrix4");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::matrix4));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::matrix4");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTransposed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTransposed of class  core::matrix4 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_matrix4_getTransposed01
static int tolua_MyLuaBind_core_matrix4_getTransposed01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::matrix4",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::matrix4* self = (const core::matrix4*)  tolua_tousertype(tolua_S,1,0);
  core::matrix4* dest = ((core::matrix4*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTransposed'",NULL);
#endif
 {
  self->getTransposed(*dest);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_matrix4_getTransposed00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_new00
static int tolua_MyLuaBind_core_plane3df_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::plane3df* tolua_ret = (core::plane3df*)  new core::plane3df();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::plane3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_new00_local
static int tolua_MyLuaBind_core_plane3df_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::plane3df* tolua_ret = (core::plane3df*)  new core::plane3df();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::plane3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_new01
static int tolua_MyLuaBind_core_plane3df_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* point = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* normal = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
 {
  core::plane3df* tolua_ret = (core::plane3df*)  new core::plane3df(*point,*normal);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::plane3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_new01_local
static int tolua_MyLuaBind_core_plane3df_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* point = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* normal = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
 {
  core::plane3df* tolua_ret = (core::plane3df*)  new core::plane3df(*point,*normal);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::plane3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_new02
static int tolua_MyLuaBind_core_plane3df_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float px = ((float)  tolua_tonumber(tolua_S,2,0));
  float py = ((float)  tolua_tonumber(tolua_S,3,0));
  float pz = ((float)  tolua_tonumber(tolua_S,4,0));
  float nx = ((float)  tolua_tonumber(tolua_S,5,0));
  float ny = ((float)  tolua_tonumber(tolua_S,6,0));
  float nz = ((float)  tolua_tonumber(tolua_S,7,0));
 {
  core::plane3df* tolua_ret = (core::plane3df*)  new core::plane3df(px,py,pz,nx,ny,nz);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::plane3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_new02_local
static int tolua_MyLuaBind_core_plane3df_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float px = ((float)  tolua_tonumber(tolua_S,2,0));
  float py = ((float)  tolua_tonumber(tolua_S,3,0));
  float pz = ((float)  tolua_tonumber(tolua_S,4,0));
  float nx = ((float)  tolua_tonumber(tolua_S,5,0));
  float ny = ((float)  tolua_tonumber(tolua_S,6,0));
  float nz = ((float)  tolua_tonumber(tolua_S,7,0));
 {
  core::plane3df* tolua_ret = (core::plane3df*)  new core::plane3df(px,py,pz,nx,ny,nz);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::plane3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_new03
static int tolua_MyLuaBind_core_plane3df_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::plane3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::plane3df* other = ((const core::plane3df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::plane3df* tolua_ret = (core::plane3df*)  new core::plane3df(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::plane3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_new03_local
static int tolua_MyLuaBind_core_plane3df_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::plane3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::plane3df* other = ((const core::plane3df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::plane3df* tolua_ret = (core::plane3df*)  new core::plane3df(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::plane3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_new04
static int tolua_MyLuaBind_core_plane3df_new04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* p1 = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* p2 = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
  const core::vector3df* p3 = ((const core::vector3df*)  tolua_tousertype(tolua_S,4,0));
 {
  core::plane3df* tolua_ret = (core::plane3df*)  new core::plane3df(*p1,*p2,*p3);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::plane3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_new03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_new04_local
static int tolua_MyLuaBind_core_plane3df_new04_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* p1 = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* p2 = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
  const core::vector3df* p3 = ((const core::vector3df*)  tolua_tousertype(tolua_S,4,0));
 {
  core::plane3df* tolua_ret = (core::plane3df*)  new core::plane3df(*p1,*p2,*p3);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::plane3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_new03_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_delete00
static int tolua_MyLuaBind_core_plane3df_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::plane3df* self = (core::plane3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df__eq00
static int tolua_MyLuaBind_core_plane3df__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::plane3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::plane3df* other = ((const core::plane3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_set00
static int tolua_MyLuaBind_core_plane3df_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::plane3df* self = (core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* point = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* nvector = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*point,*nvector);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_set01
static int tolua_MyLuaBind_core_plane3df_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::plane3df* self = (core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* nvect = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  float d = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*nvect,d);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_set02
static int tolua_MyLuaBind_core_plane3df_set02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::plane3df* self = (core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* p1 = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* p2 = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
  const core::vector3df* p3 = ((const core::vector3df*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p1,*p2,*p3);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_set01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getIntersectionWithLine of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_getIntersectionWithLine00
static int tolua_MyLuaBind_core_plane3df_getIntersectionWithLine00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* linePoint = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* lineVect = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
  core::vector3df* outIntersection = ((core::vector3df*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getIntersectionWithLine'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getIntersectionWithLine(*linePoint,*lineVect,*outIntersection);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getIntersectionWithLine'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getIntersectionWithLine of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_getIntersectionWithLine01
static int tolua_MyLuaBind_core_plane3df_getIntersectionWithLine01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::line3df* line = ((const core::line3df*)  tolua_tousertype(tolua_S,2,0));
  core::vector3df* outIntersection = ((core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getIntersectionWithLine'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getIntersectionWithLine(*line,*outIntersection);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_getIntersectionWithLine00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getIntersectionWithLimitedLine of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_getIntersectionWithLimitedLine00
static int tolua_MyLuaBind_core_plane3df_getIntersectionWithLimitedLine00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* linePoint1 = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* linePoint2 = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
  core::vector3df* outIntersection = ((core::vector3df*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getIntersectionWithLimitedLine'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getIntersectionWithLimitedLine(*linePoint1,*linePoint2,*outIntersection);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getIntersectionWithLimitedLine'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getIntersectionWithLimitedLine of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_getIntersectionWithLimitedLine01
static int tolua_MyLuaBind_core_plane3df_getIntersectionWithLimitedLine01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::line3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::line3df* line = ((const core::line3df*)  tolua_tousertype(tolua_S,2,0));
  core::vector3df* outIntersection = ((core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getIntersectionWithLimitedLine'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getIntersectionWithLimitedLine(*line,*outIntersection);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_plane3df_getIntersectionWithLimitedLine00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProjection of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_getProjection00
static int tolua_MyLuaBind_core_plane3df_getProjection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* vec = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProjection'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getProjection(*vec);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProjection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: classifyPointRelation of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_classifyPointRelation00
static int tolua_MyLuaBind_core_plane3df_classifyPointRelation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* point = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'classifyPointRelation'",NULL);
#endif
 {
  core::E_INTERSECTION_RELATION_3D tolua_ret = (core::E_INTERSECTION_RELATION_3D)  self->classifyPointRelation(*point);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'classifyPointRelation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: classifySphereRelation of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_classifySphereRelation00
static int tolua_MyLuaBind_core_plane3df_classifySphereRelation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* center = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'classifySphereRelation'",NULL);
#endif
 {
  core::E_INTERSECTION_RELATION_3D tolua_ret = (core::E_INTERSECTION_RELATION_3D)  self->classifySphereRelation(*center,radius);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'classifySphereRelation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: recalculateD of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_recalculateD00
static int tolua_MyLuaBind_core_plane3df_recalculateD00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::plane3df* self = (core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* MPoint = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'recalculateD'",NULL);
#endif
 {
  self->recalculateD(*MPoint);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'recalculateD'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMemberPoint of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_getMemberPoint00
static int tolua_MyLuaBind_core_plane3df_getMemberPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMemberPoint'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getMemberPoint();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMemberPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: existsInterSection of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_existsInterSection00
static int tolua_MyLuaBind_core_plane3df_existsInterSection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::plane3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::plane3df* other = ((const core::plane3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'existsInterSection'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->existsInterSection(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'existsInterSection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getIntersectionWithPlane of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_getIntersectionWithPlane00
static int tolua_MyLuaBind_core_plane3df_getIntersectionWithPlane00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::plane3df* other = ((const core::plane3df*)  tolua_tousertype(tolua_S,2,0));
  core::vector3df* outLinePoint = ((core::vector3df*)  tolua_tousertype(tolua_S,3,0));
  core::vector3df* outLineVect = ((core::vector3df*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getIntersectionWithPlane'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getIntersectionWithPlane(*other,*outLinePoint,*outLineVect);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getIntersectionWithPlane'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getIntersectionWithPlanes of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_getIntersectionWithPlanes00
static int tolua_MyLuaBind_core_plane3df_getIntersectionWithPlanes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::plane3df* o1 = ((const core::plane3df*)  tolua_tousertype(tolua_S,2,0));
  const core::plane3df* o2 = ((const core::plane3df*)  tolua_tousertype(tolua_S,3,0));
  core::vector3df* outPoint = ((core::vector3df*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getIntersectionWithPlanes'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getIntersectionWithPlanes(*o1,*o2,*outPoint);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getIntersectionWithPlanes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isFrontFacing of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_isFrontFacing00
static int tolua_MyLuaBind_core_plane3df_isFrontFacing00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* lookDirection = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isFrontFacing'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isFrontFacing(*lookDirection);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isFrontFacing'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDistanceTo of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_plane3df_getDistanceTo00
static int tolua_MyLuaBind_core_plane3df_getDistanceTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::plane3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::plane3df* self = (const core::plane3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* point = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDistanceTo'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getDistanceTo(*point);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDistanceTo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: D of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_get_core__plane3df_D
static int tolua_get_core__plane3df_D(lua_State* tolua_S)
{
  core::plane3df* self = (core::plane3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'D'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->D);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: D of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_set_core__plane3df_D
static int tolua_set_core__plane3df_D(lua_State* tolua_S)
{
  core::plane3df* self = (core::plane3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'D'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->D = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Normal of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_get_core__plane3df_Normal
static int tolua_get_core__plane3df_Normal(lua_State* tolua_S)
{
  core::plane3df* self = (core::plane3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Normal'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Normal,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Normal of class  core::plane3df */
#ifndef TOLUA_DISABLE_tolua_set_core__plane3df_Normal
static int tolua_set_core__plane3df_Normal(lua_State* tolua_S)
{
  core::plane3df* self = (core::plane3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Normal'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Normal = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2di_new00
static int tolua_MyLuaBind_core_position2di_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::position2di* tolua_ret = (core::position2di*)  new core::position2di();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::position2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2di_new00_local
static int tolua_MyLuaBind_core_position2di_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::position2di* tolua_ret = (core::position2di*)  new core::position2di();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::position2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2di_new01
static int tolua_MyLuaBind_core_position2di_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
 {
  core::position2di* tolua_ret = (core::position2di*)  new core::position2di(x,y);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::position2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_position2di_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2di_new01_local
static int tolua_MyLuaBind_core_position2di_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
 {
  core::position2di* tolua_ret = (core::position2di*)  new core::position2di(x,y);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::position2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_position2di_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2di_new02
static int tolua_MyLuaBind_core_position2di_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2di* other = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
 {
  core::position2di* tolua_ret = (core::position2di*)  new core::position2di(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::position2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_position2di_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2di_new02_local
static int tolua_MyLuaBind_core_position2di_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2di* other = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
 {
  core::position2di* tolua_ret = (core::position2di*)  new core::position2di(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::position2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_position2di_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2di_delete00
static int tolua_MyLuaBind_core_position2di_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::position2di* self = (core::position2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2di_set00
static int tolua_MyLuaBind_core_position2di_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::position2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::position2di* self = (core::position2di*)  tolua_tousertype(tolua_S,1,0);
  const int x = ((const int)  tolua_tonumber(tolua_S,2,0));
  const int y = ((const int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(x,y);
 tolua_pushnumber(tolua_S,(lua_Number)x);
 tolua_pushnumber(tolua_S,(lua_Number)y);
 }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_get_core__position2di_X
static int tolua_get_core__position2di_X(lua_State* tolua_S)
{
  core::position2di* self = (core::position2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_set_core__position2di_X
static int tolua_set_core__position2di_X(lua_State* tolua_S)
{
  core::position2di* self = (core::position2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_get_core__position2di_Y
static int tolua_get_core__position2di_Y(lua_State* tolua_S)
{
  core::position2di* self = (core::position2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  core::position2di */
#ifndef TOLUA_DISABLE_tolua_set_core__position2di_Y
static int tolua_set_core__position2di_Y(lua_State* tolua_S)
{
  core::position2di* self = (core::position2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2df_new00
static int tolua_MyLuaBind_core_position2df_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::position2df* tolua_ret = (core::position2df*)  new core::position2df();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::position2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2df_new00_local
static int tolua_MyLuaBind_core_position2df_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::position2df* tolua_ret = (core::position2df*)  new core::position2df();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::position2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2df_new01
static int tolua_MyLuaBind_core_position2df_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
 {
  core::position2df* tolua_ret = (core::position2df*)  new core::position2df(x,y);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::position2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_position2df_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2df_new01_local
static int tolua_MyLuaBind_core_position2df_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
 {
  core::position2df* tolua_ret = (core::position2df*)  new core::position2df(x,y);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::position2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_position2df_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2df_new02
static int tolua_MyLuaBind_core_position2df_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2df* other = ((const core::position2df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::position2df* tolua_ret = (core::position2df*)  new core::position2df(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::position2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_position2df_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2df_new02_local
static int tolua_MyLuaBind_core_position2df_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::position2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2df* other = ((const core::position2df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::position2df* tolua_ret = (core::position2df*)  new core::position2df(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::position2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_position2df_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2df_delete00
static int tolua_MyLuaBind_core_position2df_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::position2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::position2df* self = (core::position2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_position2df_set00
static int tolua_MyLuaBind_core_position2df_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::position2df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::position2df* self = (core::position2df*)  tolua_tousertype(tolua_S,1,0);
  const float x = ((const float)  tolua_tonumber(tolua_S,2,0));
  const float y = ((const float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(x,y);
 tolua_pushnumber(tolua_S,(lua_Number)x);
 tolua_pushnumber(tolua_S,(lua_Number)y);
 }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_get_core__position2df_X
static int tolua_get_core__position2df_X(lua_State* tolua_S)
{
  core::position2df* self = (core::position2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_set_core__position2df_X
static int tolua_set_core__position2df_X(lua_State* tolua_S)
{
  core::position2df* self = (core::position2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_get_core__position2df_Y
static int tolua_get_core__position2df_Y(lua_State* tolua_S)
{
  core::position2df* self = (core::position2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  core::position2df */
#ifndef TOLUA_DISABLE_tolua_set_core__position2df_Y
static int tolua_set_core__position2df_Y(lua_State* tolua_S)
{
  core::position2df* self = (core::position2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_new00
static int tolua_MyLuaBind_core_recti_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::recti* tolua_ret = (core::recti*)  new core::recti();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::recti");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_new00_local
static int tolua_MyLuaBind_core_recti_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::recti* tolua_ret = (core::recti*)  new core::recti();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::recti");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_new01
static int tolua_MyLuaBind_core_recti_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  int x2 = ((int)  tolua_tonumber(tolua_S,4,0));
  int y2 = ((int)  tolua_tonumber(tolua_S,5,0));
 {
  core::recti* tolua_ret = (core::recti*)  new core::recti(x,y,x2,y2);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::recti");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_recti_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_new01_local
static int tolua_MyLuaBind_core_recti_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  int x2 = ((int)  tolua_tonumber(tolua_S,4,0));
  int y2 = ((int)  tolua_tonumber(tolua_S,5,0));
 {
  core::recti* tolua_ret = (core::recti*)  new core::recti(x,y,x2,y2);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::recti");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_recti_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_new02
static int tolua_MyLuaBind_core_recti_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2di* upperLeft = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
  const core::position2di* lowerRight = ((const core::position2di*)  tolua_tousertype(tolua_S,3,0));
 {
  core::recti* tolua_ret = (core::recti*)  new core::recti(*upperLeft,*lowerRight);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::recti");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_recti_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_new02_local
static int tolua_MyLuaBind_core_recti_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2di* upperLeft = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
  const core::position2di* lowerRight = ((const core::position2di*)  tolua_tousertype(tolua_S,3,0));
 {
  core::recti* tolua_ret = (core::recti*)  new core::recti(*upperLeft,*lowerRight);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::recti");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_recti_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_new03
static int tolua_MyLuaBind_core_recti_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::recti* other = ((const core::recti*)  tolua_tousertype(tolua_S,2,0));
 {
  core::recti* tolua_ret = (core::recti*)  new core::recti(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::recti");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_recti_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_new03_local
static int tolua_MyLuaBind_core_recti_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::recti* other = ((const core::recti*)  tolua_tousertype(tolua_S,2,0));
 {
  core::recti* tolua_ret = (core::recti*)  new core::recti(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::recti");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_recti_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_new04
static int tolua_MyLuaBind_core_recti_new04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::dimension2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2di* pos = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
  const core::dimension2di* size = ((const core::dimension2di*)  tolua_tousertype(tolua_S,3,0));
 {
  core::recti* tolua_ret = (core::recti*)  new core::recti(*pos,*size);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::recti");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_recti_new03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_new04_local
static int tolua_MyLuaBind_core_recti_new04_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::dimension2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2di* pos = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
  const core::dimension2di* size = ((const core::dimension2di*)  tolua_tousertype(tolua_S,3,0));
 {
  core::recti* tolua_ret = (core::recti*)  new core::recti(*pos,*size);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::recti");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_recti_new03_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_delete00
static int tolua_MyLuaBind_core_recti_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isPointInside of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_isPointInside00
static int tolua_MyLuaBind_core_recti_isPointInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::recti* self = (const core::recti*)  tolua_tousertype(tolua_S,1,0);
  const core::position2di* pos = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isPointInside'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isPointInside(*pos);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isPointInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isRectCollided of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_isRectCollided00
static int tolua_MyLuaBind_core_recti_isRectCollided00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::recti* self = (const core::recti*)  tolua_tousertype(tolua_S,1,0);
  const core::recti* other = ((const core::recti*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isRectCollided'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isRectCollided(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isRectCollided'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clipAgainst of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_clipAgainst00
static int tolua_MyLuaBind_core_recti_clipAgainst00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
  const core::recti* other = ((const core::recti*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clipAgainst'",NULL);
#endif
 {
  self->clipAgainst(*other);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clipAgainst'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWidth of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_getWidth00
static int tolua_MyLuaBind_core_recti_getWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::recti* self = (const core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWidth'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getWidth();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWidth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHeight of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_getHeight00
static int tolua_MyLuaBind_core_recti_getHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::recti* self = (const core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHeight'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getHeight();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: repair of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_repair00
static int tolua_MyLuaBind_core_recti_repair00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'repair'",NULL);
#endif
 {
  self->repair();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'repair'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isValid of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_isValid00
static int tolua_MyLuaBind_core_recti_isValid00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isValid'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isValid();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isValid'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCenter of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_getCenter00
static int tolua_MyLuaBind_core_recti_getCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::recti",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::recti* self = (const core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCenter'",NULL);
#endif
 {
  core::position2di tolua_ret = (core::position2di)  self->getCenter();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::position2di(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::position2di");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::position2di));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::position2di");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_set00
static int tolua_MyLuaBind_core_recti_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
  const int _left = ((const int)  tolua_tonumber(tolua_S,2,0));
  const int _top = ((const int)  tolua_tonumber(tolua_S,3,0));
  const int _right = ((const int)  tolua_tonumber(tolua_S,4,0));
  const int _bottom = ((const int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(_left,_top,_right,_bottom);
 tolua_pushnumber(tolua_S,(lua_Number)_left);
 tolua_pushnumber(tolua_S,(lua_Number)_top);
 tolua_pushnumber(tolua_S,(lua_Number)_right);
 tolua_pushnumber(tolua_S,(lua_Number)_bottom);
 }
 }
 return 4;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_recti_set01
static int tolua_MyLuaBind_core_recti_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
  const core::position2di* _UpperLeftCorner = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
  const core::position2di* _LowerRightCorner = ((const core::position2di*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*_UpperLeftCorner,*_LowerRightCorner);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_recti_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* get function: UpperLeftCorner of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_get_core__recti_UpperLeftCorner
static int tolua_get_core__recti_UpperLeftCorner(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UpperLeftCorner'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->UpperLeftCorner,"core::position2di");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: UpperLeftCorner of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_set_core__recti_UpperLeftCorner
static int tolua_set_core__recti_UpperLeftCorner(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UpperLeftCorner'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::position2di",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->UpperLeftCorner = *((core::position2di*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: LowerRightCorner of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_get_core__recti_LowerRightCorner
static int tolua_get_core__recti_LowerRightCorner(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LowerRightCorner'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->LowerRightCorner,"core::position2di");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: LowerRightCorner of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_set_core__recti_LowerRightCorner
static int tolua_set_core__recti_LowerRightCorner(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LowerRightCorner'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::position2di",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->LowerRightCorner = *((core::position2di*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Left of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_get_core__recti_Left
static int tolua_get_core__recti_Left(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Left'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Left);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Left of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_set_core__recti_Left
static int tolua_set_core__recti_Left(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Left'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Left = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Top of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_get_core__recti_Top
static int tolua_get_core__recti_Top(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Top'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Top);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Top of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_set_core__recti_Top
static int tolua_set_core__recti_Top(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Top'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Top = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Right of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_get_core__recti_Right
static int tolua_get_core__recti_Right(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Right'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Right);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Right of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_set_core__recti_Right
static int tolua_set_core__recti_Right(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Right'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Right = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Bottom of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_get_core__recti_Bottom
static int tolua_get_core__recti_Bottom(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bottom'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Bottom);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Bottom of class  core::recti */
#ifndef TOLUA_DISABLE_tolua_set_core__recti_Bottom
static int tolua_set_core__recti_Bottom(lua_State* tolua_S)
{
  core::recti* self = (core::recti*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bottom'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Bottom = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_new00
static int tolua_MyLuaBind_core_rectf_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::rectf* tolua_ret = (core::rectf*)  new core::rectf();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::rectf");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_new00_local
static int tolua_MyLuaBind_core_rectf_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::rectf* tolua_ret = (core::rectf*)  new core::rectf();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::rectf");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_new01
static int tolua_MyLuaBind_core_rectf_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  float x2 = ((float)  tolua_tonumber(tolua_S,4,0));
  float y2 = ((float)  tolua_tonumber(tolua_S,5,0));
 {
  core::rectf* tolua_ret = (core::rectf*)  new core::rectf(x,y,x2,y2);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::rectf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_rectf_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_new01_local
static int tolua_MyLuaBind_core_rectf_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  float x2 = ((float)  tolua_tonumber(tolua_S,4,0));
  float y2 = ((float)  tolua_tonumber(tolua_S,5,0));
 {
  core::rectf* tolua_ret = (core::rectf*)  new core::rectf(x,y,x2,y2);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::rectf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_rectf_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_new02
static int tolua_MyLuaBind_core_rectf_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::position2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2df* upperLeft = ((const core::position2df*)  tolua_tousertype(tolua_S,2,0));
  const core::position2df* lowerRight = ((const core::position2df*)  tolua_tousertype(tolua_S,3,0));
 {
  core::rectf* tolua_ret = (core::rectf*)  new core::rectf(*upperLeft,*lowerRight);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::rectf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_rectf_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_new02_local
static int tolua_MyLuaBind_core_rectf_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::position2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2df* upperLeft = ((const core::position2df*)  tolua_tousertype(tolua_S,2,0));
  const core::position2df* lowerRight = ((const core::position2df*)  tolua_tousertype(tolua_S,3,0));
 {
  core::rectf* tolua_ret = (core::rectf*)  new core::rectf(*upperLeft,*lowerRight);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::rectf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_rectf_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_new03
static int tolua_MyLuaBind_core_rectf_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::rectf* other = ((const core::rectf*)  tolua_tousertype(tolua_S,2,0));
 {
  core::rectf* tolua_ret = (core::rectf*)  new core::rectf(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::rectf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_rectf_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_new03_local
static int tolua_MyLuaBind_core_rectf_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::rectf* other = ((const core::rectf*)  tolua_tousertype(tolua_S,2,0));
 {
  core::rectf* tolua_ret = (core::rectf*)  new core::rectf(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::rectf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_rectf_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_new04
static int tolua_MyLuaBind_core_rectf_new04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2df* pos = ((const core::position2df*)  tolua_tousertype(tolua_S,2,0));
  const core::dimension2df* size = ((const core::dimension2df*)  tolua_tousertype(tolua_S,3,0));
 {
  core::rectf* tolua_ret = (core::rectf*)  new core::rectf(*pos,*size);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::rectf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_rectf_new03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_new04_local
static int tolua_MyLuaBind_core_rectf_new04_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::position2df* pos = ((const core::position2df*)  tolua_tousertype(tolua_S,2,0));
  const core::dimension2df* size = ((const core::dimension2df*)  tolua_tousertype(tolua_S,3,0));
 {
  core::rectf* tolua_ret = (core::rectf*)  new core::rectf(*pos,*size);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::rectf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_rectf_new03_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_delete00
static int tolua_MyLuaBind_core_rectf_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isPointInside of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_isPointInside00
static int tolua_MyLuaBind_core_rectf_isPointInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::rectf* self = (const core::rectf*)  tolua_tousertype(tolua_S,1,0);
  const core::position2df* pos = ((const core::position2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isPointInside'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isPointInside(*pos);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isPointInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isRectCollided of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_isRectCollided00
static int tolua_MyLuaBind_core_rectf_isRectCollided00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::rectf* self = (const core::rectf*)  tolua_tousertype(tolua_S,1,0);
  const core::rectf* other = ((const core::rectf*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isRectCollided'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isRectCollided(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isRectCollided'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clipAgainst of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_clipAgainst00
static int tolua_MyLuaBind_core_rectf_clipAgainst00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
  const core::rectf* other = ((const core::rectf*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clipAgainst'",NULL);
#endif
 {
  self->clipAgainst(*other);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clipAgainst'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWidth of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_getWidth00
static int tolua_MyLuaBind_core_rectf_getWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::rectf* self = (const core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWidth'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getWidth();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWidth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHeight of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_getHeight00
static int tolua_MyLuaBind_core_rectf_getHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::rectf* self = (const core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHeight'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getHeight();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: repair of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_repair00
static int tolua_MyLuaBind_core_rectf_repair00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'repair'",NULL);
#endif
 {
  self->repair();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'repair'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isValid of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_isValid00
static int tolua_MyLuaBind_core_rectf_isValid00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isValid'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isValid();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isValid'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCenter of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_getCenter00
static int tolua_MyLuaBind_core_rectf_getCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::rectf* self = (const core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCenter'",NULL);
#endif
 {
  core::position2df tolua_ret = (core::position2df)  self->getCenter();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::position2df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::position2df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::position2df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::position2df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_set00
static int tolua_MyLuaBind_core_rectf_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
  const float _left = ((const float)  tolua_tonumber(tolua_S,2,0));
  const float _top = ((const float)  tolua_tonumber(tolua_S,3,0));
  const float _right = ((const float)  tolua_tonumber(tolua_S,4,0));
  const float _bottom = ((const float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(_left,_top,_right,_bottom);
 tolua_pushnumber(tolua_S,(lua_Number)_left);
 tolua_pushnumber(tolua_S,(lua_Number)_top);
 tolua_pushnumber(tolua_S,(lua_Number)_right);
 tolua_pushnumber(tolua_S,(lua_Number)_bottom);
 }
 }
 return 4;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_rectf_set01
static int tolua_MyLuaBind_core_rectf_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::position2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
  const core::position2df* _UpperLeftCorner = ((const core::position2df*)  tolua_tousertype(tolua_S,2,0));
  const core::position2df* _LowerRightCorner = ((const core::position2df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*_UpperLeftCorner,*_LowerRightCorner);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_rectf_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* get function: UpperLeftCorner of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_get_core__rectf_UpperLeftCorner
static int tolua_get_core__rectf_UpperLeftCorner(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UpperLeftCorner'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->UpperLeftCorner,"core::position2df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: UpperLeftCorner of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_set_core__rectf_UpperLeftCorner
static int tolua_set_core__rectf_UpperLeftCorner(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UpperLeftCorner'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::position2df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->UpperLeftCorner = *((core::position2df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: LowerRightCorner of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_get_core__rectf_LowerRightCorner
static int tolua_get_core__rectf_LowerRightCorner(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LowerRightCorner'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->LowerRightCorner,"core::position2df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: LowerRightCorner of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_set_core__rectf_LowerRightCorner
static int tolua_set_core__rectf_LowerRightCorner(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LowerRightCorner'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::position2df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->LowerRightCorner = *((core::position2df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Left of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_get_core__rectf_Left
static int tolua_get_core__rectf_Left(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Left'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Left);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Left of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_set_core__rectf_Left
static int tolua_set_core__rectf_Left(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Left'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Left = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Top of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_get_core__rectf_Top
static int tolua_get_core__rectf_Top(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Top'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Top);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Top of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_set_core__rectf_Top
static int tolua_set_core__rectf_Top(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Top'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Top = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Right of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_get_core__rectf_Right
static int tolua_get_core__rectf_Right(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Right'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Right);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Right of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_set_core__rectf_Right
static int tolua_set_core__rectf_Right(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Right'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Right = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Bottom of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_get_core__rectf_Bottom
static int tolua_get_core__rectf_Bottom(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bottom'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Bottom);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Bottom of class  core::rectf */
#ifndef TOLUA_DISABLE_tolua_set_core__rectf_Bottom
static int tolua_set_core__rectf_Bottom(lua_State* tolua_S)
{
  core::rectf* self = (core::rectf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bottom'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Bottom = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_new00
static int tolua_MyLuaBind_core_stringc_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::stringc* tolua_ret = (core::stringc*)  new core::stringc();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::stringc");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_new00_local
static int tolua_MyLuaBind_core_stringc_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::stringc* tolua_ret = (core::stringc*)  new core::stringc();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::stringc");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_new01
static int tolua_MyLuaBind_core_stringc_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::stringc* other = ((const core::stringc*)  tolua_tousertype(tolua_S,2,0));
 {
  core::stringc* tolua_ret = (core::stringc*)  new core::stringc(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::stringc");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_new01_local
static int tolua_MyLuaBind_core_stringc_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::stringc* other = ((const core::stringc*)  tolua_tousertype(tolua_S,2,0));
 {
  core::stringc* tolua_ret = (core::stringc*)  new core::stringc(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::stringc");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_new02
static int tolua_MyLuaBind_core_stringc_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const char* c = ((const char*)  tolua_tostring(tolua_S,2,0));
  int lenght = ((int)  tolua_tonumber(tolua_S,3,0));
 {
  core::stringc* tolua_ret = (core::stringc*)  new core::stringc(c,lenght);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::stringc");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_new02_local
static int tolua_MyLuaBind_core_stringc_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const char* c = ((const char*)  tolua_tostring(tolua_S,2,0));
  int lenght = ((int)  tolua_tonumber(tolua_S,3,0));
 {
  core::stringc* tolua_ret = (core::stringc*)  new core::stringc(c,lenght);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::stringc");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_new03
static int tolua_MyLuaBind_core_stringc_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const char* c = ((const char*)  tolua_tostring(tolua_S,2,0));
 {
  core::stringc* tolua_ret = (core::stringc*)  new core::stringc(c);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::stringc");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_new03_local
static int tolua_MyLuaBind_core_stringc_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const char* c = ((const char*)  tolua_tostring(tolua_S,2,0));
 {
  core::stringc* tolua_ret = (core::stringc*)  new core::stringc(c);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::stringc");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_delete00
static int tolua_MyLuaBind_core_stringc_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_set00
static int tolua_MyLuaBind_core_stringc_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const core::stringc* other = ((const core::stringc*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  core::stringc& tolua_ret = (core::stringc&)  self->set(*other);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"core::stringc");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_set01
static int tolua_MyLuaBind_core_stringc_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const char* c = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  core::stringc& tolua_ret = (core::stringc&)  self->set(c);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"core::stringc");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc__add00
static int tolua_MyLuaBind_core_stringc__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const core::stringc* other = ((const core::stringc*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
 {
  core::stringc& tolua_ret = (core::stringc&)  self->operator+(*other);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"core::stringc");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc__add01
static int tolua_MyLuaBind_core_stringc__add01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const char* c = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
 {
  core::stringc& tolua_ret = (core::stringc&)  self->operator+(c);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"core::stringc");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc__add00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator[] of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc__geti00
static int tolua_MyLuaBind_core_stringc__geti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::stringc",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::stringc* self = (const core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const int index = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'",NULL);
#endif
 {
  char tolua_ret = (char)  self->operator[](index);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.geti'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc__eq00
static int tolua_MyLuaBind_core_stringc__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::stringc",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::stringc* self = (const core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const core::stringc* other = ((const core::stringc*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator< of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc__lt00
static int tolua_MyLuaBind_core_stringc__lt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::stringc",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::stringc* self = (const core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const core::stringc* other = ((const core::stringc*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator<'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator<(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.lt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: size of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_size00
static int tolua_MyLuaBind_core_stringc_size00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::stringc* self = (const core::stringc*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'size'",NULL);
#endif
 {
  int tolua_ret = (int)  self->size();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'size'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: c_str of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_c_str00
static int tolua_MyLuaBind_core_stringc_c_str00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::stringc* self = (const core::stringc*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'c_str'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->c_str();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'c_str'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: make_lower of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_make_lower00
static int tolua_MyLuaBind_core_stringc_make_lower00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'make_lower'",NULL);
#endif
 {
  self->make_lower();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'make_lower'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: make_upper of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_make_upper00
static int tolua_MyLuaBind_core_stringc_make_upper00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'make_upper'",NULL);
#endif
 {
  self->make_upper();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'make_upper'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: equals_ignore_case of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_equals_ignore_case00
static int tolua_MyLuaBind_core_stringc_equals_ignore_case00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::stringc",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::stringc* self = (const core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const core::stringc* other = ((const core::stringc*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equals_ignore_case'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->equals_ignore_case(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'equals_ignore_case'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: append of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_append00
static int tolua_MyLuaBind_core_stringc_append00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  char character = ((char)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'append'",NULL);
#endif
 {
  self->append(character);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'append'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: append of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_append01
static int tolua_MyLuaBind_core_stringc_append01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const core::stringc* other = ((const core::stringc*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'append'",NULL);
#endif
 {
  self->append(*other);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc_append00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: append of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_append02
static int tolua_MyLuaBind_core_stringc_append02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::stringc",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const core::stringc* other = ((const core::stringc*)  tolua_tousertype(tolua_S,2,0));
  int length = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'append'",NULL);
#endif
 {
  self->append(*other,length);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc_append01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: append of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_append03
static int tolua_MyLuaBind_core_stringc_append03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const char* other = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'append'",NULL);
#endif
 {
  self->append(other);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc_append02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: append of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_append04
static int tolua_MyLuaBind_core_stringc_append04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  const char* other = ((const char*)  tolua_tostring(tolua_S,2,0));
  int length = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'append'",NULL);
#endif
 {
  self->append(other,length);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_stringc_append03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: reserve of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_reserve00
static int tolua_MyLuaBind_core_stringc_reserve00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  int count = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reserve'",NULL);
#endif
 {
  self->reserve(count);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reserve'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: find_first of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_find_first00
static int tolua_MyLuaBind_core_stringc_find_first00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::stringc",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::stringc* self = (const core::stringc*)  tolua_tousertype(tolua_S,1,0);
  char c = ((char)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'find_first'",NULL);
#endif
 {
  int tolua_ret = (int)  self->find_first(c);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'find_first'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: replace_char of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_replace_char00
static int tolua_MyLuaBind_core_stringc_replace_char00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  char old_char = ((char)  tolua_tonumber(tolua_S,2,0));
  char new_char = ((char)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'replace_char'",NULL);
#endif
 {
  self->replace_char(old_char,new_char);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'replace_char'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: find_next of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_find_next00
static int tolua_MyLuaBind_core_stringc_find_next00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::stringc",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::stringc* self = (const core::stringc*)  tolua_tousertype(tolua_S,1,0);
  char c = ((char)  tolua_tonumber(tolua_S,2,0));
  int startPos = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'find_next'",NULL);
#endif
 {
  int tolua_ret = (int)  self->find_next(c,startPos);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'find_next'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: find_last of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_find_last00
static int tolua_MyLuaBind_core_stringc_find_last00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::stringc",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::stringc* self = (const core::stringc*)  tolua_tousertype(tolua_S,1,0);
  char c = ((char)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'find_last'",NULL);
#endif
 {
  int tolua_ret = (int)  self->find_last(c);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'find_last'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: sub_string of class  core::stringc */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_stringc_sub_string00
static int tolua_MyLuaBind_core_stringc_sub_string00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::stringc",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::stringc* self = (core::stringc*)  tolua_tousertype(tolua_S,1,0);
  int begin = ((int)  tolua_tonumber(tolua_S,2,0));
  int length = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'sub_string'",NULL);
#endif
 {
  core::stringc tolua_ret = (core::stringc)  self->sub_string(begin,length);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::stringc(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::stringc");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::stringc));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::stringc");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'sub_string'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::Utf8ToAnsi */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_Utf8ToAnsi00
static int tolua_MyLuaBind_core_Utf8ToAnsi00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const char* utf8 = ((const char*)  tolua_tostring(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  core::Utf8ToAnsi(utf8);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Utf8ToAnsi'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::AnsiToUtf8 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_AnsiToUtf800
static int tolua_MyLuaBind_core_AnsiToUtf800(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const char* ansi = ((const char*)  tolua_tostring(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  core::AnsiToUtf8(ansi);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AnsiToUtf8'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::CP866ToCP1251 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_CP866ToCP125100
static int tolua_MyLuaBind_core_CP866ToCP125100(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  char* s = ((char*)  tolua_tostring(tolua_S,1,0));
 {
  core::CP866ToCP1251(s);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CP866ToCP1251'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::ToHexStr */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_ToHexStr00
static int tolua_MyLuaBind_core_ToHexStr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  unsigned v = ((unsigned)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  core::ToHexStr(v);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ToHexStr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::ToHexStr64 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_ToHexStr6400
static int tolua_MyLuaBind_core_ToHexStr6400(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"u64",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  u64 v = *((u64*)  tolua_tousertype(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  core::ToHexStr64(v);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ToHexStr64'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::getRelativePathBetweenDirectories */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_getRelativePathBetweenDirectories00
static int tolua_MyLuaBind_core_getRelativePathBetweenDirectories00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const char* from_dir = ((const char*)  tolua_tostring(tolua_S,1,0));
  const char* to_dir = ((const char*)  tolua_tostring(tolua_S,2,0));
 {
  const char* tolua_ret = (const char*)  core::getRelativePathBetweenDirectories(from_dir,to_dir);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRelativePathBetweenDirectories'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::extractFilePath */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_extractFilePath00
static int tolua_MyLuaBind_core_extractFilePath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const char* sourceStr = ((const char*)  tolua_tostring(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  core::extractFilePath(sourceStr);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'extractFilePath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::extractFileName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_extractFileName00
static int tolua_MyLuaBind_core_extractFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const char* sourceStr = ((const char*)  tolua_tostring(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  core::extractFileName(sourceStr);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'extractFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::extractFileName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_extractFileName01
static int tolua_MyLuaBind_core_extractFileName01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const char* sourceStr = ((const char*)  tolua_tostring(tolua_S,1,0));
  bool noExt = ((bool)  tolua_toboolean(tolua_S,2,0));
 {
  const char* tolua_ret = (const char*)  core::extractFileName(sourceStr,noExt);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_extractFileName00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* function: core::extractFileExt */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_extractFileExt00
static int tolua_MyLuaBind_core_extractFileExt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const char* sourceStr = ((const char*)  tolua_tostring(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  core::extractFileExt(sourceStr);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'extractFileExt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_new00
static int tolua_MyLuaBind_core_vector3df_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::vector3df* tolua_ret = (core::vector3df*)  new core::vector3df();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_new00_local
static int tolua_MyLuaBind_core_vector3df_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::vector3df* tolua_ret = (core::vector3df*)  new core::vector3df();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_new01
static int tolua_MyLuaBind_core_vector3df_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float nx = ((float)  tolua_tonumber(tolua_S,2,0));
  float ny = ((float)  tolua_tonumber(tolua_S,3,0));
  float nz = ((float)  tolua_tonumber(tolua_S,4,0));
 {
  core::vector3df* tolua_ret = (core::vector3df*)  new core::vector3df(nx,ny,nz);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::vector3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector3df_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_new01_local
static int tolua_MyLuaBind_core_vector3df_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float nx = ((float)  tolua_tonumber(tolua_S,2,0));
  float ny = ((float)  tolua_tonumber(tolua_S,3,0));
  float nz = ((float)  tolua_tonumber(tolua_S,4,0));
 {
  core::vector3df* tolua_ret = (core::vector3df*)  new core::vector3df(nx,ny,nz);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::vector3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector3df_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_new02
static int tolua_MyLuaBind_core_vector3df_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::vector3df* tolua_ret = (core::vector3df*)  new core::vector3df(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::vector3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector3df_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_new02_local
static int tolua_MyLuaBind_core_vector3df_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::vector3df* tolua_ret = (core::vector3df*)  new core::vector3df(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::vector3df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector3df_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_delete00
static int tolua_MyLuaBind_core_vector3df_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df__add00
static int tolua_MyLuaBind_core_vector3df__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->operator+(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df__sub00
static int tolua_MyLuaBind_core_vector3df__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->operator-(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df__mul00
static int tolua_MyLuaBind_core_vector3df__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->operator*(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df__mul01
static int tolua_MyLuaBind_core_vector3df__mul01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const float v = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->operator*(v);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector3df__mul00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df__div00
static int tolua_MyLuaBind_core_vector3df__div00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->operator/(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.div'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df__div01
static int tolua_MyLuaBind_core_vector3df__div01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const float v = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->operator/(v);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector3df__div00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df__eq00
static int tolua_MyLuaBind_core_vector3df__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_set00
static int tolua_MyLuaBind_core_vector3df_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  float nx = ((float)  tolua_tonumber(tolua_S,2,0));
  float ny = ((float)  tolua_tonumber(tolua_S,3,0));
  float nz = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(nx,ny,nz);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_set01
static int tolua_MyLuaBind_core_vector3df_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* p = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_vector3df_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLength of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_getLength00
static int tolua_MyLuaBind_core_vector3df_getLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLength'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getLength();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLengthSQ of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_getLengthSQ00
static int tolua_MyLuaBind_core_vector3df_getLengthSQ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLengthSQ'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getLengthSQ();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLengthSQ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDotProduct of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_getDotProduct00
static int tolua_MyLuaBind_core_vector3df_getDotProduct00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDotProduct'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getDotProduct(*other);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDotProduct'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDistanceFrom of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_getDistanceFrom00
static int tolua_MyLuaBind_core_vector3df_getDistanceFrom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDistanceFrom'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getDistanceFrom(*other);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDistanceFrom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDistanceFromSQ of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_getDistanceFromSQ00
static int tolua_MyLuaBind_core_vector3df_getDistanceFromSQ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDistanceFromSQ'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getDistanceFromSQ(*other);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDistanceFromSQ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCrossProduct of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_getCrossProduct00
static int tolua_MyLuaBind_core_vector3df_getCrossProduct00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* p = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCrossProduct'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getCrossProduct(*p);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCrossProduct'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isBetweenPoints of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_isBetweenPoints00
static int tolua_MyLuaBind_core_vector3df_isBetweenPoints00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* begin = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* end = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isBetweenPoints'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isBetweenPoints(*begin,*end);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isBetweenPoints'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: normalize of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_normalize00
static int tolua_MyLuaBind_core_vector3df_normalize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'normalize'",NULL);
#endif
 {
  core::vector3df& tolua_ret = (core::vector3df&)  self->normalize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'normalize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLength of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_setLength00
static int tolua_MyLuaBind_core_vector3df_setLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  float newlength = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLength'",NULL);
#endif
 {
  self->setLength(newlength);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: invert of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_invert00
static int tolua_MyLuaBind_core_vector3df_invert00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'invert'",NULL);
#endif
 {
  self->invert();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'invert'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXZByDegrees of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_rotateXZByDegrees00
static int tolua_MyLuaBind_core_vector3df_rotateXZByDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  float degrees = ((float)  tolua_tonumber(tolua_S,2,0));
  const core::vector3df* center = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXZByDegrees'",NULL);
#endif
 {
  self->rotateXZByDegrees(degrees,*center);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateXZByDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXYByDegrees of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_rotateXYByDegrees00
static int tolua_MyLuaBind_core_vector3df_rotateXYByDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  float degrees = ((float)  tolua_tonumber(tolua_S,2,0));
  const core::vector3df* center = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXYByDegrees'",NULL);
#endif
 {
  self->rotateXYByDegrees(degrees,*center);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateXYByDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateYZByDegrees of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_rotateYZByDegrees00
static int tolua_MyLuaBind_core_vector3df_rotateYZByDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  float degrees = ((float)  tolua_tonumber(tolua_S,2,0));
  const core::vector3df* center = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateYZByDegrees'",NULL);
#endif
 {
  self->rotateYZByDegrees(degrees,*center);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateYZByDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXZByRadians of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_rotateXZByRadians00
static int tolua_MyLuaBind_core_vector3df_rotateXZByRadians00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  float radians = ((float)  tolua_tonumber(tolua_S,2,0));
  const core::vector3df* center = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXZByRadians'",NULL);
#endif
 {
  self->rotateXZByRadians(radians,*center);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateXZByRadians'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXYByRadians of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_rotateXYByRadians00
static int tolua_MyLuaBind_core_vector3df_rotateXYByRadians00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  float radians = ((float)  tolua_tonumber(tolua_S,2,0));
  const core::vector3df* center = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXYByRadians'",NULL);
#endif
 {
  self->rotateXYByRadians(radians,*center);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateXYByRadians'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateYZByRadians of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_rotateYZByRadians00
static int tolua_MyLuaBind_core_vector3df_rotateYZByRadians00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  float radians = ((float)  tolua_tonumber(tolua_S,2,0));
  const core::vector3df* center = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateYZByRadians'",NULL);
#endif
 {
  self->rotateYZByRadians(radians,*center);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateYZByRadians'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_getInterpolated00
static int tolua_MyLuaBind_core_vector3df_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  float d = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getInterpolated(*other,d);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHorizontalAngle of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_getHorizontalAngle00
static int tolua_MyLuaBind_core_vector3df_getHorizontalAngle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHorizontalAngle'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getHorizontalAngle();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHorizontalAngle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngleDeg of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_getAngleDeg00
static int tolua_MyLuaBind_core_vector3df_getAngleDeg00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngleDeg'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getAngleDeg(*other);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngleDeg'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngleRad of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_getAngleRad00
static int tolua_MyLuaBind_core_vector3df_getAngleRad00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* other = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngleRad'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getAngleRad(*other);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngleRad'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: midPoint of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector3df_midPoint00
static int tolua_MyLuaBind_core_vector3df_midPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector3df* self = (const core::vector3df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* vec = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'midPoint'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->midPoint(*vec);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'midPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_get_core__vector3df_X
static int tolua_get_core__vector3df_X(lua_State* tolua_S)
{
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_set_core__vector3df_X
static int tolua_set_core__vector3df_X(lua_State* tolua_S)
{
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_get_core__vector3df_Y
static int tolua_get_core__vector3df_Y(lua_State* tolua_S)
{
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_set_core__vector3df_Y
static int tolua_set_core__vector3df_Y(lua_State* tolua_S)
{
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Z of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_get_core__vector3df_Z
static int tolua_get_core__vector3df_Z(lua_State* tolua_S)
{
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Z'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Z);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Z of class  core::vector3df */
#ifndef TOLUA_DISABLE_tolua_set_core__vector3df_Z
static int tolua_set_core__vector3df_Z(lua_State* tolua_S)
{
  core::vector3df* self = (core::vector3df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Z'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Z = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di_new00
static int tolua_MyLuaBind_core_vector2di_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::vector2di* tolua_ret = (core::vector2di*)  new core::vector2di();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::vector2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di_new00_local
static int tolua_MyLuaBind_core_vector2di_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::vector2di* tolua_ret = (core::vector2di*)  new core::vector2di();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::vector2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di_new01
static int tolua_MyLuaBind_core_vector2di_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  int nx = ((int)  tolua_tonumber(tolua_S,2,0));
  int ny = ((int)  tolua_tonumber(tolua_S,3,0));
 {
  core::vector2di* tolua_ret = (core::vector2di*)  new core::vector2di(nx,ny);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::vector2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2di_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di_new01_local
static int tolua_MyLuaBind_core_vector2di_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  int nx = ((int)  tolua_tonumber(tolua_S,2,0));
  int ny = ((int)  tolua_tonumber(tolua_S,3,0));
 {
  core::vector2di* tolua_ret = (core::vector2di*)  new core::vector2di(nx,ny);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::vector2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2di_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di_new02
static int tolua_MyLuaBind_core_vector2di_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector2di* other = ((const core::vector2di*)  tolua_tousertype(tolua_S,2,0));
 {
  core::vector2di* tolua_ret = (core::vector2di*)  new core::vector2di(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::vector2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2di_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di_new02_local
static int tolua_MyLuaBind_core_vector2di_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector2di* other = ((const core::vector2di*)  tolua_tousertype(tolua_S,2,0));
 {
  core::vector2di* tolua_ret = (core::vector2di*)  new core::vector2di(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::vector2di");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2di_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di_delete00
static int tolua_MyLuaBind_core_vector2di_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector2di* self = (core::vector2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di__add00
static int tolua_MyLuaBind_core_vector2di__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector2di* self = (const core::vector2di*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2di* other = ((const core::vector2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
 {
  core::vector2di tolua_ret = (core::vector2di)  self->operator+(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2di(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2di));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di__sub00
static int tolua_MyLuaBind_core_vector2di__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector2di* self = (const core::vector2di*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2di* other = ((const core::vector2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
 {
  core::vector2di tolua_ret = (core::vector2di)  self->operator-(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2di(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2di));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di__mul00
static int tolua_MyLuaBind_core_vector2di__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector2di* self = (const core::vector2di*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2di* other = ((const core::vector2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
 {
  core::vector2di tolua_ret = (core::vector2di)  self->operator*(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2di(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2di));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di__mul01
static int tolua_MyLuaBind_core_vector2di__mul01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector2di* self = (const core::vector2di*)  tolua_tousertype(tolua_S,1,0);
  const int v = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
 {
  core::vector2di tolua_ret = (core::vector2di)  self->operator*(v);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2di(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2di));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#endif
 }
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2di__mul00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di__div00
static int tolua_MyLuaBind_core_vector2di__div00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector2di* self = (const core::vector2di*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2di* other = ((const core::vector2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'",NULL);
#endif
 {
  core::vector2di tolua_ret = (core::vector2di)  self->operator/(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2di(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2di));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.div'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di__div01
static int tolua_MyLuaBind_core_vector2di__div01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector2di* self = (const core::vector2di*)  tolua_tousertype(tolua_S,1,0);
  const int v = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'",NULL);
#endif
 {
  core::vector2di tolua_ret = (core::vector2di)  self->operator/(v);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2di(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2di));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2di");
#endif
 }
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2di__div00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di__eq00
static int tolua_MyLuaBind_core_vector2di__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector2di* self = (const core::vector2di*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2di* other = ((const core::vector2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di_set00
static int tolua_MyLuaBind_core_vector2di_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector2di* self = (core::vector2di*)  tolua_tousertype(tolua_S,1,0);
  int nx = ((int)  tolua_tonumber(tolua_S,2,0));
  int ny = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(nx,ny);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di_set01
static int tolua_MyLuaBind_core_vector2di_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector2di",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::vector2di* self = (core::vector2di*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2di* p = ((const core::vector2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2di_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: normalize of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2di_normalize00
static int tolua_MyLuaBind_core_vector2di_normalize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector2di* self = (core::vector2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'normalize'",NULL);
#endif
 {
  core::vector2di& tolua_ret = (core::vector2di&)  self->normalize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"core::vector2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'normalize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_get_core__vector2di_X
static int tolua_get_core__vector2di_X(lua_State* tolua_S)
{
  core::vector2di* self = (core::vector2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_set_core__vector2di_X
static int tolua_set_core__vector2di_X(lua_State* tolua_S)
{
  core::vector2di* self = (core::vector2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_get_core__vector2di_Y
static int tolua_get_core__vector2di_Y(lua_State* tolua_S)
{
  core::vector2di* self = (core::vector2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  core::vector2di */
#ifndef TOLUA_DISABLE_tolua_set_core__vector2di_Y
static int tolua_set_core__vector2di_Y(lua_State* tolua_S)
{
  core::vector2di* self = (core::vector2di*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df_new00
static int tolua_MyLuaBind_core_vector2df_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::vector2df* tolua_ret = (core::vector2df*)  new core::vector2df();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::vector2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df_new00_local
static int tolua_MyLuaBind_core_vector2df_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::vector2df* tolua_ret = (core::vector2df*)  new core::vector2df();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::vector2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df_new01
static int tolua_MyLuaBind_core_vector2df_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float nx = ((float)  tolua_tonumber(tolua_S,2,0));
  float ny = ((float)  tolua_tonumber(tolua_S,3,0));
 {
  core::vector2df* tolua_ret = (core::vector2df*)  new core::vector2df(nx,ny);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::vector2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2df_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df_new01_local
static int tolua_MyLuaBind_core_vector2df_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float nx = ((float)  tolua_tonumber(tolua_S,2,0));
  float ny = ((float)  tolua_tonumber(tolua_S,3,0));
 {
  core::vector2df* tolua_ret = (core::vector2df*)  new core::vector2df(nx,ny);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::vector2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2df_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df_new02
static int tolua_MyLuaBind_core_vector2df_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector2df* other = ((const core::vector2df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::vector2df* tolua_ret = (core::vector2df*)  new core::vector2df(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::vector2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2df_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df_new02_local
static int tolua_MyLuaBind_core_vector2df_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::vector2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector2df* other = ((const core::vector2df*)  tolua_tousertype(tolua_S,2,0));
 {
  core::vector2df* tolua_ret = (core::vector2df*)  new core::vector2df(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::vector2df");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2df_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df_delete00
static int tolua_MyLuaBind_core_vector2df_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector2df* self = (core::vector2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df__add00
static int tolua_MyLuaBind_core_vector2df__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector2df* self = (const core::vector2df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2df* other = ((const core::vector2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
 {
  core::vector2df tolua_ret = (core::vector2df)  self->operator+(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df__sub00
static int tolua_MyLuaBind_core_vector2df__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector2df* self = (const core::vector2df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2df* other = ((const core::vector2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
 {
  core::vector2df tolua_ret = (core::vector2df)  self->operator-(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df__mul00
static int tolua_MyLuaBind_core_vector2df__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector2df* self = (const core::vector2df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2df* other = ((const core::vector2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
 {
  core::vector2df tolua_ret = (core::vector2df)  self->operator*(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df__mul01
static int tolua_MyLuaBind_core_vector2df__mul01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector2df* self = (const core::vector2df*)  tolua_tousertype(tolua_S,1,0);
  const float v = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
 {
  core::vector2df tolua_ret = (core::vector2df)  self->operator*(v);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#endif
 }
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2df__mul00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df__div00
static int tolua_MyLuaBind_core_vector2df__div00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector2df* self = (const core::vector2df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2df* other = ((const core::vector2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'",NULL);
#endif
 {
  core::vector2df tolua_ret = (core::vector2df)  self->operator/(*other);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.div'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df__div01
static int tolua_MyLuaBind_core_vector2df__div01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const core::vector2df* self = (const core::vector2df*)  tolua_tousertype(tolua_S,1,0);
  const float v = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'",NULL);
#endif
 {
  core::vector2df tolua_ret = (core::vector2df)  self->operator/(v);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector2df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector2df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector2df");
#endif
 }
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2df__div00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df__eq00
static int tolua_MyLuaBind_core_vector2df__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::vector2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::vector2df* self = (const core::vector2df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2df* other = ((const core::vector2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df_set00
static int tolua_MyLuaBind_core_vector2df_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector2df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector2df* self = (core::vector2df*)  tolua_tousertype(tolua_S,1,0);
  float nx = ((float)  tolua_tonumber(tolua_S,2,0));
  float ny = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(nx,ny);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df_set01
static int tolua_MyLuaBind_core_vector2df_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::vector2df* self = (core::vector2df*)  tolua_tousertype(tolua_S,1,0);
  const core::vector2df* p = ((const core::vector2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_core_vector2df_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: normalize of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_vector2df_normalize00
static int tolua_MyLuaBind_core_vector2df_normalize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::vector2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::vector2df* self = (core::vector2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'normalize'",NULL);
#endif
 {
  core::vector2df& tolua_ret = (core::vector2df&)  self->normalize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"core::vector2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'normalize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_get_core__vector2df_X
static int tolua_get_core__vector2df_X(lua_State* tolua_S)
{
  core::vector2df* self = (core::vector2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_set_core__vector2df_X
static int tolua_set_core__vector2df_X(lua_State* tolua_S)
{
  core::vector2df* self = (core::vector2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_get_core__vector2df_Y
static int tolua_get_core__vector2df_Y(lua_State* tolua_S)
{
  core::vector2df* self = (core::vector2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  core::vector2df */
#ifndef TOLUA_DISABLE_tolua_set_core__vector2df_Y
static int tolua_set_core__vector2df_Y(lua_State* tolua_S)
{
  core::vector2df* self = (core::vector2df*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: func of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_get_core__wave_func
static int tolua_get_core__wave_func(lua_State* tolua_S)
{
  core::wave* self = (core::wave*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'func'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->func);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: func of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_set_core__wave_func
static int tolua_set_core__wave_func(lua_State* tolua_S)
{
  core::wave* self = (core::wave*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'func'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->func = ((core::E_FUNC_TYPE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: base of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_get_core__wave_base
static int tolua_get_core__wave_base(lua_State* tolua_S)
{
  core::wave* self = (core::wave*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'base'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->base);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: base of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_set_core__wave_base
static int tolua_set_core__wave_base(lua_State* tolua_S)
{
  core::wave* self = (core::wave*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'base'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->base = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: amplitude of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_get_core__wave_amplitude
static int tolua_get_core__wave_amplitude(lua_State* tolua_S)
{
  core::wave* self = (core::wave*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'amplitude'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->amplitude);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: amplitude of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_set_core__wave_amplitude
static int tolua_set_core__wave_amplitude(lua_State* tolua_S)
{
  core::wave* self = (core::wave*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'amplitude'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->amplitude = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: phase of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_get_core__wave_phase
static int tolua_get_core__wave_phase(lua_State* tolua_S)
{
  core::wave* self = (core::wave*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'phase'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->phase);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: phase of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_set_core__wave_phase
static int tolua_set_core__wave_phase(lua_State* tolua_S)
{
  core::wave* self = (core::wave*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'phase'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->phase = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: frequency of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_get_core__wave_frequency
static int tolua_get_core__wave_frequency(lua_State* tolua_S)
{
  core::wave* self = (core::wave*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'frequency'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->frequency);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: frequency of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_set_core__wave_frequency
static int tolua_set_core__wave_frequency(lua_State* tolua_S)
{
  core::wave* self = (core::wave*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'frequency'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->frequency = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_wave_new00
static int tolua_MyLuaBind_core_wave_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::wave",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::wave* tolua_ret = (core::wave*)  new core::wave();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::wave");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_wave_new00_local
static int tolua_MyLuaBind_core_wave_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::wave",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  core::wave* tolua_ret = (core::wave*)  new core::wave();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::wave");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_wave_new01
static int tolua_MyLuaBind_core_wave_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::wave",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::E_FUNC_TYPE type = ((core::E_FUNC_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
 {
  core::wave* tolua_ret = (core::wave*)  new core::wave(type);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::wave");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_wave_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_wave_new01_local
static int tolua_MyLuaBind_core_wave_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::wave",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::E_FUNC_TYPE type = ((core::E_FUNC_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
 {
  core::wave* tolua_ret = (core::wave*)  new core::wave(type);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::wave");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_wave_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_wave_new02
static int tolua_MyLuaBind_core_wave_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::wave",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::E_FUNC_TYPE type = ((core::E_FUNC_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  float base = ((float)  tolua_tonumber(tolua_S,3,0));
  float amplitude = ((float)  tolua_tonumber(tolua_S,4,0));
  float phase = ((float)  tolua_tonumber(tolua_S,5,0));
  float frequency = ((float)  tolua_tonumber(tolua_S,6,0));
 {
  core::wave* tolua_ret = (core::wave*)  new core::wave(type,base,amplitude,phase,frequency);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"core::wave");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_wave_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_wave_new02_local
static int tolua_MyLuaBind_core_wave_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"core::wave",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  core::E_FUNC_TYPE type = ((core::E_FUNC_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  float base = ((float)  tolua_tonumber(tolua_S,3,0));
  float amplitude = ((float)  tolua_tonumber(tolua_S,4,0));
  float phase = ((float)  tolua_tonumber(tolua_S,5,0));
  float frequency = ((float)  tolua_tonumber(tolua_S,6,0));
 {
  core::wave* tolua_ret = (core::wave*)  new core::wave(type,base,amplitude,phase,frequency);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"core::wave");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_core_wave_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator< of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_wave__lt00
static int tolua_MyLuaBind_core_wave__lt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::wave",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::wave",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::wave* self = (const core::wave*)  tolua_tousertype(tolua_S,1,0);
  const core::wave* w = ((const core::wave*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator<'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator<(*w);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.lt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_wave__eq00
static int tolua_MyLuaBind_core_wave__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::wave",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::wave",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::wave* self = (const core::wave*)  tolua_tousertype(tolua_S,1,0);
  const core::wave* w = ((const core::wave*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*w);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_wave_set00
static int tolua_MyLuaBind_core_wave_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"core::wave",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::wave",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  core::wave* self = (core::wave*)  tolua_tousertype(tolua_S,1,0);
  const core::wave* other = ((const core::wave*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  core::wave& tolua_ret = (core::wave&)  self->set(*other);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"core::wave");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: get_value of class  core::wave */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_core_wave_get_value00
static int tolua_MyLuaBind_core_wave_get_value00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const core::wave",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const core::wave* self = (const core::wave*)  tolua_tousertype(tolua_S,1,0);
  unsigned curr_time_ms = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'get_value'",NULL);
#endif
 {
  float tolua_ret = (float)  self->get_value(curr_time_ms);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'get_value'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: game::GetGameActionName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_GetGameActionName00
static int tolua_MyLuaBind_game_GetGameActionName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::E_GAME_ACTION action = ((game::E_GAME_ACTION) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  game::GetGameActionName(action);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetGameActionName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: io::getKeyCodeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_getKeyCodeName00
static int tolua_MyLuaBind_io_getKeyCodeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::E_KEY_CODE kcode = ((io::E_KEY_CODE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  io::getKeyCodeName(kcode);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getKeyCodeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: io::getMouseCodeName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_getMouseCodeName00
static int tolua_MyLuaBind_io_getMouseCodeName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::E_MOUSE_CODE mcode = ((io::E_MOUSE_CODE) (int)  tolua_tonumber(tolua_S,1,0));
 {
  const char* tolua_ret = (const char*)  io::getMouseCodeName(mcode);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMouseCodeName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_getSingleton00
static int tolua_MyLuaBind_io_ICursorControl_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  io::ICursorControl& tolua_ret = (io::ICursorControl&)  io::ICursorControl::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"io::ICursorControl");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVisible of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_setVisible00
static int tolua_MyLuaBind_io_ICursorControl_setVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
  bool visible = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVisible'",NULL);
#endif
 {
  self->setVisible(visible);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isVisible of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_isVisible00
static int tolua_MyLuaBind_io_ICursorControl_isVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isVisible'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isVisible();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRelativePosition of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_setRelativePosition00
static int tolua_MyLuaBind_io_ICursorControl_setRelativePosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
  const core::position2df* pos = ((const core::position2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRelativePosition'",NULL);
#endif
 {
  self->setRelativePosition(*pos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRelativePosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRelativePosition of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_setRelativePosition01
static int tolua_MyLuaBind_io_ICursorControl_setRelativePosition01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRelativePosition'",NULL);
#endif
 {
  self->setRelativePosition(x,y);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_io_ICursorControl_setRelativePosition00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPosition of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_setPosition00
static int tolua_MyLuaBind_io_ICursorControl_setPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
  const core::position2di* pos = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPosition'",NULL);
#endif
 {
  self->setPosition(*pos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPosition of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_setPosition01
static int tolua_MyLuaBind_io_ICursorControl_setPosition01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPosition'",NULL);
#endif
 {
  self->setPosition(x,y);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_io_ICursorControl_setPosition00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPositionOffset of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_setPositionOffset00
static int tolua_MyLuaBind_io_ICursorControl_setPositionOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
  const core::position2di* offset = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPositionOffset'",NULL);
#endif
 {
  self->setPositionOffset(*offset);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPositionOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPosition of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_getPosition00
static int tolua_MyLuaBind_io_ICursorControl_getPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPosition'",NULL);
#endif
 {
  const core::position2di& tolua_ret = (const core::position2di&)  self->getPosition();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::position2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRelativePosition of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_getRelativePosition00
static int tolua_MyLuaBind_io_ICursorControl_getRelativePosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRelativePosition'",NULL);
#endif
 {
  const core::position2df& tolua_ret = (const core::position2df&)  self->getRelativePosition();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::position2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRelativePosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGraphicCursor of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_setGraphicCursor00
static int tolua_MyLuaBind_io_ICursorControl_setGraphicCursor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::dimension2df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::vector2df",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* tex = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
  const core::dimension2df* size = ((const core::dimension2df*)  tolua_tousertype(tolua_S,3,0));
  const core::vector2df* offset = ((const core::vector2df*)  tolua_tousertype(tolua_S,4,0));
  bool centered = ((bool)  tolua_toboolean(tolua_S,5,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGraphicCursor'",NULL);
#endif
 {
  self->setGraphicCursor(tex,*size,*offset,centered);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGraphicCursor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: resetGraphicCursor of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_resetGraphicCursor00
static int tolua_MyLuaBind_io_ICursorControl_resetGraphicCursor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'resetGraphicCursor'",NULL);
#endif
 {
  self->resetGraphicCursor();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'resetGraphicCursor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCursor of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_setCursor00
static int tolua_MyLuaBind_io_ICursorControl_setCursor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCursor'",NULL);
#endif
 {
  self->setCursor(filename);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCursor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCursor of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_setCursor01
static int tolua_MyLuaBind_io_ICursorControl_setCursor01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
  io::E_CURSOR_TYPE type = ((io::E_CURSOR_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCursor'",NULL);
#endif
 {
  self->setCursor(type);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_io_ICursorControl_setCursor00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: refreshCursor of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_refreshCursor00
static int tolua_MyLuaBind_io_ICursorControl_refreshCursor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'refreshCursor'",NULL);
#endif
 {
  self->refreshCursor();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'refreshCursor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRelativeSize of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_setRelativeSize00
static int tolua_MyLuaBind_io_ICursorControl_setRelativeSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
  const core::dimension2df* size = ((const core::dimension2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRelativeSize'",NULL);
#endif
 {
  self->setRelativeSize(*size);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRelativeSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRelativeSize of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_getRelativeSize00
static int tolua_MyLuaBind_io_ICursorControl_getRelativeSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::ICursorControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::ICursorControl* self = (const io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRelativeSize'",NULL);
#endif
 {
  const core::dimension2df& tolua_ret = (const core::dimension2df&)  self->getRelativeSize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::dimension2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRelativeSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSize of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_getSize00
static int tolua_MyLuaBind_io_ICursorControl_getSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::ICursorControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::ICursorControl* self = (const io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSize'",NULL);
#endif
 {
  const core::dimension2di& tolua_ret = (const core::dimension2di&)  self->getSize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::dimension2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPositionOffset of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_getPositionOffset00
static int tolua_MyLuaBind_io_ICursorControl_getPositionOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::ICursorControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::ICursorControl* self = (const io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPositionOffset'",NULL);
#endif
 {
  const core::position2di& tolua_ret = (const core::position2di&)  self->getPositionOffset();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::position2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPositionOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerForRendering of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_registerForRendering00
static int tolua_MyLuaBind_io_ICursorControl_registerForRendering00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerForRendering'",NULL);
#endif
 {
  self->registerForRendering();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerForRendering'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSensitivity of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_setSensitivity00
static int tolua_MyLuaBind_io_ICursorControl_setSensitivity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
  float sens = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSensitivity'",NULL);
#endif
 {
  self->setSensitivity(sens);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSensitivity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSensitivity of class  io::ICursorControl */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ICursorControl_getSensitivity00
static int tolua_MyLuaBind_io_ICursorControl_getSensitivity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ICursorControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ICursorControl* self = (io::ICursorControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSensitivity'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getSensitivity();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSensitivity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  io::IFileSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileSystem_getSingleton00
static int tolua_MyLuaBind_io_IFileSystem_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"io::IFileSystem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  io::IFileSystem& tolua_ret = (io::IFileSystem&)  io::IFileSystem::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"io::IFileSystem");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addZipFileArchive of class  io::IFileSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileSystem_addZipFileArchive00
static int tolua_MyLuaBind_io_IFileSystem_addZipFileArchive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IFileSystem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IFileSystem* self = (io::IFileSystem*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
  bool ignoreCase = ((bool)  tolua_toboolean(tolua_S,3,true));
  bool ignorePaths = ((bool)  tolua_toboolean(tolua_S,4,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addZipFileArchive'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->addZipFileArchive(filename,ignoreCase,ignorePaths);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addZipFileArchive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWorkingDirectory of class  io::IFileSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileSystem_getWorkingDirectory00
static int tolua_MyLuaBind_io_IFileSystem_getWorkingDirectory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IFileSystem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IFileSystem* self = (io::IFileSystem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWorkingDirectory'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getWorkingDirectory();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWorkingDirectory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: changeWorkingDirectoryTo of class  io::IFileSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileSystem_changeWorkingDirectoryTo00
static int tolua_MyLuaBind_io_IFileSystem_changeWorkingDirectoryTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IFileSystem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IFileSystem* self = (io::IFileSystem*)  tolua_tousertype(tolua_S,1,0);
  const char* newDirectory = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'changeWorkingDirectoryTo'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->changeWorkingDirectoryTo(newDirectory);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'changeWorkingDirectoryTo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileList of class  io::IFileSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileSystem_getFileList00
static int tolua_MyLuaBind_io_IFileSystem_getFileList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IFileSystem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IFileSystem* self = (io::IFileSystem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileList'",NULL);
#endif
 {
  const io::IFileList* tolua_ret = (const io::IFileList*)  self->getFileList();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"const io::IFileList");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: existFile of class  io::IFileSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileSystem_existFile00
static int tolua_MyLuaBind_io_IFileSystem_existFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IFileSystem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IFileSystem* self = (io::IFileSystem*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'existFile'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->existFile(filename);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'existFile'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: existFileInZip of class  io::IFileSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileSystem_existFileInZip00
static int tolua_MyLuaBind_io_IFileSystem_existFileInZip00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IFileSystem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IFileSystem* self = (io::IFileSystem*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'existFileInZip'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->existFileInZip(filename);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'existFileInZip'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: existFileOnDisk of class  io::IFileSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileSystem_existFileOnDisk00
static int tolua_MyLuaBind_io_IFileSystem_existFileOnDisk00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IFileSystem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IFileSystem* self = (io::IFileSystem*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'existFileOnDisk'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->existFileOnDisk(filename);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'existFileOnDisk'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: existDir of class  io::IFileSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileSystem_existDir00
static int tolua_MyLuaBind_io_IFileSystem_existDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IFileSystem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IFileSystem* self = (io::IFileSystem*)  tolua_tousertype(tolua_S,1,0);
  const char* dirname = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'existDir'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->existDir(dirname);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'existDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeDir of class  io::IFileSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileSystem_makeDir00
static int tolua_MyLuaBind_io_IFileSystem_makeDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IFileSystem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IFileSystem* self = (io::IFileSystem*)  tolua_tousertype(tolua_S,1,0);
  const char* dirname = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeDir'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->makeDir(dirname);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'makeDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: optimizeDirectoryString of class  io::IFileSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileSystem_optimizeDirectoryString00
static int tolua_MyLuaBind_io_IFileSystem_optimizeDirectoryString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IFileSystem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IFileSystem* self = (io::IFileSystem*)  tolua_tousertype(tolua_S,1,0);
  const char* dir_to_optimize = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'optimizeDirectoryString'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->optimizeDirectoryString(dir_to_optimize);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'optimizeDirectoryString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileCount of class  io::IFileList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileList_getFileCount00
static int tolua_MyLuaBind_io_IFileList_getFileCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::IFileList",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::IFileList* self = (const io::IFileList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getFileCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileExt of class  io::IFileList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileList_getFileExt00
static int tolua_MyLuaBind_io_IFileList_getFileExt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::IFileList",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::IFileList* self = (const io::IFileList*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileExt'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getFileExt(index);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileExt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileName of class  io::IFileList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileList_getFileName00
static int tolua_MyLuaBind_io_IFileList_getFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::IFileList",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::IFileList* self = (const io::IFileList*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getFileName(index);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFullFileName of class  io::IFileList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileList_getFullFileName00
static int tolua_MyLuaBind_io_IFileList_getFullFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::IFileList",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::IFileList* self = (const io::IFileList*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFullFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getFullFileName(index);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFullFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isDirectory of class  io::IFileList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileList_isDirectory00
static int tolua_MyLuaBind_io_IFileList_isDirectory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::IFileList",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::IFileList* self = (const io::IFileList*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isDirectory'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isDirectory(index);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isDirectory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileSizeInBytes of class  io::IFileList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileList_getFileSizeInBytes00
static int tolua_MyLuaBind_io_IFileList_getFileSizeInBytes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::IFileList",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::IFileList* self = (const io::IFileList*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileSizeInBytes'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getFileSizeInBytes(index);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileSizeInBytes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWorkingDirectory of class  io::IFileList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileList_getWorkingDirectory00
static int tolua_MyLuaBind_io_IFileList_getWorkingDirectory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::IFileList",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::IFileList* self = (const io::IFileList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWorkingDirectory'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getWorkingDirectory();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWorkingDirectory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isNeedToUpdate of class  io::IFileList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileList_isNeedToUpdate00
static int tolua_MyLuaBind_io_IFileList_isNeedToUpdate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::IFileList",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::IFileList* self = (const io::IFileList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isNeedToUpdate'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isNeedToUpdate();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isNeedToUpdate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: update of class  io::IFileList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IFileList_update00
static int tolua_MyLuaBind_io_IFileList_update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::IFileList",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::IFileList* self = (const io::IFileList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'update'",NULL);
#endif
 {
  self->update();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_getSingleton00
static int tolua_MyLuaBind_io_IInputDispatcher_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  io::IInputDispatcher& tolua_ret = (io::IInputDispatcher&)  io::IInputDispatcher::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"io::IInputDispatcher");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getKeyInputFilterFlag of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_getKeyInputFilterFlag00
static int tolua_MyLuaBind_io_IInputDispatcher_getKeyInputFilterFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IInputDispatcher* self = (io::IInputDispatcher*)  tolua_tousertype(tolua_S,1,0);
  io::E_KEY_INPUT_EVENT flag = ((io::E_KEY_INPUT_EVENT) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getKeyInputFilterFlag'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getKeyInputFilterFlag(flag);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getKeyInputFilterFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setKeyInputFilterFlag of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_setKeyInputFilterFlag00
static int tolua_MyLuaBind_io_IInputDispatcher_setKeyInputFilterFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IInputDispatcher* self = (io::IInputDispatcher*)  tolua_tousertype(tolua_S,1,0);
  io::E_KEY_INPUT_EVENT flag = ((io::E_KEY_INPUT_EVENT) (int)  tolua_tonumber(tolua_S,2,0));
  bool value = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setKeyInputFilterFlag'",NULL);
#endif
 {
  self->setKeyInputFilterFlag(flag,value);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setKeyInputFilterFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMouseInputFilterFlag of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_getMouseInputFilterFlag00
static int tolua_MyLuaBind_io_IInputDispatcher_getMouseInputFilterFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IInputDispatcher* self = (io::IInputDispatcher*)  tolua_tousertype(tolua_S,1,0);
  io::E_MOUSE_INPUT_EVENT flag = ((io::E_MOUSE_INPUT_EVENT) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMouseInputFilterFlag'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getMouseInputFilterFlag(flag);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMouseInputFilterFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMouseInputFilterFlag of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_setMouseInputFilterFlag00
static int tolua_MyLuaBind_io_IInputDispatcher_setMouseInputFilterFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IInputDispatcher* self = (io::IInputDispatcher*)  tolua_tousertype(tolua_S,1,0);
  io::E_MOUSE_INPUT_EVENT flag = ((io::E_MOUSE_INPUT_EVENT) (int)  tolua_tonumber(tolua_S,2,0));
  bool value = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMouseInputFilterFlag'",NULL);
#endif
 {
  self->setMouseInputFilterFlag(flag,value);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMouseInputFilterFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: mapKey of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_mapKey00
static int tolua_MyLuaBind_io_IInputDispatcher_mapKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IInputDispatcher* self = (io::IInputDispatcher*)  tolua_tousertype(tolua_S,1,0);
  io::E_KEY_CODE key = ((io::E_KEY_CODE) (int)  tolua_tonumber(tolua_S,2,0));
  game::E_GAME_ACTION action = ((game::E_GAME_ACTION) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'mapKey'",NULL);
#endif
 {
  self->mapKey(key,action);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'mapKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: mapMouse of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_mapMouse00
static int tolua_MyLuaBind_io_IInputDispatcher_mapMouse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IInputDispatcher* self = (io::IInputDispatcher*)  tolua_tousertype(tolua_S,1,0);
  io::E_MOUSE_CODE mbutton = ((io::E_MOUSE_CODE) (int)  tolua_tonumber(tolua_S,2,0));
  game::E_GAME_ACTION action = ((game::E_GAME_ACTION) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'mapMouse'",NULL);
#endif
 {
  self->mapMouse(mbutton,action);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'mapMouse'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getActionKey of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_getActionKey00
static int tolua_MyLuaBind_io_IInputDispatcher_getActionKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IInputDispatcher* self = (io::IInputDispatcher*)  tolua_tousertype(tolua_S,1,0);
  game::E_GAME_ACTION action = ((game::E_GAME_ACTION) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getActionKey'",NULL);
#endif
 {
  io::E_KEY_CODE tolua_ret = (io::E_KEY_CODE)  self->getActionKey(action);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getActionKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getActionMouse of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_getActionMouse00
static int tolua_MyLuaBind_io_IInputDispatcher_getActionMouse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IInputDispatcher* self = (io::IInputDispatcher*)  tolua_tousertype(tolua_S,1,0);
  game::E_GAME_ACTION action = ((game::E_GAME_ACTION) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getActionMouse'",NULL);
#endif
 {
  io::E_MOUSE_CODE tolua_ret = (io::E_MOUSE_CODE)  self->getActionMouse(action);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getActionMouse'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getKeyAction of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_getKeyAction00
static int tolua_MyLuaBind_io_IInputDispatcher_getKeyAction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IInputDispatcher* self = (io::IInputDispatcher*)  tolua_tousertype(tolua_S,1,0);
  io::E_KEY_CODE kcode = ((io::E_KEY_CODE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getKeyAction'",NULL);
#endif
 {
  game::E_GAME_ACTION tolua_ret = (game::E_GAME_ACTION)  self->getKeyAction(kcode);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getKeyAction'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMouseAction of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_getMouseAction00
static int tolua_MyLuaBind_io_IInputDispatcher_getMouseAction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IInputDispatcher* self = (io::IInputDispatcher*)  tolua_tousertype(tolua_S,1,0);
  io::E_MOUSE_CODE mcode = ((io::E_MOUSE_CODE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMouseAction'",NULL);
#endif
 {
  game::E_GAME_ACTION tolua_ret = (game::E_GAME_ACTION)  self->getMouseAction(mcode);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMouseAction'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInputPS of class  io::IInputDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_IInputDispatcher_getInputPS00
static int tolua_MyLuaBind_io_IInputDispatcher_getInputPS00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::IInputDispatcher",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::IInputDispatcher* self = (io::IInputDispatcher*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInputPS'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getInputPS();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInputPS'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_getSingleton00
static int tolua_MyLuaBind_io_ILogger_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  io::ILogger& tolua_ret = (io::ILogger&)  io::ILogger::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"io::ILogger");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLogLevel of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_getLogLevel00
static int tolua_MyLuaBind_io_ILogger_getLogLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ILogger* self = (io::ILogger*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLogLevel'",NULL);
#endif
 {
  io::E_LOG_LEVEL tolua_ret = (io::E_LOG_LEVEL)  self->getLogLevel();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLogLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLogLevel of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_setLogLevel00
static int tolua_MyLuaBind_io_ILogger_setLogLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ILogger* self = (io::ILogger*)  tolua_tousertype(tolua_S,1,0);
  io::E_LOG_LEVEL ll = ((io::E_LOG_LEVEL) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLogLevel'",NULL);
#endif
 {
  self->setLogLevel(ll);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLogLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: log of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_log00
static int tolua_MyLuaBind_io_ILogger_log00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ILogger* self = (io::ILogger*)  tolua_tousertype(tolua_S,1,0);
  io::E_LOG_LEVEL ll = ((io::E_LOG_LEVEL) (int)  tolua_tonumber(tolua_S,2,0));
  const char* text = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'log'",NULL);
#endif
 {
  self->log(ll,text);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'log'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: logErr of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_logErr00
static int tolua_MyLuaBind_io_ILogger_logErr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ILogger* self = (io::ILogger*)  tolua_tousertype(tolua_S,1,0);
  const char* text = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'logErr'",NULL);
#endif
 {
  self->logErr(text);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'logErr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: logWarn of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_logWarn00
static int tolua_MyLuaBind_io_ILogger_logWarn00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ILogger* self = (io::ILogger*)  tolua_tousertype(tolua_S,1,0);
  const char* text = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'logWarn'",NULL);
#endif
 {
  self->logWarn(text);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'logWarn'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: logInfo of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_logInfo00
static int tolua_MyLuaBind_io_ILogger_logInfo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ILogger* self = (io::ILogger*)  tolua_tousertype(tolua_S,1,0);
  const char* text = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'logInfo'",NULL);
#endif
 {
  self->logInfo(text);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'logInfo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setIdentityFormatLevel of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_setIdentityFormatLevel00
static int tolua_MyLuaBind_io_ILogger_setIdentityFormatLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ILogger* self = (io::ILogger*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setIdentityFormatLevel'",NULL);
#endif
 {
  self->setIdentityFormatLevel();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setIdentityFormatLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFormatLevel of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_setFormatLevel00
static int tolua_MyLuaBind_io_ILogger_setFormatLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ILogger* self = (io::ILogger*)  tolua_tousertype(tolua_S,1,0);
  unsigned level = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFormatLevel'",NULL);
#endif
 {
  self->setFormatLevel(level);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFormatLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFormatLevel of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_getFormatLevel00
static int tolua_MyLuaBind_io_ILogger_getFormatLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ILogger* self = (io::ILogger*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFormatLevel'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getFormatLevel();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFormatLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: increaseFormatLevel of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_increaseFormatLevel00
static int tolua_MyLuaBind_io_ILogger_increaseFormatLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ILogger* self = (io::ILogger*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'increaseFormatLevel'",NULL);
#endif
 {
  self->increaseFormatLevel();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'increaseFormatLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: decreaseFormatLevel of class  io::ILogger */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_ILogger_decreaseFormatLevel00
static int tolua_MyLuaBind_io_ILogger_decreaseFormatLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::ILogger",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::ILogger* self = (io::ILogger*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'decreaseFormatLevel'",NULL);
#endif
 {
  self->decreaseFormatLevel();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'decreaseFormatLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Key of class  io::SKeyEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SKeyEvent_Key
static int tolua_get_io__SKeyEvent_Key(lua_State* tolua_S)
{
  io::SKeyEvent* self = (io::SKeyEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Key'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Key);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Key of class  io::SKeyEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SKeyEvent_Key
static int tolua_set_io__SKeyEvent_Key(lua_State* tolua_S)
{
  io::SKeyEvent* self = (io::SKeyEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Key'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Key = ((io::E_KEY_CODE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Shift of class  io::SKeyEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SKeyEvent_Shift
static int tolua_get_io__SKeyEvent_Shift(lua_State* tolua_S)
{
  io::SKeyEvent* self = (io::SKeyEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Shift'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->Shift);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Shift of class  io::SKeyEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SKeyEvent_Shift
static int tolua_set_io__SKeyEvent_Shift(lua_State* tolua_S)
{
  io::SKeyEvent* self = (io::SKeyEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Shift'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Shift = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Control of class  io::SKeyEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SKeyEvent_Control
static int tolua_get_io__SKeyEvent_Control(lua_State* tolua_S)
{
  io::SKeyEvent* self = (io::SKeyEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Control'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->Control);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Control of class  io::SKeyEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SKeyEvent_Control
static int tolua_set_io__SKeyEvent_Control(lua_State* tolua_S)
{
  io::SKeyEvent* self = (io::SKeyEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Control'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Control = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Event of class  io::SKeyEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SKeyEvent_Event
static int tolua_get_io__SKeyEvent_Event(lua_State* tolua_S)
{
  io::SKeyEvent* self = (io::SKeyEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Event'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Event);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Event of class  io::SKeyEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SKeyEvent_Event
static int tolua_set_io__SKeyEvent_Event(lua_State* tolua_S)
{
  io::SKeyEvent* self = (io::SKeyEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Event'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Event = ((io::E_KEY_INPUT_EVENT) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SMouseEvent_X
static int tolua_get_io__SMouseEvent_X(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SMouseEvent_X
static int tolua_set_io__SMouseEvent_X(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SMouseEvent_Y
static int tolua_get_io__SMouseEvent_Y(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SMouseEvent_Y
static int tolua_set_io__SMouseEvent_Y(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DeltaX of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SMouseEvent_DeltaX
static int tolua_get_io__SMouseEvent_DeltaX(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DeltaX'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->DeltaX);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: DeltaX of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SMouseEvent_DeltaX
static int tolua_set_io__SMouseEvent_DeltaX(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DeltaX'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DeltaX = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DeltaY of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SMouseEvent_DeltaY
static int tolua_get_io__SMouseEvent_DeltaY(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DeltaY'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->DeltaY);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: DeltaY of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SMouseEvent_DeltaY
static int tolua_set_io__SMouseEvent_DeltaY(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DeltaY'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DeltaY = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Shift of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SMouseEvent_Shift
static int tolua_get_io__SMouseEvent_Shift(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Shift'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->Shift);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Shift of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SMouseEvent_Shift
static int tolua_set_io__SMouseEvent_Shift(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Shift'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Shift = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Control of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SMouseEvent_Control
static int tolua_get_io__SMouseEvent_Control(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Control'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->Control);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Control of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SMouseEvent_Control
static int tolua_set_io__SMouseEvent_Control(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Control'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Control = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Wheel of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SMouseEvent_Wheel
static int tolua_get_io__SMouseEvent_Wheel(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Wheel'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Wheel);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Wheel of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SMouseEvent_Wheel
static int tolua_set_io__SMouseEvent_Wheel(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Wheel'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Wheel = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Event of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SMouseEvent_Event
static int tolua_get_io__SMouseEvent_Event(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Event'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Event);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Event of class  io::SMouseEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SMouseEvent_Event
static int tolua_set_io__SMouseEvent_Event(lua_State* tolua_S)
{
  io::SMouseEvent* self = (io::SMouseEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Event'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Event = ((io::E_MOUSE_INPUT_EVENT) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  io::SPaintEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SPaintEvent_X
static int tolua_get_io__SPaintEvent_X(lua_State* tolua_S)
{
  io::SPaintEvent* self = (io::SPaintEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  io::SPaintEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SPaintEvent_X
static int tolua_set_io__SPaintEvent_X(lua_State* tolua_S)
{
  io::SPaintEvent* self = (io::SPaintEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  io::SPaintEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SPaintEvent_Y
static int tolua_get_io__SPaintEvent_Y(lua_State* tolua_S)
{
  io::SPaintEvent* self = (io::SPaintEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  io::SPaintEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SPaintEvent_Y
static int tolua_set_io__SPaintEvent_Y(lua_State* tolua_S)
{
  io::SPaintEvent* self = (io::SPaintEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Width of class  io::SPaintEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SPaintEvent_Width
static int tolua_get_io__SPaintEvent_Width(lua_State* tolua_S)
{
  io::SPaintEvent* self = (io::SPaintEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Width of class  io::SPaintEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SPaintEvent_Width
static int tolua_set_io__SPaintEvent_Width(lua_State* tolua_S)
{
  io::SPaintEvent* self = (io::SPaintEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Width = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Height of class  io::SPaintEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SPaintEvent_Height
static int tolua_get_io__SPaintEvent_Height(lua_State* tolua_S)
{
  io::SPaintEvent* self = (io::SPaintEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Height of class  io::SPaintEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SPaintEvent_Height
static int tolua_set_io__SPaintEvent_Height(lua_State* tolua_S)
{
  io::SPaintEvent* self = (io::SPaintEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Height = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Text of class  io::SLogEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SLogEvent_Text
static int tolua_get_io__SLogEvent_Text(lua_State* tolua_S)
{
  io::SLogEvent* self = (io::SLogEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Text'",NULL);
#endif
 tolua_pushstring(tolua_S,(const char*)self->Text);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Level of class  io::SLogEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SLogEvent_Level
static int tolua_get_io__SLogEvent_Level(lua_State* tolua_S)
{
  io::SLogEvent* self = (io::SLogEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Level'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Level);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Level of class  io::SLogEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SLogEvent_Level
static int tolua_set_io__SLogEvent_Level(lua_State* tolua_S)
{
  io::SLogEvent* self = (io::SLogEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Level'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Level = ((io::E_LOG_LEVEL) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: EventType of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SEvent_EventType
static int tolua_get_io__SEvent_EventType(lua_State* tolua_S)
{
  io::SEvent* self = (io::SEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'EventType'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->EventType);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: EventType of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SEvent_EventType
static int tolua_set_io__SEvent_EventType(lua_State* tolua_S)
{
  io::SEvent* self = (io::SEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'EventType'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->EventType = ((io::EEVENT_TYPE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_SEvent_new00
static int tolua_MyLuaBind_io_SEvent_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"io::SEvent",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  io::SEvent* tolua_ret = (io::SEvent*)  new io::SEvent();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"io::SEvent");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_SEvent_new00_local
static int tolua_MyLuaBind_io_SEvent_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"io::SEvent",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  io::SEvent* tolua_ret = (io::SEvent*)  new io::SEvent();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"io::SEvent");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_io_SEvent_delete00
static int tolua_MyLuaBind_io_SEvent_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"io::SEvent",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  io::SEvent* self = (io::SEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: KeyInput of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SEvent_KeyInput
static int tolua_get_io__SEvent_KeyInput(lua_State* tolua_S)
{
  io::SEvent* self = (io::SEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'KeyInput'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->KeyInput,"io::SKeyEvent");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: KeyInput of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SEvent_KeyInput
static int tolua_set_io__SEvent_KeyInput(lua_State* tolua_S)
{
  io::SEvent* self = (io::SEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'KeyInput'",NULL);
 if (!tolua_isusertype(tolua_S,2,"io::SKeyEvent",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->KeyInput = *((io::SKeyEvent*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MouseInput of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SEvent_MouseInput
static int tolua_get_io__SEvent_MouseInput(lua_State* tolua_S)
{
  io::SEvent* self = (io::SEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MouseInput'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->MouseInput,"io::SMouseEvent");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MouseInput of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SEvent_MouseInput
static int tolua_set_io__SEvent_MouseInput(lua_State* tolua_S)
{
  io::SEvent* self = (io::SEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MouseInput'",NULL);
 if (!tolua_isusertype(tolua_S,2,"io::SMouseEvent",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MouseInput = *((io::SMouseEvent*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: PaintEvent of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SEvent_PaintEvent
static int tolua_get_io__SEvent_PaintEvent(lua_State* tolua_S)
{
  io::SEvent* self = (io::SEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PaintEvent'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->PaintEvent,"io::SPaintEvent");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: PaintEvent of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SEvent_PaintEvent
static int tolua_set_io__SEvent_PaintEvent(lua_State* tolua_S)
{
  io::SEvent* self = (io::SEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PaintEvent'",NULL);
 if (!tolua_isusertype(tolua_S,2,"io::SPaintEvent",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PaintEvent = *((io::SPaintEvent*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: LogEvent of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_get_io__SEvent_LogEvent
static int tolua_get_io__SEvent_LogEvent(lua_State* tolua_S)
{
  io::SEvent* self = (io::SEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LogEvent'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->LogEvent,"io::SLogEvent");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: LogEvent of class  io::SEvent */
#ifndef TOLUA_DISABLE_tolua_set_io__SEvent_LogEvent
static int tolua_set_io__SEvent_LogEvent(lua_State* tolua_S)
{
  io::SEvent* self = (io::SEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LogEvent'",NULL);
 if (!tolua_isusertype(tolua_S,2,"io::SLogEvent",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->LogEvent = *((io::SLogEvent*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_getSingleton00
static int tolua_MyLuaBind_dev_IDevice_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  dev::IDevice& tolua_ret = (dev::IDevice&)  dev::IDevice::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"dev::IDevice");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isDebug of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_isDebug00
static int tolua_MyLuaBind_dev_IDevice_isDebug00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  bool tolua_ret = (bool)  dev::IDevice::isDebug();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isDebug'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDescriptionString of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_getDescriptionString00
static int tolua_MyLuaBind_dev_IDevice_getDescriptionString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDescriptionString'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getDescriptionString();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDescriptionString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: show of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_show00
static int tolua_MyLuaBind_dev_IDevice_show00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'show'",NULL);
#endif
 {
  self->show();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'show'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: hide of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_hide00
static int tolua_MyLuaBind_dev_IDevice_hide00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'hide'",NULL);
#endif
 {
  self->hide();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'hide'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: close of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_close00
static int tolua_MyLuaBind_dev_IDevice_close00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'close'",NULL);
#endif
 {
  self->close();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'close'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDeviceTime of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_getDeviceTime00
static int tolua_MyLuaBind_dev_IDevice_getDeviceTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDeviceTime'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getDeviceTime();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDeviceTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDeviceSystemTime of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_getDeviceSystemTime00
static int tolua_MyLuaBind_dev_IDevice_getDeviceSystemTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDeviceSystemTime'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getDeviceSystemTime();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDeviceSystemTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDeviceFlagValue of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_getDeviceFlagValue00
static int tolua_MyLuaBind_dev_IDevice_getDeviceFlagValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
  dev::E_DEVICE_CREATION_FLAG flag = ((dev::E_DEVICE_CREATION_FLAG) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDeviceFlagValue'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getDeviceFlagValue(flag);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDeviceFlagValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setWindowCaption of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_setWindowCaption00
static int tolua_MyLuaBind_dev_IDevice_setWindowCaption00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
  const char* text = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setWindowCaption'",NULL);
#endif
 {
  self->setWindowCaption(text);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setWindowCaption'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isWindowActive of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_isWindowActive00
static int tolua_MyLuaBind_dev_IDevice_isWindowActive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isWindowActive'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isWindowActive();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isWindowActive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: run of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_run00
static int tolua_MyLuaBind_dev_IDevice_run00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'run'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->run();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'run'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVersionString of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_getVersionString00
static int tolua_MyLuaBind_dev_IDevice_getVersionString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVersionString'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getVersionString();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVersionString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMonitorBrightness of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_getMonitorBrightness00
static int tolua_MyLuaBind_dev_IDevice_getMonitorBrightness00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMonitorBrightness'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getMonitorBrightness();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMonitorBrightness'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMonitorBrightness of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_setMonitorBrightness00
static int tolua_MyLuaBind_dev_IDevice_setMonitorBrightness00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
  float r_gamma = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMonitorBrightness'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setMonitorBrightness(r_gamma);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMonitorBrightness'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: switchMonitorToFullScreen of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_switchMonitorToFullScreen00
static int tolua_MyLuaBind_dev_IDevice_switchMonitorToFullScreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'switchMonitorToFullScreen'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->switchMonitorToFullScreen();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'switchMonitorToFullScreen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: restoreMonitorSettings of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_restoreMonitorSettings00
static int tolua_MyLuaBind_dev_IDevice_restoreMonitorSettings00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'restoreMonitorSettings'",NULL);
#endif
 {
  self->restoreMonitorSettings();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'restoreMonitorSettings'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setWindowIcon of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_setWindowIcon00
static int tolua_MyLuaBind_dev_IDevice_setWindowIcon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
  const char* iconFileName = ((const char*)  tolua_tostring(tolua_S,2,0));
  unsigned width = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned height = ((unsigned)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setWindowIcon'",NULL);
#endif
 {
  self->setWindowIcon(iconFileName,width,height);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setWindowIcon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinimalRunPeriod of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_setMinimalRunPeriod00
static int tolua_MyLuaBind_dev_IDevice_setMinimalRunPeriod00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
  unsigned msec = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinimalRunPeriod'",NULL);
#endif
 {
  self->setMinimalRunPeriod(msec);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinimalRunPeriod'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinimalRunPeriod of class  dev::IDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IDevice_getMinimalRunPeriod00
static int tolua_MyLuaBind_dev_IDevice_getMinimalRunPeriod00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IDevice",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IDevice* self = (dev::IDevice*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinimalRunPeriod'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getMinimalRunPeriod();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinimalRunPeriod'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  dev::IPluginManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IPluginManager_getSingleton00
static int tolua_MyLuaBind_dev_IPluginManager_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"dev::IPluginManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  dev::IPluginManager& tolua_ret = (dev::IPluginManager&)  dev::IPluginManager::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"dev::IPluginManager");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerPlugin of class  dev::IPluginManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IPluginManager_registerPlugin00
static int tolua_MyLuaBind_dev_IPluginManager_registerPlugin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IPluginManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IPluginManager* self = (dev::IPluginManager*)  tolua_tousertype(tolua_S,1,0);
  char* plugin_name = ((char*)  tolua_tostring(tolua_S,2,0));
  char* module_name = ((char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerPlugin'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->registerPlugin(plugin_name,module_name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerPlugin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: unregisterPlugin of class  dev::IPluginManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IPluginManager_unregisterPlugin00
static int tolua_MyLuaBind_dev_IPluginManager_unregisterPlugin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IPluginManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IPluginManager* self = (dev::IPluginManager*)  tolua_tousertype(tolua_S,1,0);
  char* plugin_name = ((char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'unregisterPlugin'",NULL);
#endif
 {
  self->unregisterPlugin(plugin_name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'unregisterPlugin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startPlugin of class  dev::IPluginManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IPluginManager_startPlugin00
static int tolua_MyLuaBind_dev_IPluginManager_startPlugin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IPluginManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IPluginManager* self = (dev::IPluginManager*)  tolua_tousertype(tolua_S,1,0);
  char* plugin_name = ((char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'startPlugin'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->startPlugin(plugin_name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startPlugin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: shutPlugin of class  dev::IPluginManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IPluginManager_shutPlugin00
static int tolua_MyLuaBind_dev_IPluginManager_shutPlugin00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IPluginManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IPluginManager* self = (dev::IPluginManager*)  tolua_tousertype(tolua_S,1,0);
  char* plugin_name = ((char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'shutPlugin'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->shutPlugin(plugin_name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'shutPlugin'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: shutAllPlugins of class  dev::IPluginManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IPluginManager_shutAllPlugins00
static int tolua_MyLuaBind_dev_IPluginManager_shutAllPlugins00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IPluginManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IPluginManager* self = (dev::IPluginManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'shutAllPlugins'",NULL);
#endif
 {
  self->shutAllPlugins();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'shutAllPlugins'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Id of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_get_dev__SProfileParameter_Id
static int tolua_get_dev__SProfileParameter_Id(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Id'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Id);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Id of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_set_dev__SProfileParameter_Id
static int tolua_set_dev__SProfileParameter_Id(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Id'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Id = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Name of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_get_dev__SProfileParameter_Name
static int tolua_get_dev__SProfileParameter_Name(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Name'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Name,"core::stringc");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Name of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_set_dev__SProfileParameter_Name
static int tolua_set_dev__SProfileParameter_Name(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Name'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::stringc",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Name = *((core::stringc*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: CurrentTimeSec of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_get_dev__SProfileParameter_CurrentTimeSec
static int tolua_get_dev__SProfileParameter_CurrentTimeSec(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CurrentTimeSec'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->CurrentTimeSec);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: CurrentTimeSec of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_set_dev__SProfileParameter_CurrentTimeSec
static int tolua_set_dev__SProfileParameter_CurrentTimeSec(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CurrentTimeSec'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->CurrentTimeSec = ((double)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: FilteredTimeSec of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_get_dev__SProfileParameter_FilteredTimeSec
static int tolua_get_dev__SProfileParameter_FilteredTimeSec(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FilteredTimeSec'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->FilteredTimeSec);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: FilteredTimeSec of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_set_dev__SProfileParameter_FilteredTimeSec
static int tolua_set_dev__SProfileParameter_FilteredTimeSec(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FilteredTimeSec'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->FilteredTimeSec = ((double)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ParentDepth of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_get_dev__SProfileParameter_ParentDepth
static int tolua_get_dev__SProfileParameter_ParentDepth(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentDepth'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->ParentDepth);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: ParentDepth of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_set_dev__SProfileParameter_ParentDepth
static int tolua_set_dev__SProfileParameter_ParentDepth(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentDepth'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentDepth = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Info of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_get_dev__SProfileParameter_Info
static int tolua_get_dev__SProfileParameter_Info(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Info'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Info,"core::stringc");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Info of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_set_dev__SProfileParameter_Info
static int tolua_set_dev__SProfileParameter_Info(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Info'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::stringc",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Info = *((core::stringc*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Pers of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_get_dev__SProfileParameter_Pers
static int tolua_get_dev__SProfileParameter_Pers(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Pers'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Pers);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Pers of class  dev::SProfileParameter */
#ifndef TOLUA_DISABLE_tolua_set_dev__SProfileParameter_Pers
static int tolua_set_dev__SProfileParameter_Pers(lua_State* tolua_S)
{
  dev::SProfileParameter* self = (dev::SProfileParameter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Pers'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Pers = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  dev::IProfiler */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IProfiler_getSingleton00
static int tolua_MyLuaBind_dev_IProfiler_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"dev::IProfiler",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  dev::IProfiler& tolua_ret = (dev::IProfiler&)  dev::IProfiler::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"dev::IProfiler");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isProfiling of class  dev::IProfiler */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IProfiler_isProfiling00
static int tolua_MyLuaBind_dev_IProfiler_isProfiling00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IProfiler",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IProfiler* self = (dev::IProfiler*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isProfiling'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isProfiling();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isProfiling'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: suspendProfiling of class  dev::IProfiler */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IProfiler_suspendProfiling00
static int tolua_MyLuaBind_dev_IProfiler_suspendProfiling00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IProfiler",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IProfiler* self = (dev::IProfiler*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'suspendProfiling'",NULL);
#endif
 {
  self->suspendProfiling();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'suspendProfiling'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: resumeProfiling of class  dev::IProfiler */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IProfiler_resumeProfiling00
static int tolua_MyLuaBind_dev_IProfiler_resumeProfiling00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IProfiler",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IProfiler* self = (dev::IProfiler*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'resumeProfiling'",NULL);
#endif
 {
  self->resumeProfiling();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'resumeProfiling'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startProfiling of class  dev::IProfiler */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IProfiler_startProfiling00
static int tolua_MyLuaBind_dev_IProfiler_startProfiling00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IProfiler",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IProfiler* self = (dev::IProfiler*)  tolua_tousertype(tolua_S,1,0);
  unsigned profileId = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'startProfiling'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->startProfiling(profileId);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startProfiling'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: allocProfileId of class  dev::IProfiler */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IProfiler_allocProfileId00
static int tolua_MyLuaBind_dev_IProfiler_allocProfileId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IProfiler",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IProfiler* self = (dev::IProfiler*)  tolua_tousertype(tolua_S,1,0);
  const char* profileName = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'allocProfileId'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->allocProfileId(profileName);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'allocProfileId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: stopProfiling of class  dev::IProfiler */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IProfiler_stopProfiling00
static int tolua_MyLuaBind_dev_IProfiler_stopProfiling00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IProfiler",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IProfiler* self = (dev::IProfiler*)  tolua_tousertype(tolua_S,1,0);
  unsigned profileId = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const char* info = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'stopProfiling'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->stopProfiling(profileId,info);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'stopProfiling'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFirstProfileParameter of class  dev::IProfiler */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IProfiler_getFirstProfileParameter00
static int tolua_MyLuaBind_dev_IProfiler_getFirstProfileParameter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IProfiler",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IProfiler* self = (dev::IProfiler*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFirstProfileParameter'",NULL);
#endif
 {
  const dev::SProfileParameter* tolua_ret = (const dev::SProfileParameter*)  self->getFirstProfileParameter();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"const dev::SProfileParameter");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFirstProfileParameter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNextProfileParameter of class  dev::IProfiler */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IProfiler_getNextProfileParameter00
static int tolua_MyLuaBind_dev_IProfiler_getNextProfileParameter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IProfiler",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IProfiler* self = (dev::IProfiler*)  tolua_tousertype(tolua_S,1,0);
  unsigned profileId = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNextProfileParameter'",NULL);
#endif
 {
  const dev::SProfileParameter* tolua_ret = (const dev::SProfileParameter*)  self->getNextProfileParameter(profileId);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"const dev::SProfileParameter");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNextProfileParameter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProfileParameter of class  dev::IProfiler */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_IProfiler_getProfileParameter00
static int tolua_MyLuaBind_dev_IProfiler_getProfileParameter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dev::IProfiler",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dev::IProfiler* self = (dev::IProfiler*)  tolua_tousertype(tolua_S,1,0);
  unsigned profileId = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProfileParameter'",NULL);
#endif
 {
  const dev::SProfileParameter* tolua_ret = (const dev::SProfileParameter*)  self->getProfileParameter(profileId);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"const dev::SProfileParameter");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProfileParameter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: dev::createDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_createDevice00
static int tolua_MyLuaBind_dev_createDevice00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::E_DRIVER_TYPE driverType = ((vid::E_DRIVER_TYPE) (int)  tolua_tonumber(tolua_S,1,0));
  unsigned windowWidth = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned windowHeight = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned bits = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  vid::E_TEXTURE_FILTER textureFilter = ((vid::E_TEXTURE_FILTER) (int)  tolua_tonumber(tolua_S,5,0));
  unsigned flags = ((unsigned)  tolua_tonumber(tolua_S,6,0));
 {
  dev::IDevice* tolua_ret = (dev::IDevice*)  dev::createDevice(driverType,windowWidth,windowHeight,bits,textureFilter,flags);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"dev::IDevice");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createDevice'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: dev::destroyDevice */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dev_destroyDevice00
static int tolua_MyLuaBind_dev_destroyDevice00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  bool tolua_ret = (bool)  dev::destroyDevice();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'destroyDevice'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  res::IResourceManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_res_IResourceManager_getSingleton00
static int tolua_MyLuaBind_res_IResourceManager_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"res::IResourceManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  res::IResourceManager& tolua_ret = (res::IResourceManager&)  res::IResourceManager::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"res::IResourceManager");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMediaDirRel of class  res::IResourceManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_res_IResourceManager_setMediaDirRel00
static int tolua_MyLuaBind_res_IResourceManager_setMediaDirRel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"res::IResourceManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  res::IResourceManager* self = (res::IResourceManager*)  tolua_tousertype(tolua_S,1,0);
  res::E_MEDIA_TYPE mt = ((res::E_MEDIA_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  const char* dir = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMediaDirRel'",NULL);
#endif
 {
  self->setMediaDirRel(mt,dir);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMediaDirRel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCommonMediaDirRel of class  res::IResourceManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_res_IResourceManager_setCommonMediaDirRel00
static int tolua_MyLuaBind_res_IResourceManager_setCommonMediaDirRel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"res::IResourceManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  res::IResourceManager* self = (res::IResourceManager*)  tolua_tousertype(tolua_S,1,0);
  res::E_MEDIA_TYPE mt = ((res::E_MEDIA_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  const char* dir = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCommonMediaDirRel'",NULL);
#endif
 {
  self->setCommonMediaDirRel(mt,dir);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCommonMediaDirRel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMediaDirRel of class  res::IResourceManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_res_IResourceManager_getMediaDirRel00
static int tolua_MyLuaBind_res_IResourceManager_getMediaDirRel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"res::IResourceManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  res::IResourceManager* self = (res::IResourceManager*)  tolua_tousertype(tolua_S,1,0);
  res::E_MEDIA_TYPE mt = ((res::E_MEDIA_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMediaDirRel'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getMediaDirRel(mt);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMediaDirRel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCommonMediaDirRel of class  res::IResourceManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_res_IResourceManager_getCommonMediaDirRel00
static int tolua_MyLuaBind_res_IResourceManager_getCommonMediaDirRel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"res::IResourceManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  res::IResourceManager* self = (res::IResourceManager*)  tolua_tousertype(tolua_S,1,0);
  res::E_MEDIA_TYPE mt = ((res::E_MEDIA_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCommonMediaDirRel'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getCommonMediaDirRel(mt);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCommonMediaDirRel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMediaDirFull of class  res::IResourceManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_res_IResourceManager_getMediaDirFull00
static int tolua_MyLuaBind_res_IResourceManager_getMediaDirFull00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"res::IResourceManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  res::IResourceManager* self = (res::IResourceManager*)  tolua_tousertype(tolua_S,1,0);
  res::E_MEDIA_TYPE mt = ((res::E_MEDIA_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMediaDirFull'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getMediaDirFull(mt);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMediaDirFull'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCommonMediaDirFull of class  res::IResourceManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_res_IResourceManager_getCommonMediaDirFull00
static int tolua_MyLuaBind_res_IResourceManager_getCommonMediaDirFull00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"res::IResourceManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  res::IResourceManager* self = (res::IResourceManager*)  tolua_tousertype(tolua_S,1,0);
  res::E_MEDIA_TYPE mt = ((res::E_MEDIA_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCommonMediaDirFull'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getCommonMediaDirFull(mt);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCommonMediaDirFull'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMediaFileNameRel of class  res::IResourceManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_res_IResourceManager_getMediaFileNameRel00
static int tolua_MyLuaBind_res_IResourceManager_getMediaFileNameRel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"res::IResourceManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  res::IResourceManager* self = (res::IResourceManager*)  tolua_tousertype(tolua_S,1,0);
  res::E_MEDIA_TYPE mt = ((res::E_MEDIA_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  const char* full_file_name = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMediaFileNameRel'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getMediaFileNameRel(mt,full_file_name);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMediaFileNameRel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCommonMediaFileNameRel of class  res::IResourceManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_res_IResourceManager_getCommonMediaFileNameRel00
static int tolua_MyLuaBind_res_IResourceManager_getCommonMediaFileNameRel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"res::IResourceManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  res::IResourceManager* self = (res::IResourceManager*)  tolua_tousertype(tolua_S,1,0);
  res::E_MEDIA_TYPE mt = ((res::E_MEDIA_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  const char* full_file_name = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCommonMediaFileNameRel'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getCommonMediaFileNameRel(mt,full_file_name);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCommonMediaFileNameRel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProjectionMatrix of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getProjectionMatrix00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getProjectionMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProjectionMatrix'",NULL);
#endif
 {
  const core::matrix4& tolua_ret = (const core::matrix4&)  self->getProjectionMatrix();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::matrix4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProjectionMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewMatrix of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getViewMatrix00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getViewMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewMatrix'",NULL);
#endif
 {
  const core::matrix4& tolua_ret = (const core::matrix4&)  self->getViewMatrix();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::matrix4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTarget of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setTarget00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTarget'",NULL);
#endif
 {
  self->setTarget(*pos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTarget of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getTarget00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ICameraSceneNode* self = (const scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTarget'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getTarget();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUpVector of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setUpVector00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setUpVector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUpVector'",NULL);
#endif
 {
  self->setUpVector(*pos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUpVector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getUpVector of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getUpVector00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getUpVector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ICameraSceneNode* self = (const scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getUpVector'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getUpVector();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUpVector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setNearValue of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setNearValue00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setNearValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float zn = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setNearValue'",NULL);
#endif
 {
  self->setNearValue(zn);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setNearValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNearValue of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getNearValue00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getNearValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNearValue'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getNearValue();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNearValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFarValue of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setFarValue00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setFarValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float zf = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFarValue'",NULL);
#endif
 {
  self->setFarValue(zf);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFarValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFarValue of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getFarValue00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getFarValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFarValue'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getFarValue();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFarValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAspectRatio of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setAspectRatio00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setAspectRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float aspect = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAspectRatio'",NULL);
#endif
 {
  self->setAspectRatio(aspect);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAspectRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAspectRatio of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getAspectRatio00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getAspectRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAspectRatio'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getAspectRatio();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAspectRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFOV of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setFOV00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setFOV00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float fovy = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFOV'",NULL);
#endif
 {
  self->setFOV(fovy);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFOV'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFOV of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getFOV00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getFOV00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFOV'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getFOV();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFOV'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setViewVolume of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setViewVolume00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setViewVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  core::dimension2df view_volume = *((core::dimension2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setViewVolume'",NULL);
#endif
 {
  self->setViewVolume(view_volume);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setViewVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewVolume of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getViewVolume00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getViewVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewVolume'",NULL);
#endif
 {
  core::dimension2df tolua_ret = (core::dimension2df)  self->getViewVolume();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::dimension2df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::dimension2df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::dimension2df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::dimension2df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewFrustrum of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getViewFrustrum00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getViewFrustrum00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewFrustrum'",NULL);
#endif
 {
  const core::view_frustrum& tolua_ret = (const core::view_frustrum&)  self->getViewFrustrum();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::view_frustrum");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewFrustrum'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setProjectionType of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setProjectionType00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setProjectionType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::E_CAMERA_PROJECTION_TYPE prj = ((scn::E_CAMERA_PROJECTION_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setProjectionType'",NULL);
#endif
 {
  self->setProjectionType(prj);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setProjectionType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProjectionType of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getProjectionType00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getProjectionType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProjectionType'",NULL);
#endif
 {
  scn::E_CAMERA_PROJECTION_TYPE tolua_ret = (scn::E_CAMERA_PROJECTION_TYPE)  self->getProjectionType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProjectionType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getZoomSpeed of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getZoomSpeed00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getZoomSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getZoomSpeed'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getZoomSpeed();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getZoomSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setZoomSpeed of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setZoomSpeed00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setZoomSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float zoom_speed = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setZoomSpeed'",NULL);
#endif
 {
  self->setZoomSpeed(zoom_speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setZoomSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRotationSpeed of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getRotationSpeed00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getRotationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRotationSpeed'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getRotationSpeed();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRotationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotationSpeed of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setRotationSpeed00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setRotationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float rot_speed = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotationSpeed'",NULL);
#endif
 {
  self->setRotationSpeed(rot_speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMoveSpeed of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_getMoveSpeed00
static int tolua_MyLuaBind_scn_ICameraSceneNode_getMoveSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMoveSpeed'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getMoveSpeed();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMoveSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMoveSpeed of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setMoveSpeed00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setMoveSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float move_speed = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMoveSpeed'",NULL);
#endif
 {
  self->setMoveSpeed(move_speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMoveSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSceneEditorCamera of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_setSceneEditorCamera00
static int tolua_MyLuaBind_scn_ICameraSceneNode_setSceneEditorCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool value = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSceneEditorCamera'",NULL);
#endif
 {
  self->setSceneEditorCamera(value);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSceneEditorCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isSceneEditorCamera of class  scn::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICameraSceneNode_isSceneEditorCamera00
static int tolua_MyLuaBind_scn_ICameraSceneNode_isSceneEditorCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICameraSceneNode* self = (scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isSceneEditorCamera'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isSceneEditorCamera();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isSceneEditorCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  scn::IMaterialsManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMaterialsManager_getSingleton00
static int tolua_MyLuaBind_scn_IMaterialsManager_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::IMaterialsManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::IMaterialsManager& tolua_ret = (scn::IMaterialsManager&)  scn::IMaterialsManager::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"scn::IMaterialsManager");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadMaterialsFromDir of class  scn::IMaterialsManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMaterialsManager_loadMaterialsFromDir00
static int tolua_MyLuaBind_scn_IMaterialsManager_loadMaterialsFromDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IMaterialsManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IMaterialsManager* self = (scn::IMaterialsManager*)  tolua_tousertype(tolua_S,1,0);
  const char* dir = ((const char*)  tolua_tostring(tolua_S,2,0));
  bool load_textures = ((bool)  tolua_toboolean(tolua_S,3,0));
  bool reload_if_exists = ((bool)  tolua_toboolean(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadMaterialsFromDir'",NULL);
#endif
 {
  self->loadMaterialsFromDir(dir,load_textures,reload_if_exists);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadMaterialsFromDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaterialsCount of class  scn::IMaterialsManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMaterialsManager_getMaterialsCount00
static int tolua_MyLuaBind_scn_IMaterialsManager_getMaterialsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::IMaterialsManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::IMaterialsManager* self = (const scn::IMaterialsManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaterialsCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getMaterialsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaterialsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findMaterialByName of class  scn::IMaterialsManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMaterialsManager_findMaterialByName00
static int tolua_MyLuaBind_scn_IMaterialsManager_findMaterialByName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::IMaterialsManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::IMaterialsManager* self = (const scn::IMaterialsManager*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findMaterialByName'",NULL);
#endif
 {
  int tolua_ret = (int)  self->findMaterialByName(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findMaterialByName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findMaterialByHash of class  scn::IMaterialsManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMaterialsManager_findMaterialByHash00
static int tolua_MyLuaBind_scn_IMaterialsManager_findMaterialByHash00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::IMaterialsManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"u64",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::IMaterialsManager* self = (const scn::IMaterialsManager*)  tolua_tousertype(tolua_S,1,0);
  u64 hash = *((u64*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findMaterialByHash'",NULL);
#endif
 {
  int tolua_ret = (int)  self->findMaterialByHash(hash);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findMaterialByHash'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addMaterial of class  scn::IMaterialsManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMaterialsManager_addMaterial00
static int tolua_MyLuaBind_scn_IMaterialsManager_addMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IMaterialsManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SMaterial",0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IMaterialsManager* self = (scn::IMaterialsManager*)  tolua_tousertype(tolua_S,1,0);
  const vid::SMaterial* m = ((const vid::SMaterial*)  tolua_tousertype(tolua_S,2,0));
  const char* name = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addMaterial'",NULL);
#endif
 {
  int tolua_ret = (int)  self->addMaterial(*m,name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaterial of class  scn::IMaterialsManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMaterialsManager_getMaterial00
static int tolua_MyLuaBind_scn_IMaterialsManager_getMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::IMaterialsManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::IMaterialsManager* self = (const scn::IMaterialsManager*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaterial'",NULL);
#endif
 {
  const vid::SMaterial& tolua_ret = (const vid::SMaterial&)  self->getMaterial(idx);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const vid::SMaterial");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaterialByName of class  scn::IMaterialsManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMaterialsManager_getMaterialByName00
static int tolua_MyLuaBind_scn_IMaterialsManager_getMaterialByName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::IMaterialsManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::IMaterialsManager* self = (const scn::IMaterialsManager*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaterialByName'",NULL);
#endif
 {
  const vid::SMaterial& tolua_ret = (const vid::SMaterial&)  self->getMaterialByName(name);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const vid::SMaterial");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaterialByName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaterial of class  scn::IMaterialsManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMaterialsManager_setMaterial00
static int tolua_MyLuaBind_scn_IMaterialsManager_setMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IMaterialsManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const vid::SMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IMaterialsManager* self = (scn::IMaterialsManager*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const vid::SMaterial* other = ((const vid::SMaterial*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaterial'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setMaterial(idx,*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaterialByName of class  scn::IMaterialsManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMaterialsManager_setMaterialByName00
static int tolua_MyLuaBind_scn_IMaterialsManager_setMaterialByName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IMaterialsManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const vid::SMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IMaterialsManager* self = (scn::IMaterialsManager*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
  const vid::SMaterial* other = ((const vid::SMaterial*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaterialByName'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setMaterialByName(name,*other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaterialByName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaterialName of class  scn::IMaterialsManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMaterialsManager_getMaterialName00
static int tolua_MyLuaBind_scn_IMaterialsManager_getMaterialName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::IMaterialsManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::IMaterialsManager* self = (const scn::IMaterialsManager*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaterialName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getMaterialName(idx);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaterialName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getSingleton00
static int tolua_MyLuaBind_scn_ISceneManager_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::ISceneManager& tolua_ret = (scn::ISceneManager&)  scn::ISceneManager::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"scn::ISceneManager");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMesh of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getMesh00
static int tolua_MyLuaBind_scn_ISceneManager_getMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMesh'",NULL);
#endif
 {
  scn::IAnimatedMesh* tolua_ret = (scn::IAnimatedMesh*)  self->getMesh(filename);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IAnimatedMesh");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setActiveCamera of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_setActiveCamera00
static int tolua_MyLuaBind_scn_ISceneManager_setActiveCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ICameraSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ICameraSceneNode* camera = ((scn::ICameraSceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setActiveCamera'",NULL);
#endif
 {
  self->setActiveCamera(camera);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setActiveCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getActiveCamera of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getActiveCamera00
static int tolua_MyLuaBind_scn_ISceneManager_getActiveCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getActiveCamera'",NULL);
#endif
 {
  scn::ICameraSceneNode* tolua_ret = (scn::ICameraSceneNode*)  self->getActiveCamera();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ICameraSceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getActiveCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: preRenderScene of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_preRenderScene00
static int tolua_MyLuaBind_scn_ISceneManager_preRenderScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'preRenderScene'",NULL);
#endif
 {
  self->preRenderScene();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'preRenderScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: postRenderScene of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_postRenderScene00
static int tolua_MyLuaBind_scn_ISceneManager_postRenderScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'postRenderScene'",NULL);
#endif
 {
  self->postRenderScene();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'postRenderScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRootSceneNode of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getRootSceneNode00
static int tolua_MyLuaBind_scn_ISceneManager_getRootSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRootSceneNode'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getRootSceneNode();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRootSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSceneNodeFromId of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getSceneNodeFromId00
static int tolua_MyLuaBind_scn_ISceneManager_getSceneNodeFromId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"scn::ISceneNode",1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  int id = ((int)  tolua_tonumber(tolua_S,2,0));
  scn::ISceneNode* start = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSceneNodeFromId'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getSceneNodeFromId(id,start);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneNodeFromId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSceneClusterRootSceneNode of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getSceneClusterRootSceneNode00
static int tolua_MyLuaBind_scn_ISceneManager_getSceneClusterRootSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSceneClusterRootSceneNode'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getSceneClusterRootSceneNode(idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneClusterRootSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCacheSceneClusterIndex of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getCacheSceneClusterIndex00
static int tolua_MyLuaBind_scn_ISceneManager_getCacheSceneClusterIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCacheSceneClusterIndex'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getCacheSceneClusterIndex();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCacheSceneClusterIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentSceneClusterIndex of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getCurrentSceneClusterIndex00
static int tolua_MyLuaBind_scn_ISceneManager_getCurrentSceneClusterIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentSceneClusterIndex'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getCurrentSceneClusterIndex();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentSceneClusterIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentSceneClusterIndex of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_setCurrentSceneClusterIndex00
static int tolua_MyLuaBind_scn_ISceneManager_setCurrentSceneClusterIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentSceneClusterIndex'",NULL);
#endif
 {
  self->setCurrentSceneClusterIndex(idx);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentSceneClusterIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSceneClusterCount of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getSceneClusterCount00
static int tolua_MyLuaBind_scn_ISceneManager_getSceneClusterCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSceneClusterCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getSceneClusterCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneClusterCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSceneClusterEnabled of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_setSceneClusterEnabled00
static int tolua_MyLuaBind_scn_ISceneManager_setSceneClusterEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  bool enabled = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSceneClusterEnabled'",NULL);
#endif
 {
  self->setSceneClusterEnabled(idx,enabled);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSceneClusterEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addToDeletionQueue of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_addToDeletionQueue00
static int tolua_MyLuaBind_scn_ISceneManager_addToDeletionQueue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  int delta_time_ms = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addToDeletionQueue'",NULL);
#endif
 {
  self->addToDeletionQueue(node,delta_time_ms);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addToDeletionQueue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addToVisibilityChangeQueue of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_addToVisibilityChangeQueue00
static int tolua_MyLuaBind_scn_ISceneManager_addToVisibilityChangeQueue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  bool visibility = ((bool)  tolua_toboolean(tolua_S,3,0));
  int delta_time_ms = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addToVisibilityChangeQueue'",NULL);
#endif
 {
  self->addToVisibilityChangeQueue(node,visibility,delta_time_ms);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addToVisibilityChangeQueue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearScene of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_clearScene00
static int tolua_MyLuaBind_scn_ISceneManager_clearScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  unsigned clear_mask = ((unsigned)  tolua_tonumber(tolua_S,2,0xffffffff));
  bool clear_cache = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearScene'",NULL);
#endif
 {
  self->clearScene(clear_mask,clear_cache);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLODDistance of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getLODDistance00
static int tolua_MyLuaBind_scn_ISceneManager_getLODDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::E_LOD_LEVEL lod = ((scn::E_LOD_LEVEL) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLODDistance'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getLODDistance(lod);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLODDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLODDistance of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_setLODDistance00
static int tolua_MyLuaBind_scn_ISceneManager_setLODDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::E_LOD_LEVEL lod = ((scn::E_LOD_LEVEL) (int)  tolua_tonumber(tolua_S,2,0));
  float dist = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLODDistance'",NULL);
#endif
 {
  self->setLODDistance(lod,dist);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLODDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOctTreeCullingEnabled of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_setOctTreeCullingEnabled00
static int tolua_MyLuaBind_scn_ISceneManager_setOctTreeCullingEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOctTreeCullingEnabled'",NULL);
#endif
 {
  self->setOctTreeCullingEnabled(enabled);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOctTreeCullingEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isOctTreeCullingEnabled of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_isOctTreeCullingEnabled00
static int tolua_MyLuaBind_scn_ISceneManager_isOctTreeCullingEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isOctTreeCullingEnabled'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isOctTreeCullingEnabled();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isOctTreeCullingEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOccludersCullingEnabled of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_setOccludersCullingEnabled00
static int tolua_MyLuaBind_scn_ISceneManager_setOccludersCullingEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOccludersCullingEnabled'",NULL);
#endif
 {
  self->setOccludersCullingEnabled(enabled);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOccludersCullingEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isOccludersCullingEnabled of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_isOccludersCullingEnabled00
static int tolua_MyLuaBind_scn_ISceneManager_isOccludersCullingEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isOccludersCullingEnabled'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isOccludersCullingEnabled();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isOccludersCullingEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFirstSceneNodeInTypeList of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getFirstSceneNodeInTypeList00
static int tolua_MyLuaBind_scn_ISceneManager_getFirstSceneNodeInTypeList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::E_SCENE_NODE_TYPE type = ((scn::E_SCENE_NODE_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFirstSceneNodeInTypeList'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getFirstSceneNodeInTypeList(type);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFirstSceneNodeInTypeList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNextSceneNodeInTypeList of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getNextSceneNodeInTypeList00
static int tolua_MyLuaBind_scn_ISceneManager_getNextSceneNodeInTypeList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNextSceneNodeInTypeList'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getNextSceneNodeInTypeList(node);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNextSceneNodeInTypeList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFirstSceneNodeInList of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getFirstSceneNodeInList00
static int tolua_MyLuaBind_scn_ISceneManager_getFirstSceneNodeInList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFirstSceneNodeInList'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getFirstSceneNodeInList();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFirstSceneNodeInList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNextSceneNodeInList of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getNextSceneNodeInList00
static int tolua_MyLuaBind_scn_ISceneManager_getNextSceneNodeInList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNextSceneNodeInList'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getNextSceneNodeInList(node);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNextSceneNodeInList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSceneNodesCount of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getSceneNodesCount00
static int tolua_MyLuaBind_scn_ISceneManager_getSceneNodesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSceneNodesCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getSceneNodesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneNodesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVisibleSceneNodesCount of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getVisibleSceneNodesCount00
static int tolua_MyLuaBind_scn_ISceneManager_getVisibleSceneNodesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVisibleSceneNodesCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getVisibleSceneNodesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVisibleSceneNodesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRayFromScreenCoordinates of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getRayFromScreenCoordinates00
static int tolua_MyLuaBind_scn_ISceneManager_getRayFromScreenCoordinates00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  const core::position2di* pos = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRayFromScreenCoordinates'",NULL);
#endif
 {
  const core::line3df& tolua_ret = (const core::line3df&)  self->getRayFromScreenCoordinates(*pos);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::line3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRayFromScreenCoordinates'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScreenCoordinatesFrom3DPosition of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getScreenCoordinatesFrom3DPosition00
static int tolua_MyLuaBind_scn_ISceneManager_getScreenCoordinatesFrom3DPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos3d = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScreenCoordinatesFrom3DPosition'",NULL);
#endif
 {
  const core::position2di& tolua_ret = (const core::position2di&)  self->getScreenCoordinatesFrom3DPosition(*pos3d);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::position2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScreenCoordinatesFrom3DPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addCameraSceneNodeMaya of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_addCameraSceneNodeMaya00
static int tolua_MyLuaBind_scn_ISceneManager_addCameraSceneNodeMaya00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",1,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* parent = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,NULL));
  float rotateSpeed = ((float)  tolua_tonumber(tolua_S,3,100.0f));
  float moveSpeed = ((float)  tolua_tonumber(tolua_S,4,100.0f));
  float zoomSpeed = ((float)  tolua_tonumber(tolua_S,5,100.0f));
  int id = ((int)  tolua_tonumber(tolua_S,6,-1));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addCameraSceneNodeMaya'",NULL);
#endif
 {
  scn::ICameraSceneNode* tolua_ret = (scn::ICameraSceneNode*)  self->addCameraSceneNodeMaya(parent,rotateSpeed,moveSpeed,zoomSpeed,id);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ICameraSceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addCameraSceneNodeMaya'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addCameraSceneNodeFPS of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_addCameraSceneNodeFPS00
static int tolua_MyLuaBind_scn_ISceneManager_addCameraSceneNodeFPS00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",1,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* player = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  float rotateSpeed = ((float)  tolua_tonumber(tolua_S,3,100.0f));
  float moveSpeed = ((float)  tolua_tonumber(tolua_S,4,100.0f));
  float zoomSpeed = ((float)  tolua_tonumber(tolua_S,5,100.0f));
  int id = ((int)  tolua_tonumber(tolua_S,6,-1));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addCameraSceneNodeFPS'",NULL);
#endif
 {
  scn::ICameraSceneNode* tolua_ret = (scn::ICameraSceneNode*)  self->addCameraSceneNodeFPS(player,rotateSpeed,moveSpeed,zoomSpeed,id);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ICameraSceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addCameraSceneNodeFPS'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addCameraSceneNodeOverview of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_addCameraSceneNodeOverview00
static int tolua_MyLuaBind_scn_ISceneManager_addCameraSceneNodeOverview00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",1,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* parent = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,NULL));
  float rotateSpeed = ((float)  tolua_tonumber(tolua_S,3,100.0f));
  float zoomSpeed = ((float)  tolua_tonumber(tolua_S,4,100.0f));
  int id = ((int)  tolua_tonumber(tolua_S,5,-1));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addCameraSceneNodeOverview'",NULL);
#endif
 {
  scn::ICameraSceneNode* tolua_ret = (scn::ICameraSceneNode*)  self->addCameraSceneNodeOverview(parent,rotateSpeed,zoomSpeed,id);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ICameraSceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addCameraSceneNodeOverview'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearSelectionList of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_clearSelectionList00
static int tolua_MyLuaBind_scn_ISceneManager_clearSelectionList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearSelectionList'",NULL);
#endif
 {
  self->clearSelectionList();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearSelectionList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addSceneNodeToSelectionList of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_addSceneNodeToSelectionList00
static int tolua_MyLuaBind_scn_ISceneManager_addSceneNodeToSelectionList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addSceneNodeToSelectionList'",NULL);
#endif
 {
  self->addSceneNodeToSelectionList(node);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addSceneNodeToSelectionList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: remSceneNodeFromSelectionList of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_remSceneNodeFromSelectionList00
static int tolua_MyLuaBind_scn_ISceneManager_remSceneNodeFromSelectionList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'remSceneNodeFromSelectionList'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->remSceneNodeFromSelectionList(node);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'remSceneNodeFromSelectionList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelectedSceneNodesCount of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getSelectedSceneNodesCount00
static int tolua_MyLuaBind_scn_ISceneManager_getSelectedSceneNodesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelectedSceneNodesCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getSelectedSceneNodesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelectedSceneNodesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelectedSceneNode of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getSelectedSceneNode00
static int tolua_MyLuaBind_scn_ISceneManager_getSelectedSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelectedSceneNode'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getSelectedSceneNode(idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelectedSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isSelectionListFreezed of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_isSelectionListFreezed00
static int tolua_MyLuaBind_scn_ISceneManager_isSelectionListFreezed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isSelectionListFreezed'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isSelectionListFreezed();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isSelectionListFreezed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: freezeSelectionList of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_freezeSelectionList00
static int tolua_MyLuaBind_scn_ISceneManager_freezeSelectionList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'freezeSelectionList'",NULL);
#endif
 {
  self->freezeSelectionList();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'freezeSelectionList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: unfreezeSelectionList of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_unfreezeSelectionList00
static int tolua_MyLuaBind_scn_ISceneManager_unfreezeSelectionList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'unfreezeSelectionList'",NULL);
#endif
 {
  self->unfreezeSelectionList();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'unfreezeSelectionList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSceneRenderFlag of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_setSceneRenderFlag00
static int tolua_MyLuaBind_scn_ISceneManager_setSceneRenderFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::E_SCENE_RENDER_FLAG flag = ((scn::E_SCENE_RENDER_FLAG) (int)  tolua_tonumber(tolua_S,2,0));
  bool value = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSceneRenderFlag'",NULL);
#endif
 {
  self->setSceneRenderFlag(flag,value);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSceneRenderFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSceneRenderFlag of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getSceneRenderFlag00
static int tolua_MyLuaBind_scn_ISceneManager_getSceneRenderFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::E_SCENE_RENDER_FLAG flag = ((scn::E_SCENE_RENDER_FLAG) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSceneRenderFlag'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getSceneRenderFlag(flag);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneRenderFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSceneNodeFromScreenCoordinates of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getSceneNodeFromScreenCoordinates00
static int tolua_MyLuaBind_scn_ISceneManager_getSceneNodeFromScreenCoordinates00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  const core::position2di* scr_pos = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSceneNodeFromScreenCoordinates'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getSceneNodeFromScreenCoordinates(*scr_pos);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneNodeFromScreenCoordinates'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isSceneEditorStarted of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_isSceneEditorStarted00
static int tolua_MyLuaBind_scn_ISceneManager_isSceneEditorStarted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isSceneEditorStarted'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isSceneEditorStarted();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isSceneEditorStarted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createSceneNode of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_createSceneNode00
static int tolua_MyLuaBind_scn_ISceneManager_createSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::SSceneNodeCommonParams",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::SSceneNodeCommonParams* snparams = ((scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,2,0));
  bool log_info = ((bool)  tolua_toboolean(tolua_S,3,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createSceneNode'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->createSceneNode(*snparams,log_info);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: cloneSceneNode of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_cloneSceneNode00
static int tolua_MyLuaBind_scn_ISceneManager_cloneSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* node_to_clone = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  bool with_animators = ((bool)  tolua_toboolean(tolua_S,3,true));
  bool log_info = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'cloneSceneNode'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->cloneSceneNode(node_to_clone,with_animators,log_info);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'cloneSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reloadSceneNode of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_reloadSceneNode00
static int tolua_MyLuaBind_scn_ISceneManager_reloadSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reloadSceneNode'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->reloadSceneNode(node);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reloadSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadSceneNode of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_loadSceneNode00
static int tolua_MyLuaBind_scn_ISceneManager_loadSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
  bool cache_it = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadSceneNode'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->loadSceneNode(filename,cache_it);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: saveSceneNode of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_saveSceneNode00
static int tolua_MyLuaBind_scn_ISceneManager_saveSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
  scn::ISceneNode* node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'saveSceneNode'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->saveSceneNode(filename,node);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'saveSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaterialXMLText of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_getMaterialXMLText00
static int tolua_MyLuaBind_scn_ISceneManager_getMaterialXMLText00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  const vid::SMaterial* material = ((const vid::SMaterial*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaterialXMLText'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getMaterialXMLText(*material);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaterialXMLText'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findMeshFileName of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_findMeshFileName00
static int tolua_MyLuaBind_scn_ISceneManager_findMeshFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::IAnimatedMesh* mesh = ((scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findMeshFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->findMeshFileName(mesh);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findMeshFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findMeshFullFileName of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_findMeshFullFileName00
static int tolua_MyLuaBind_scn_ISceneManager_findMeshFullFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  scn::IAnimatedMesh* amesh = ((scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findMeshFullFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->findMeshFullFileName(amesh);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findMeshFullFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findMesh of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_findMesh00
static int tolua_MyLuaBind_scn_ISceneManager_findMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findMesh'",NULL);
#endif
 {
  scn::IAnimatedMesh* tolua_ret = (scn::IAnimatedMesh*)  self->findMesh(filename);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IAnimatedMesh");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onStartSceneEditor of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_onStartSceneEditor00
static int tolua_MyLuaBind_scn_ISceneManager_onStartSceneEditor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onStartSceneEditor'",NULL);
#endif
 {
  self->onStartSceneEditor();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onStartSceneEditor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: onStopSceneEditor of class  scn::ISceneManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneManager_onStopSceneEditor00
static int tolua_MyLuaBind_scn_ISceneManager_onStopSceneEditor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneManager* self = (scn::ISceneManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'onStopSceneEditor'",NULL);
#endif
 {
  self->onStopSceneEditor();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onStopSceneEditor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeParameters_new00
static int tolua_MyLuaBind_scn_SSceneNodeParameters_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SSceneNodeParameters* tolua_ret = (scn::SSceneNodeParameters*)  new scn::SSceneNodeParameters();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::SSceneNodeParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeParameters_new00_local
static int tolua_MyLuaBind_scn_SSceneNodeParameters_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SSceneNodeParameters* tolua_ret = (scn::SSceneNodeParameters*)  new scn::SSceneNodeParameters();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"scn::SSceneNodeParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeParameters_new01
static int tolua_MyLuaBind_scn_SSceneNodeParameters_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeParameters",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SSceneNodeParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const scn::SSceneNodeParameters* p = ((const scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,2,0));
 {
  scn::SSceneNodeParameters* tolua_ret = (scn::SSceneNodeParameters*)  new scn::SSceneNodeParameters(*p);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::SSceneNodeParameters");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_SSceneNodeParameters_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeParameters_new01_local
static int tolua_MyLuaBind_scn_SSceneNodeParameters_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeParameters",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SSceneNodeParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const scn::SSceneNodeParameters* p = ((const scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,2,0));
 {
  scn::SSceneNodeParameters* tolua_ret = (scn::SSceneNodeParameters*)  new scn::SSceneNodeParameters(*p);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"scn::SSceneNodeParameters");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_SSceneNodeParameters_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeParameters_set00
static int tolua_MyLuaBind_scn_SSceneNodeParameters_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::SSceneNodeParameters",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SSceneNodeParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::SSceneNodeParameters* self = (scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,1,0);
  const scn::SSceneNodeParameters* p = ((const scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Name of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SSceneNodeParameters_Name
static int tolua_get_scn__SSceneNodeParameters_Name(lua_State* tolua_S)
{
  scn::SSceneNodeParameters* self = (scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Name'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Name,"core::stringc");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Name of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SSceneNodeParameters_Name
static int tolua_set_scn__SSceneNodeParameters_Name(lua_State* tolua_S)
{
  scn::SSceneNodeParameters* self = (scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Name'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::stringc",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Name = *((core::stringc*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ID of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SSceneNodeParameters_ID
static int tolua_get_scn__SSceneNodeParameters_ID(lua_State* tolua_S)
{
  scn::SSceneNodeParameters* self = (scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ID'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->ID);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: ID of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SSceneNodeParameters_ID
static int tolua_set_scn__SSceneNodeParameters_ID(lua_State* tolua_S)
{
  scn::SSceneNodeParameters* self = (scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ID'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ID = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ParentID of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SSceneNodeParameters_ParentID
static int tolua_get_scn__SSceneNodeParameters_ParentID(lua_State* tolua_S)
{
  scn::SSceneNodeParameters* self = (scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentID'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->ParentID);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: ParentID of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SSceneNodeParameters_ParentID
static int tolua_set_scn__SSceneNodeParameters_ParentID(lua_State* tolua_S)
{
  scn::SSceneNodeParameters* self = (scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentID'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentID = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Type of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SSceneNodeParameters_Type
static int tolua_get_scn__SSceneNodeParameters_Type(lua_State* tolua_S)
{
  scn::SSceneNodeParameters* self = (scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Type'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Type);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Type of class  scn::SSceneNodeParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SSceneNodeParameters_Type
static int tolua_set_scn__SSceneNodeParameters_Type(lua_State* tolua_S)
{
  scn::SSceneNodeParameters* self = (scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Type'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Type = ((scn::E_SCENE_NODE_TYPE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  scn::SSceneNodeMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeMaterial_new00
static int tolua_MyLuaBind_scn_SSceneNodeMaterial_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SSceneNodeMaterial* tolua_ret = (scn::SSceneNodeMaterial*)  new scn::SSceneNodeMaterial();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::SSceneNodeMaterial");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  scn::SSceneNodeMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeMaterial_new00_local
static int tolua_MyLuaBind_scn_SSceneNodeMaterial_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SSceneNodeMaterial* tolua_ret = (scn::SSceneNodeMaterial*)  new scn::SSceneNodeMaterial();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"scn::SSceneNodeMaterial");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  scn::SSceneNodeMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeMaterial_set00
static int tolua_MyLuaBind_scn_SSceneNodeMaterial_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::SSceneNodeMaterial",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SSceneNodeMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::SSceneNodeMaterial* self = (scn::SSceneNodeMaterial*)  tolua_tousertype(tolua_S,1,0);
  const scn::SSceneNodeMaterial* p = ((const scn::SSceneNodeMaterial*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Material of class  scn::SSceneNodeMaterial */
#ifndef TOLUA_DISABLE_tolua_get_scn__SSceneNodeMaterial_Material
static int tolua_get_scn__SSceneNodeMaterial_Material(lua_State* tolua_S)
{
  scn::SSceneNodeMaterial* self = (scn::SSceneNodeMaterial*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Material'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Material,"vid::SMaterial");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Material of class  scn::SSceneNodeMaterial */
#ifndef TOLUA_DISABLE_tolua_set_scn__SSceneNodeMaterial_Material
static int tolua_set_scn__SSceneNodeMaterial_Material(lua_State* tolua_S)
{
  scn::SSceneNodeMaterial* self = (scn::SSceneNodeMaterial*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Material'",NULL);
 if (!tolua_isusertype(tolua_S,2,"vid::SMaterial",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Material = *((vid::SMaterial*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  scn::SSceneNodeTransformation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeTransformation_new00
static int tolua_MyLuaBind_scn_SSceneNodeTransformation_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeTransformation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SSceneNodeTransformation* tolua_ret = (scn::SSceneNodeTransformation*)  new scn::SSceneNodeTransformation();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::SSceneNodeTransformation");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  scn::SSceneNodeTransformation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeTransformation_new00_local
static int tolua_MyLuaBind_scn_SSceneNodeTransformation_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeTransformation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SSceneNodeTransformation* tolua_ret = (scn::SSceneNodeTransformation*)  new scn::SSceneNodeTransformation();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"scn::SSceneNodeTransformation");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  scn::SSceneNodeTransformation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeTransformation_set00
static int tolua_MyLuaBind_scn_SSceneNodeTransformation_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::SSceneNodeTransformation",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SSceneNodeTransformation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::SSceneNodeTransformation* self = (scn::SSceneNodeTransformation*)  tolua_tousertype(tolua_S,1,0);
  const scn::SSceneNodeTransformation* p = ((const scn::SSceneNodeTransformation*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Position of class  scn::SSceneNodeTransformation */
#ifndef TOLUA_DISABLE_tolua_get_scn__SSceneNodeTransformation_Position
static int tolua_get_scn__SSceneNodeTransformation_Position(lua_State* tolua_S)
{
  scn::SSceneNodeTransformation* self = (scn::SSceneNodeTransformation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Position,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Position of class  scn::SSceneNodeTransformation */
#ifndef TOLUA_DISABLE_tolua_set_scn__SSceneNodeTransformation_Position
static int tolua_set_scn__SSceneNodeTransformation_Position(lua_State* tolua_S)
{
  scn::SSceneNodeTransformation* self = (scn::SSceneNodeTransformation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Position = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Rotation of class  scn::SSceneNodeTransformation */
#ifndef TOLUA_DISABLE_tolua_get_scn__SSceneNodeTransformation_Rotation
static int tolua_get_scn__SSceneNodeTransformation_Rotation(lua_State* tolua_S)
{
  scn::SSceneNodeTransformation* self = (scn::SSceneNodeTransformation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Rotation'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Rotation,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Rotation of class  scn::SSceneNodeTransformation */
#ifndef TOLUA_DISABLE_tolua_set_scn__SSceneNodeTransformation_Rotation
static int tolua_set_scn__SSceneNodeTransformation_Rotation(lua_State* tolua_S)
{
  scn::SSceneNodeTransformation* self = (scn::SSceneNodeTransformation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Rotation'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Rotation = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Scale of class  scn::SSceneNodeTransformation */
#ifndef TOLUA_DISABLE_tolua_get_scn__SSceneNodeTransformation_Scale
static int tolua_get_scn__SSceneNodeTransformation_Scale(lua_State* tolua_S)
{
  scn::SSceneNodeTransformation* self = (scn::SSceneNodeTransformation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Scale'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Scale,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Scale of class  scn::SSceneNodeTransformation */
#ifndef TOLUA_DISABLE_tolua_set_scn__SSceneNodeTransformation_Scale
static int tolua_set_scn__SSceneNodeTransformation_Scale(lua_State* tolua_S)
{
  scn::SSceneNodeTransformation* self = (scn::SSceneNodeTransformation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Scale'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Scale = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  scn::SSceneNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeCommonParams_new00
static int tolua_MyLuaBind_scn_SSceneNodeCommonParams_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SSceneNodeCommonParams* tolua_ret = (scn::SSceneNodeCommonParams*)  new scn::SSceneNodeCommonParams();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::SSceneNodeCommonParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  scn::SSceneNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeCommonParams_new00_local
static int tolua_MyLuaBind_scn_SSceneNodeCommonParams_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SSceneNodeCommonParams* tolua_ret = (scn::SSceneNodeCommonParams*)  new scn::SSceneNodeCommonParams();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"scn::SSceneNodeCommonParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  scn::SSceneNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeCommonParams_new01
static int tolua_MyLuaBind_scn_SSceneNodeCommonParams_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeCommonParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SSceneNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const scn::SSceneNodeCommonParams* p = ((const scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,2,0));
 {
  scn::SSceneNodeCommonParams* tolua_ret = (scn::SSceneNodeCommonParams*)  new scn::SSceneNodeCommonParams(*p);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::SSceneNodeCommonParams");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_SSceneNodeCommonParams_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  scn::SSceneNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeCommonParams_new01_local
static int tolua_MyLuaBind_scn_SSceneNodeCommonParams_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SSceneNodeCommonParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SSceneNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const scn::SSceneNodeCommonParams* p = ((const scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,2,0));
 {
  scn::SSceneNodeCommonParams* tolua_ret = (scn::SSceneNodeCommonParams*)  new scn::SSceneNodeCommonParams(*p);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"scn::SSceneNodeCommonParams");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_SSceneNodeCommonParams_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  scn::SSceneNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SSceneNodeCommonParams_set00
static int tolua_MyLuaBind_scn_SSceneNodeCommonParams_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::SSceneNodeCommonParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SSceneNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::SSceneNodeCommonParams* self = (scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
  const scn::SSceneNodeCommonParams* p = ((const scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Parameters of class  scn::SSceneNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_get_scn__SSceneNodeCommonParams_Parameters
static int tolua_get_scn__SSceneNodeCommonParams_Parameters(lua_State* tolua_S)
{
  scn::SSceneNodeCommonParams* self = (scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Parameters'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Parameters,"scn::SSceneNodeParameters");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Parameters of class  scn::SSceneNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_set_scn__SSceneNodeCommonParams_Parameters
static int tolua_set_scn__SSceneNodeCommonParams_Parameters(lua_State* tolua_S)
{
  scn::SSceneNodeCommonParams* self = (scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Parameters'",NULL);
 if (!tolua_isusertype(tolua_S,2,"scn::SSceneNodeParameters",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Parameters = *((scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Material of class  scn::SSceneNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_get_scn__SSceneNodeCommonParams_Material
static int tolua_get_scn__SSceneNodeCommonParams_Material(lua_State* tolua_S)
{
  scn::SSceneNodeCommonParams* self = (scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Material'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Material,"scn::SSceneNodeMaterial");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Material of class  scn::SSceneNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_set_scn__SSceneNodeCommonParams_Material
static int tolua_set_scn__SSceneNodeCommonParams_Material(lua_State* tolua_S)
{
  scn::SSceneNodeCommonParams* self = (scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Material'",NULL);
 if (!tolua_isusertype(tolua_S,2,"scn::SSceneNodeMaterial",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Material = *((scn::SSceneNodeMaterial*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Transformation of class  scn::SSceneNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_get_scn__SSceneNodeCommonParams_Transformation
static int tolua_get_scn__SSceneNodeCommonParams_Transformation(lua_State* tolua_S)
{
  scn::SSceneNodeCommonParams* self = (scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Transformation'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Transformation,"scn::SSceneNodeTransformation");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Transformation of class  scn::SSceneNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_set_scn__SSceneNodeCommonParams_Transformation
static int tolua_set_scn__SSceneNodeCommonParams_Transformation(lua_State* tolua_S)
{
  scn::SSceneNodeCommonParams* self = (scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Transformation'",NULL);
 if (!tolua_isusertype(tolua_S,2,"scn::SSceneNodeTransformation",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Transformation = *((scn::SSceneNodeTransformation*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterParameters_new00
static int tolua_MyLuaBind_scn_SImposterParameters_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SImposterParameters* tolua_ret = (scn::SImposterParameters*)  new scn::SImposterParameters();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::SImposterParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterParameters_new00_local
static int tolua_MyLuaBind_scn_SImposterParameters_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SImposterParameters* tolua_ret = (scn::SImposterParameters*)  new scn::SImposterParameters();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"scn::SImposterParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileName of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterParameters_getFileName00
static int tolua_MyLuaBind_scn_SImposterParameters_getFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::SImposterParameters* self = (const scn::SImposterParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getFileName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFileName of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterParameters_setFileName00
static int tolua_MyLuaBind_scn_SImposterParameters_setFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::SImposterParameters* self = (scn::SImposterParameters*)  tolua_tousertype(tolua_S,1,0);
  const char* file_name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFileName'",NULL);
#endif
 {
  self->setFileName(file_name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterParameters_set00
static int tolua_MyLuaBind_scn_SImposterParameters_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::SImposterParameters* self = (scn::SImposterParameters*)  tolua_tousertype(tolua_S,1,0);
  const scn::SImposterParameters* p = ((const scn::SImposterParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: equal of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterParameters_equal00
static int tolua_MyLuaBind_scn_SImposterParameters_equal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::SImposterParameters* self = (const scn::SImposterParameters*)  tolua_tousertype(tolua_S,1,0);
  const scn::SImposterParameters* p = ((const scn::SImposterParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equal'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->equal(*p);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'equal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterParameters__eq00
static int tolua_MyLuaBind_scn_SImposterParameters__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::SImposterParameters* self = (const scn::SImposterParameters*)  tolua_tousertype(tolua_S,1,0);
  const scn::SImposterParameters* p = ((const scn::SImposterParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*p);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ShiftCustom of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterParameters_ShiftCustom
static int tolua_get_scn__SImposterParameters_ShiftCustom(lua_State* tolua_S)
{
  scn::SImposterParameters* self = (scn::SImposterParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShiftCustom'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->ShiftCustom,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: ShiftCustom of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterParameters_ShiftCustom
static int tolua_set_scn__SImposterParameters_ShiftCustom(lua_State* tolua_S)
{
  scn::SImposterParameters* self = (scn::SImposterParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShiftCustom'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ShiftCustom = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ViewOffset of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterParameters_ViewOffset
static int tolua_get_scn__SImposterParameters_ViewOffset(lua_State* tolua_S)
{
  scn::SImposterParameters* self = (scn::SImposterParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ViewOffset'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->ViewOffset);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: ViewOffset of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterParameters_ViewOffset
static int tolua_set_scn__SImposterParameters_ViewOffset(lua_State* tolua_S)
{
  scn::SImposterParameters* self = (scn::SImposterParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ViewOffset'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ViewOffset = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Centered of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterParameters_Centered
static int tolua_get_scn__SImposterParameters_Centered(lua_State* tolua_S)
{
  scn::SImposterParameters* self = (scn::SImposterParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Centered'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->Centered);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Centered of class  scn::SImposterParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterParameters_Centered
static int tolua_set_scn__SImposterParameters_Centered(lua_State* tolua_S)
{
  scn::SImposterParameters* self = (scn::SImposterParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Centered'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Centered = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterCreationParameters_new00
static int tolua_MyLuaBind_scn_SImposterCreationParameters_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SImposterCreationParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SImposterCreationParameters* tolua_ret = (scn::SImposterCreationParameters*)  new scn::SImposterCreationParameters();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::SImposterCreationParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterCreationParameters_new00_local
static int tolua_MyLuaBind_scn_SImposterCreationParameters_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SImposterCreationParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SImposterCreationParameters* tolua_ret = (scn::SImposterCreationParameters*)  new scn::SImposterCreationParameters();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"scn::SImposterCreationParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterCreationParameters_set00
static int tolua_MyLuaBind_scn_SImposterCreationParameters_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::SImposterCreationParameters",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SImposterCreationParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
  const scn::SImposterCreationParameters* p = ((const scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: equal of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterCreationParameters_equal00
static int tolua_MyLuaBind_scn_SImposterCreationParameters_equal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::SImposterCreationParameters",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SImposterCreationParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::SImposterCreationParameters* self = (const scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
  const scn::SImposterCreationParameters* p = ((const scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equal'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->equal(*p);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'equal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SImposterCreationParameters__eq00
static int tolua_MyLuaBind_scn_SImposterCreationParameters__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::SImposterCreationParameters",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SImposterCreationParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::SImposterCreationParameters* self = (const scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
  const scn::SImposterCreationParameters* p = ((const scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*p);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ViewsCount of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterCreationParameters_ViewsCount
static int tolua_get_scn__SImposterCreationParameters_ViewsCount(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ViewsCount'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->ViewsCount);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: ViewsCount of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterCreationParameters_ViewsCount
static int tolua_set_scn__SImposterCreationParameters_ViewsCount(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ViewsCount'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ViewsCount = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: CameraViewScale of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterCreationParameters_CameraViewScale
static int tolua_get_scn__SImposterCreationParameters_CameraViewScale(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CameraViewScale'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->CameraViewScale,"core::vector2df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: CameraViewScale of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterCreationParameters_CameraViewScale
static int tolua_set_scn__SImposterCreationParameters_CameraViewScale(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CameraViewScale'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector2df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->CameraViewScale = *((core::vector2df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: SizeScale of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterCreationParameters_SizeScale
static int tolua_get_scn__SImposterCreationParameters_SizeScale(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SizeScale'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->SizeScale,"core::vector2df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: SizeScale of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterCreationParameters_SizeScale
static int tolua_set_scn__SImposterCreationParameters_SizeScale(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SizeScale'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector2df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SizeScale = *((core::vector2df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: TextureResolution of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterCreationParameters_TextureResolution
static int tolua_get_scn__SImposterCreationParameters_TextureResolution(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TextureResolution'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->TextureResolution);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: TextureResolution of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterCreationParameters_TextureResolution
static int tolua_set_scn__SImposterCreationParameters_TextureResolution(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TextureResolution'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TextureResolution = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: AnimationFrameStep of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterCreationParameters_AnimationFrameStep
static int tolua_get_scn__SImposterCreationParameters_AnimationFrameStep(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AnimationFrameStep'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->AnimationFrameStep);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: AnimationFrameStep of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterCreationParameters_AnimationFrameStep
static int tolua_set_scn__SImposterCreationParameters_AnimationFrameStep(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AnimationFrameStep'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AnimationFrameStep = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: OptimalViewAngle of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterCreationParameters_OptimalViewAngle
static int tolua_get_scn__SImposterCreationParameters_OptimalViewAngle(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OptimalViewAngle'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->OptimalViewAngle);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: OptimalViewAngle of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterCreationParameters_OptimalViewAngle
static int tolua_set_scn__SImposterCreationParameters_OptimalViewAngle(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OptimalViewAngle'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->OptimalViewAngle = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: AmbientColor of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterCreationParameters_AmbientColor
static int tolua_get_scn__SImposterCreationParameters_AmbientColor(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AmbientColor'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->AmbientColor,"img::SColor");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: AmbientColor of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterCreationParameters_AmbientColor
static int tolua_set_scn__SImposterCreationParameters_AmbientColor(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AmbientColor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"img::SColor",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AmbientColor = *((img::SColor*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DiffuseColor of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterCreationParameters_DiffuseColor
static int tolua_get_scn__SImposterCreationParameters_DiffuseColor(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DiffuseColor'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->DiffuseColor,"img::SColor");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: DiffuseColor of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterCreationParameters_DiffuseColor
static int tolua_set_scn__SImposterCreationParameters_DiffuseColor(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DiffuseColor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"img::SColor",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DiffuseColor = *((img::SColor*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: SpecularColor of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterCreationParameters_SpecularColor
static int tolua_get_scn__SImposterCreationParameters_SpecularColor(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SpecularColor'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->SpecularColor,"img::SColor");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: SpecularColor of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterCreationParameters_SpecularColor
static int tolua_set_scn__SImposterCreationParameters_SpecularColor(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SpecularColor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"img::SColor",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SpecularColor = *((img::SColor*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Compress of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SImposterCreationParameters_Compress
static int tolua_get_scn__SImposterCreationParameters_Compress(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Compress'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->Compress);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Compress of class  scn::SImposterCreationParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SImposterCreationParameters_Compress
static int tolua_set_scn__SImposterCreationParameters_Compress(lua_State* tolua_S)
{
  scn::SImposterCreationParameters* self = (scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Compress'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Compress = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: isLocked of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_isLocked00
static int tolua_MyLuaBind_scn_ISceneNode_isLocked00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isLocked'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isLocked();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isLocked'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: lockObject of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_lockObject00
static int tolua_MyLuaBind_scn_ISceneNode_lockObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'lockObject'",NULL);
#endif
 {
  self->lockObject();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'lockObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: unlockObject of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_unlockObject00
static int tolua_MyLuaBind_scn_ISceneNode_unlockObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'unlockObject'",NULL);
#endif
 {
  self->unlockObject();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'unlockObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRenderBuffersCount of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getRenderBuffersCount00
static int tolua_MyLuaBind_scn_ISceneNode_getRenderBuffersCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRenderBuffersCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getRenderBuffersCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRenderBuffersCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRenderBuffer of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getRenderBuffer00
static int tolua_MyLuaBind_scn_ISceneNode_getRenderBuffer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned i = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRenderBuffer'",NULL);
#endif
 {
  vid::IRenderBuffer* tolua_ret = (vid::IRenderBuffer*)  self->getRenderBuffer(i);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IRenderBuffer");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRenderBuffer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getName of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getName00
static int tolua_MyLuaBind_scn_ISceneNode_getName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ISceneNode* self = (const scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setName of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setName00
static int tolua_MyLuaBind_scn_ISceneNode_setName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setName'",NULL);
#endif
 {
  self->setName(name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileName of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getFileName00
static int tolua_MyLuaBind_scn_ISceneNode_getFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ISceneNode* self = (const scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getFileName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFileName of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setFileName00
static int tolua_MyLuaBind_scn_ISceneNode_setFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFileName'",NULL);
#endif
 {
  self->setFileName(name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBoundingBox of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getBoundingBox00
static int tolua_MyLuaBind_scn_ISceneNode_getBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ISceneNode* self = (const scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBoundingBox'",NULL);
#endif
 {
  const core::aabbox3df& tolua_ret = (const core::aabbox3df&)  self->getBoundingBox();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::aabbox3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTransformedBoundingBox of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getTransformedBoundingBox00
static int tolua_MyLuaBind_scn_ISceneNode_getTransformedBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ISceneNode* self = (const scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTransformedBoundingBox'",NULL);
#endif
 {
  const core::aabbox3df& tolua_ret = (const core::aabbox3df&)  self->getTransformedBoundingBox();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::aabbox3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTransformedBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isVisible of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_isVisible00
static int tolua_MyLuaBind_scn_ISceneNode_isVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isVisible'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isVisible();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVisible of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setVisible00
static int tolua_MyLuaBind_scn_ISceneNode_setVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool isVisible = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVisible'",NULL);
#endif
 {
  self->setVisible(isVisible);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getID of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getID00
static int tolua_MyLuaBind_scn_ISceneNode_getID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getID'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getID();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getID'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setID of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setID00
static int tolua_MyLuaBind_scn_ISceneNode_setID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  int id = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setID'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setID(id);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setID'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addChild of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_addChild00
static int tolua_MyLuaBind_scn_ISceneNode_addChild00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* child = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addChild'",NULL);
#endif
 {
  self->addChild(child);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addChild'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeChild of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_removeChild00
static int tolua_MyLuaBind_scn_ISceneNode_removeChild00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* child = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeChild'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeChild(child);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeChild'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAll of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_removeAll00
static int tolua_MyLuaBind_scn_ISceneNode_removeAll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAll'",NULL);
#endif
 {
  self->removeAll();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: remove of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_remove00
static int tolua_MyLuaBind_scn_ISceneNode_remove00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'remove'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->remove();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'remove'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addAnimator of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_addAnimator00
static int tolua_MyLuaBind_scn_ISceneNode_addAnimator00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNodeAnimator",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNodeAnimator* animator = ((scn::ISceneNodeAnimator*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addAnimator'",NULL);
#endif
 {
  self->addAnimator(animator);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addAnimator'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAnimator of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_removeAnimator00
static int tolua_MyLuaBind_scn_ISceneNode_removeAnimator00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNodeAnimator",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNodeAnimator* animator = ((scn::ISceneNodeAnimator*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAnimator'",NULL);
#endif
 {
  self->removeAnimator(animator);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAnimator'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAnimators of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_removeAnimators00
static int tolua_MyLuaBind_scn_ISceneNode_removeAnimators00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAnimators'",NULL);
#endif
 {
  self->removeAnimators();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAnimators'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaterial of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getMaterial00
static int tolua_MyLuaBind_scn_ISceneNode_getMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  int i = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaterial'",NULL);
#endif
 {
  vid::SMaterial& tolua_ret = (vid::SMaterial&)  self->getMaterial(i);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"vid::SMaterial");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaterialsCount of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getMaterialsCount00
static int tolua_MyLuaBind_scn_ISceneNode_getMaterialsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaterialsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getMaterialsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaterialsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaterial of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setMaterial00
static int tolua_MyLuaBind_scn_ISceneNode_setMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::SMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  vid::SMaterial* mat = ((vid::SMaterial*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaterial'",NULL);
#endif
 {
  self->setMaterial(*mat);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScale of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getScale00
static int tolua_MyLuaBind_scn_ISceneNode_getScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ISceneNode* self = (const scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScale'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getScale();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRotation of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getRotation00
static int tolua_MyLuaBind_scn_ISceneNode_getRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ISceneNode* self = (const scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRotation'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getRotation();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPosition of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getPosition00
static int tolua_MyLuaBind_scn_ISceneNode_getPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ISceneNode* self = (const scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPosition'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getPosition();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScale of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setScale00
static int tolua_MyLuaBind_scn_ISceneNode_setScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* scale = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScale'",NULL);
#endif
 {
  self->setScale(*scale);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotation of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setRotation00
static int tolua_MyLuaBind_scn_ISceneNode_setRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* rotation = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotation'",NULL);
#endif
 {
  self->setRotation(*rotation);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPosition of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setPosition00
static int tolua_MyLuaBind_scn_ISceneNode_setPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* newpos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPosition'",NULL);
#endif
 {
  self->setPosition(*newpos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAbsolutePosition of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getAbsolutePosition00
static int tolua_MyLuaBind_scn_ISceneNode_getAbsolutePosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAbsolutePosition'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getAbsolutePosition();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAbsolutePosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAbsoluteTransformation of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getAbsoluteTransformation00
static int tolua_MyLuaBind_scn_ISceneNode_getAbsoluteTransformation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAbsoluteTransformation'",NULL);
#endif
 {
  const core::matrix4& tolua_ret = (const core::matrix4&)  self->getAbsoluteTransformation();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::matrix4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAbsoluteTransformation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRelativeTransformation of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getRelativeTransformation00
static int tolua_MyLuaBind_scn_ISceneNode_getRelativeTransformation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRelativeTransformation'",NULL);
#endif
 {
  const core::matrix4& tolua_ret = (const core::matrix4&)  self->getRelativeTransformation();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::matrix4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRelativeTransformation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateAbsoluteTransformation of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_updateAbsoluteTransformation00
static int tolua_MyLuaBind_scn_ISceneNode_updateAbsoluteTransformation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateAbsoluteTransformation'",NULL);
#endif
 {
  self->updateAbsoluteTransformation();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateAbsoluteTransformation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: storeTransformation of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_storeTransformation00
static int tolua_MyLuaBind_scn_ISceneNode_storeTransformation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'storeTransformation'",NULL);
#endif
 {
  self->storeTransformation();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'storeTransformation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: restoreTransformation of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_restoreTransformation00
static int tolua_MyLuaBind_scn_ISceneNode_restoreTransformation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'restoreTransformation'",NULL);
#endif
 {
  self->restoreTransformation();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'restoreTransformation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDebugDataVisible of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setDebugDataVisible00
static int tolua_MyLuaBind_scn_ISceneNode_setDebugDataVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool visible = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDebugDataVisible'",NULL);
#endif
 {
  self->setDebugDataVisible(visible);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDebugDataVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isDebugDataVisible of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_isDebugDataVisible00
static int tolua_MyLuaBind_scn_ISceneNode_isDebugDataVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isDebugDataVisible'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isDebugDataVisible();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isDebugDataVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParent of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setParent00
static int tolua_MyLuaBind_scn_ISceneNode_setParent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* newParent = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParent'",NULL);
#endif
 {
  self->setParent(newParent);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setParent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getParent of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getParent00
static int tolua_MyLuaBind_scn_ISceneNode_getParent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getParent'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getParent();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParentID of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setParentID00
static int tolua_MyLuaBind_scn_ISceneNode_setParentID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  int parent_id = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParentID'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setParentID(parent_id);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setParentID'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getParentID of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getParentID00
static int tolua_MyLuaBind_scn_ISceneNode_getParentID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getParentID'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getParentID();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParentID'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isMainPlayer of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_isMainPlayer00
static int tolua_MyLuaBind_scn_ISceneNode_isMainPlayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isMainPlayer'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isMainPlayer();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isMainPlayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setIsMainPlayer of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setIsMainPlayer00
static int tolua_MyLuaBind_scn_ISceneNode_setIsMainPlayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool mp = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setIsMainPlayer'",NULL);
#endif
 {
  self->setIsMainPlayer(mp);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setIsMainPlayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: attachShadow of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_attachShadow00
static int tolua_MyLuaBind_scn_ISceneNode_attachShadow00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::E_SHADOW_TYPE type = ((scn::E_SHADOW_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'attachShadow'",NULL);
#endif
 {
  scn::IShadow* tolua_ret = (scn::IShadow*)  self->attachShadow(type);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IShadow");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'attachShadow'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: detachShadow of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_detachShadow00
static int tolua_MyLuaBind_scn_ISceneNode_detachShadow00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'detachShadow'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->detachShadow();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'detachShadow'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getShadow of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getShadow00
static int tolua_MyLuaBind_scn_ISceneNode_getShadow00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getShadow'",NULL);
#endif
 {
  scn::IShadow* tolua_ret = (scn::IShadow*)  self->getShadow();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IShadow");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getShadow'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: attachCaption of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_attachCaption00
static int tolua_MyLuaBind_scn_ISceneNode_attachCaption00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::IFont",1,&tolua_err) ||
 !tolua_isstring(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  vid::IFont* font = ((vid::IFont*)  tolua_tousertype(tolua_S,2,NULL));
  const char* text = ((const char*)  tolua_tostring(tolua_S,3,"Caption"));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'attachCaption'",NULL);
#endif
 {
  scn::ITextSceneNode* tolua_ret = (scn::ITextSceneNode*)  self->attachCaption(font,text);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ITextSceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'attachCaption'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: attachCaption of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_attachCaption01
static int tolua_MyLuaBind_scn_ISceneNode_attachCaption01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::IFont",0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  vid::IFont* font = ((vid::IFont*)  tolua_tousertype(tolua_S,2,0));
  const char* text = ((const char*)  tolua_tostring(tolua_S,3,0));
  img::SColor color = *((img::SColor*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'attachCaption'",NULL);
#endif
 {
  scn::ITextSceneNode* tolua_ret = (scn::ITextSceneNode*)  self->attachCaption(font,text,color);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ITextSceneNode");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_ISceneNode_attachCaption00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: detachCaption of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_detachCaption00
static int tolua_MyLuaBind_scn_ISceneNode_detachCaption00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'detachCaption'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->detachCaption();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'detachCaption'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCaption of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getCaption00
static int tolua_MyLuaBind_scn_ISceneNode_getCaption00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCaption'",NULL);
#endif
 {
  scn::ITextSceneNode* tolua_ret = (scn::ITextSceneNode*)  self->getCaption();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ITextSceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCaption'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: showCaption of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_showCaption00
static int tolua_MyLuaBind_scn_ISceneNode_showCaption00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool show = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'showCaption'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->showCaption(show);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'showCaption'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: attachDynamicObject of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_attachDynamicObject00
static int tolua_MyLuaBind_scn_ISceneNode_attachDynamicObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"dyn::SDynamicObjectParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  dyn::SDynamicObjectParams* ode_obj_params = ((dyn::SDynamicObjectParams*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'attachDynamicObject'",NULL);
#endif
 {
  dyn::IDynamicObject* tolua_ret = (dyn::IDynamicObject*)  self->attachDynamicObject(*ode_obj_params);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"dyn::IDynamicObject");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'attachDynamicObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: detachDynamicObject of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_detachDynamicObject00
static int tolua_MyLuaBind_scn_ISceneNode_detachDynamicObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'detachDynamicObject'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->detachDynamicObject();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'detachDynamicObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDynamicObject of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getDynamicObject00
static int tolua_MyLuaBind_scn_ISceneNode_getDynamicObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDynamicObject'",NULL);
#endif
 {
  dyn::IDynamicObject* tolua_ret = (dyn::IDynamicObject*)  self->getDynamicObject();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"dyn::IDynamicObject");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDynamicObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: attachGameNode of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_attachGameNode00
static int tolua_MyLuaBind_scn_ISceneNode_attachGameNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  game::SGameNodeParams* game_node_params = ((game::SGameNodeParams*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'attachGameNode'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->attachGameNode(*game_node_params);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'attachGameNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: detachGameNode of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_detachGameNode00
static int tolua_MyLuaBind_scn_ISceneNode_detachGameNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'detachGameNode'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->detachGameNode();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'detachGameNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameNode of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getGameNode00
static int tolua_MyLuaBind_scn_ISceneNode_getGameNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameNode'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->getGameNode();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: attachImposter of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_attachImposter00
static int tolua_MyLuaBind_scn_ISceneNode_attachImposter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SImposterCreationParameters",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  const scn::SImposterCreationParameters* creation_params = ((const scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,2,0));
  const scn::SImposterParameters* params = ((const scn::SImposterParameters*)  tolua_tousertype(tolua_S,3,0));
  bool recreate_if_exists = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'attachImposter'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->attachImposter(*creation_params,*params,recreate_if_exists);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'attachImposter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: attachImposter of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_attachImposter01
static int tolua_MyLuaBind_scn_ISceneNode_attachImposter01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const scn::SImposterCreationParameters",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* imposter = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  const scn::SImposterCreationParameters* creat_params = ((const scn::SImposterCreationParameters*)  tolua_tousertype(tolua_S,3,0));
  const scn::SImposterParameters* params = ((const scn::SImposterParameters*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'attachImposter'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->attachImposter(imposter,*creat_params,*params);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_ISceneNode_attachImposter00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: detachImposter of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_detachImposter00
static int tolua_MyLuaBind_scn_ISceneNode_detachImposter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'detachImposter'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->detachImposter();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'detachImposter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getImposter of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getImposter00
static int tolua_MyLuaBind_scn_ISceneNode_getImposter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getImposter'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getImposter();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getImposter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSceneNodeType of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getSceneNodeType00
static int tolua_MyLuaBind_scn_ISceneNode_getSceneNodeType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSceneNodeType'",NULL);
#endif
 {
  scn::E_SCENE_NODE_TYPE tolua_ret = (scn::E_SCENE_NODE_TYPE)  self->getSceneNodeType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneNodeType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCamera of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getCamera00
static int tolua_MyLuaBind_scn_ISceneNode_getCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCamera'",NULL);
#endif
 {
  scn::ICameraSceneNode* tolua_ret = (scn::ICameraSceneNode*)  self->getCamera();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ICameraSceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isRendered of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_isRendered00
static int tolua_MyLuaBind_scn_ISceneNode_isRendered00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isRendered'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isRendered();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isRendered'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getImposterParameters of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getImposterParameters00
static int tolua_MyLuaBind_scn_ISceneNode_getImposterParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getImposterParameters'",NULL);
#endif
 {
  const scn::SImposterParameters* tolua_ret = (const scn::SImposterParameters*)  self->getImposterParameters();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"const scn::SImposterParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getImposterParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setImposterParameters of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setImposterParameters00
static int tolua_MyLuaBind_scn_ISceneNode_setImposterParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SImposterParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  const scn::SImposterParameters* params = ((const scn::SImposterParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setImposterParameters'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setImposterParameters(*params);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setImposterParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getImposterCreationParameters of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getImposterCreationParameters00
static int tolua_MyLuaBind_scn_ISceneNode_getImposterCreationParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getImposterCreationParameters'",NULL);
#endif
 {
  const scn::SImposterCreationParameters* tolua_ret = (const scn::SImposterCreationParameters*)  self->getImposterCreationParameters();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"const scn::SImposterCreationParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getImposterCreationParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getParameters of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getParameters00
static int tolua_MyLuaBind_scn_ISceneNode_getParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getParameters'",NULL);
#endif
 {
  scn::SSceneNodeCommonParams tolua_ret = (scn::SSceneNodeCommonParams)  self->getParameters();
 {
#ifdef __cplusplus
 void* tolua_obj = new scn::SSceneNodeCommonParams(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"scn::SSceneNodeCommonParams");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(scn::SSceneNodeCommonParams));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"scn::SSceneNodeCommonParams");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParameters of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setParameters00
static int tolua_MyLuaBind_scn_ISceneNode_setParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::SSceneNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::SSceneNodeCommonParams* params = ((scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParameters'",NULL);
#endif
 {
  self->setParameters(*params);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParameters of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setParameters01
static int tolua_MyLuaBind_scn_ISceneNode_setParameters01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::SSceneNodeParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::SSceneNodeParameters* parameters = ((scn::SSceneNodeParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParameters'",NULL);
#endif
 {
  self->setParameters(*parameters);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_scn_ISceneNode_setParameters00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParameters of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setParameters02
static int tolua_MyLuaBind_scn_ISceneNode_setParameters02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::SSceneNodeTransformation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::SSceneNodeTransformation* transformation = ((scn::SSceneNodeTransformation*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParameters'",NULL);
#endif
 {
  self->setParameters(*transformation);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_scn_ISceneNode_setParameters01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParameters of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setParameters03
static int tolua_MyLuaBind_scn_ISceneNode_setParameters03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::SSceneNodeMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::SSceneNodeMaterial* material = ((scn::SSceneNodeMaterial*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParameters'",NULL);
#endif
 {
  self->setParameters(*material);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_scn_ISceneNode_setParameters02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOccluder of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setOccluder00
static int tolua_MyLuaBind_scn_ISceneNode_setOccluder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool occluder = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOccluder'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setOccluder(occluder);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOccluder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isOccluder of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_isOccluder00
static int tolua_MyLuaBind_scn_ISceneNode_isOccluder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isOccluder'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isOccluder();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isOccluder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCullingFilter of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getCullingFilter00
static int tolua_MyLuaBind_scn_ISceneNode_getCullingFilter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCullingFilter'",NULL);
#endif
 {
  scn::E_CULLING_TESTS tolua_ret = (scn::E_CULLING_TESTS)  self->getCullingFilter();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCullingFilter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCullingFilter of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setCullingFilter00
static int tolua_MyLuaBind_scn_ISceneNode_setCullingFilter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::E_CULLING_TESTS cull_filter = ((scn::E_CULLING_TESTS) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCullingFilter'",NULL);
#endif
 {
  self->setCullingFilter(cull_filter);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCullingFilter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_set00
static int tolua_MyLuaBind_scn_ISceneNode_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* other = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->set(other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSceneCorePropertiesXMLString of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getSceneCorePropertiesXMLString00
static int tolua_MyLuaBind_scn_ISceneNode_getSceneCorePropertiesXMLString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSceneCorePropertiesXMLString'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getSceneCorePropertiesXMLString();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneCorePropertiesXMLString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationsCount of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getAnimationsCount00
static int tolua_MyLuaBind_scn_ISceneNode_getAnimationsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getAnimationsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentAnimation of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setCurrentAnimation00
static int tolua_MyLuaBind_scn_ISceneNode_setCurrentAnimation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned anim = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  float delay = ((float)  tolua_tonumber(tolua_S,3,0.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentAnimation'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setCurrentAnimation(anim,delay);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentAnimation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentAnimation of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getCurrentAnimation00
static int tolua_MyLuaBind_scn_ISceneNode_getCurrentAnimation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentAnimation'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getCurrentAnimation();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentAnimation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentAnimationProgress of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_setCurrentAnimationProgress00
static int tolua_MyLuaBind_scn_ISceneNode_setCurrentAnimationProgress00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  float progress = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentAnimationProgress'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setCurrentAnimationProgress(progress);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentAnimationProgress'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentAnimationProgress of class  scn::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISceneNode_getCurrentAnimationProgress00
static int tolua_MyLuaBind_scn_ISceneNode_getCurrentAnimationProgress00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISceneNode* self = (scn::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentAnimationProgress'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getCurrentAnimationProgress();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentAnimationProgress'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  scn::ICullingSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICullingSystem_getSingleton00
static int tolua_MyLuaBind_scn_ICullingSystem_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::ICullingSystem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::ICullingSystem& tolua_ret = (scn::ICullingSystem&)  scn::ICullingSystem::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"scn::ICullingSystem");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isCull of class  scn::ICullingSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICullingSystem_isCull00
static int tolua_MyLuaBind_scn_ICullingSystem_isCull00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ICullingSystem",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ICullingSystem* self = (const scn::ICullingSystem*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isCull'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isCull(node);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isCull'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isCull of class  scn::ICullingSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICullingSystem_isCull01
static int tolua_MyLuaBind_scn_ICullingSystem_isCull01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ICullingSystem",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const scn::ICullingSystem* self = (const scn::ICullingSystem*)  tolua_tousertype(tolua_S,1,0);
  const core::aabbox3df* bb = ((const core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
  scn::E_CULLING_TESTS tests = ((scn::E_CULLING_TESTS) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isCull'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isCull(*bb,tests);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_ICullingSystem_isCull00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: isCull of class  scn::ICullingSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICullingSystem_isCull02
static int tolua_MyLuaBind_scn_ICullingSystem_isCull02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ICullingSystem",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const scn::ICullingSystem* self = (const scn::ICullingSystem*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  scn::E_CULLING_TESTS tests = ((scn::E_CULLING_TESTS) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isCull'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isCull(*pos,tests);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_ICullingSystem_isCull01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: isCull of class  scn::ICullingSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICullingSystem_isCull03
static int tolua_MyLuaBind_scn_ICullingSystem_isCull03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ICullingSystem",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const scn::ICullingSystem* self = (const scn::ICullingSystem*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* center = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  scn::E_CULLING_TESTS tests = ((scn::E_CULLING_TESTS) (int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isCull'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isCull(*center,radius,tests);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_ICullingSystem_isCull02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOccludersCount of class  scn::ICullingSystem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ICullingSystem_getOccludersCount00
static int tolua_MyLuaBind_scn_ICullingSystem_getOccludersCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ICullingSystem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ICullingSystem* self = (scn::ICullingSystem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOccludersCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getOccludersCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOccludersCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  scn::IParticleAffector */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleAffector_getType00
static int tolua_MyLuaBind_scn_IParticleAffector_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleAffector",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleAffector* self = (scn::IParticleAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'",NULL);
#endif
 {
  scn::E_PARTICLE_AFFECTOR_TYPE tolua_ret = (scn::E_PARTICLE_AFFECTOR_TYPE)  self->getType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnabled of class  scn::IParticleAffector */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleAffector_setEnabled00
static int tolua_MyLuaBind_scn_IParticleAffector_setEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleAffector",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleAffector* self = (scn::IParticleAffector*)  tolua_tousertype(tolua_S,1,0);
  bool e = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnabled'",NULL);
#endif
 {
  self->setEnabled(e);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isEnabled of class  scn::IParticleAffector */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleAffector_isEnabled00
static int tolua_MyLuaBind_scn_IParticleAffector_isEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleAffector",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleAffector* self = (scn::IParticleAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isEnabled'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isEnabled();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  scn::IParticleAffector */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleAffector_set00
static int tolua_MyLuaBind_scn_IParticleAffector_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleAffector",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::IParticleAffector",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleAffector* self = (scn::IParticleAffector*)  tolua_tousertype(tolua_S,1,0);
  scn::IParticleAffector* pa = ((scn::IParticleAffector*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->set(pa);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAffectTimeMs of class  scn::IParticleAffector */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleAffector_getAffectTimeMs00
static int tolua_MyLuaBind_scn_IParticleAffector_getAffectTimeMs00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleAffector",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleAffector* self = (scn::IParticleAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAffectTimeMs'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAffectTimeMs();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAffectTimeMs'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAffectTimeMs of class  scn::IParticleAffector */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleAffector_setAffectTimeMs00
static int tolua_MyLuaBind_scn_IParticleAffector_setAffectTimeMs00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleAffector",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleAffector* self = (scn::IParticleAffector*)  tolua_tousertype(tolua_S,1,0);
  unsigned time_ms = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAffectTimeMs'",NULL);
#endif
 {
  self->setAffectTimeMs(time_ms);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAffectTimeMs'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTargetColor of class  scn::IParticleFadeOutAffector */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleFadeOutAffector_getTargetColor00
static int tolua_MyLuaBind_scn_IParticleFadeOutAffector_getTargetColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleFadeOutAffector",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleFadeOutAffector* self = (scn::IParticleFadeOutAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTargetColor'",NULL);
#endif
 {
  img::SColor tolua_ret = (img::SColor)  self->getTargetColor();
 {
#ifdef __cplusplus
 void* tolua_obj = new img::SColor(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"img::SColor");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(img::SColor));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"img::SColor");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTargetColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTargetColor of class  scn::IParticleFadeOutAffector */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleFadeOutAffector_setTargetColor00
static int tolua_MyLuaBind_scn_IParticleFadeOutAffector_setTargetColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleFadeOutAffector",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleFadeOutAffector* self = (scn::IParticleFadeOutAffector*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* col = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTargetColor'",NULL);
#endif
 {
  self->setTargetColor(*col);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTargetColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGravity of class  scn::IParticleGravityAffector */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleGravityAffector_getGravity00
static int tolua_MyLuaBind_scn_IParticleGravityAffector_getGravity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleGravityAffector",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleGravityAffector* self = (scn::IParticleGravityAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGravity'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getGravity();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGravity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGravity of class  scn::IParticleGravityAffector */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleGravityAffector_setGravity00
static int tolua_MyLuaBind_scn_IParticleGravityAffector_setGravity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleGravityAffector",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleGravityAffector* self = (scn::IParticleGravityAffector*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* g = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGravity'",NULL);
#endif
 {
  self->setGravity(*g);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGravity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getType00
static int tolua_MyLuaBind_scn_IParticleEmitter_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'",NULL);
#endif
 {
  scn::E_PARTICLE_EMITTER_TYPE tolua_ret = (scn::E_PARTICLE_EMITTER_TYPE)  self->getType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isGlobalParticlesTransformation of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_isGlobalParticlesTransformation00
static int tolua_MyLuaBind_scn_IParticleEmitter_isGlobalParticlesTransformation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isGlobalParticlesTransformation'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isGlobalParticlesTransformation();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isGlobalParticlesTransformation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getParticleSize of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getParticleSize00
static int tolua_MyLuaBind_scn_IParticleEmitter_getParticleSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getParticleSize'",NULL);
#endif
 {
  const core::dimension2df& tolua_ret = (const core::dimension2df&)  self->getParticleSize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::dimension2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParticleSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDirection of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getDirection00
static int tolua_MyLuaBind_scn_IParticleEmitter_getDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDirection'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getDirection();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinParticlePerSecond of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getMinParticlePerSecond00
static int tolua_MyLuaBind_scn_IParticleEmitter_getMinParticlePerSecond00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinParticlePerSecond'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getMinParticlePerSecond();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinParticlePerSecond'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxParticlePerSecond of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getMaxParticlePerSecond00
static int tolua_MyLuaBind_scn_IParticleEmitter_getMaxParticlePerSecond00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxParticlePerSecond'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getMaxParticlePerSecond();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxParticlePerSecond'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinStartColor of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getMinStartColor00
static int tolua_MyLuaBind_scn_IParticleEmitter_getMinStartColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinStartColor'",NULL);
#endif
 {
  const img::SColor& tolua_ret = (const img::SColor&)  self->getMinStartColor();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const img::SColor");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinStartColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxStartColor of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getMaxStartColor00
static int tolua_MyLuaBind_scn_IParticleEmitter_getMaxStartColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxStartColor'",NULL);
#endif
 {
  const img::SColor& tolua_ret = (const img::SColor&)  self->getMaxStartColor();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const img::SColor");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxStartColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinLifeTime of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getMinLifeTime00
static int tolua_MyLuaBind_scn_IParticleEmitter_getMinLifeTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinLifeTime'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getMinLifeTime();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinLifeTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxLifeTime of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getMaxLifeTime00
static int tolua_MyLuaBind_scn_IParticleEmitter_getMaxLifeTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxLifeTime'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getMaxLifeTime();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxLifeTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxAngleDegrees of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getMaxAngleDegrees00
static int tolua_MyLuaBind_scn_IParticleEmitter_getMaxAngleDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxAngleDegrees'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getMaxAngleDegrees();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxAngleDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAppearVolume of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getAppearVolume00
static int tolua_MyLuaBind_scn_IParticleEmitter_getAppearVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAppearVolume'",NULL);
#endif
 {
  const core::aabbox3df& tolua_ret = (const core::aabbox3df&)  self->getAppearVolume();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::aabbox3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAppearVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTexture of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getTexture00
static int tolua_MyLuaBind_scn_IParticleEmitter_getTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isEnabled of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_isEnabled00
static int tolua_MyLuaBind_scn_IParticleEmitter_isEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isEnabled'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isEnabled();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGlobalParticlesTransformation of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setGlobalParticlesTransformation00
static int tolua_MyLuaBind_scn_IParticleEmitter_setGlobalParticlesTransformation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  bool value = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGlobalParticlesTransformation'",NULL);
#endif
 {
  self->setGlobalParticlesTransformation(value);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGlobalParticlesTransformation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParticleSize of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setParticleSize00
static int tolua_MyLuaBind_scn_IParticleEmitter_setParticleSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  const core::dimension2df* size = ((const core::dimension2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParticleSize'",NULL);
#endif
 {
  self->setParticleSize(*size);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setParticleSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDirection of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setDirection00
static int tolua_MyLuaBind_scn_IParticleEmitter_setDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* dir = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDirection'",NULL);
#endif
 {
  self->setDirection(*dir);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinParticlePerSecond of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setMinParticlePerSecond00
static int tolua_MyLuaBind_scn_IParticleEmitter_setMinParticlePerSecond00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  unsigned pps = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinParticlePerSecond'",NULL);
#endif
 {
  self->setMinParticlePerSecond(pps);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinParticlePerSecond'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxParticlePerSecond of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setMaxParticlePerSecond00
static int tolua_MyLuaBind_scn_IParticleEmitter_setMaxParticlePerSecond00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  unsigned pps = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxParticlePerSecond'",NULL);
#endif
 {
  self->setMaxParticlePerSecond(pps);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxParticlePerSecond'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinStartColor of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setMinStartColor00
static int tolua_MyLuaBind_scn_IParticleEmitter_setMinStartColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* col = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinStartColor'",NULL);
#endif
 {
  self->setMinStartColor(*col);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinStartColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxStartColor of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setMaxStartColor00
static int tolua_MyLuaBind_scn_IParticleEmitter_setMaxStartColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* col = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxStartColor'",NULL);
#endif
 {
  self->setMaxStartColor(*col);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxStartColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinLifeTime of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setMinLifeTime00
static int tolua_MyLuaBind_scn_IParticleEmitter_setMinLifeTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  unsigned lt = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinLifeTime'",NULL);
#endif
 {
  self->setMinLifeTime(lt);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinLifeTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxLifeTime of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setMaxLifeTime00
static int tolua_MyLuaBind_scn_IParticleEmitter_setMaxLifeTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  unsigned lt = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxLifeTime'",NULL);
#endif
 {
  self->setMaxLifeTime(lt);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxLifeTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxAngleDegrees of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setMaxAngleDegrees00
static int tolua_MyLuaBind_scn_IParticleEmitter_setMaxAngleDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  int ang = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxAngleDegrees'",NULL);
#endif
 {
  self->setMaxAngleDegrees(ang);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxAngleDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAppearVolume of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setAppearVolume00
static int tolua_MyLuaBind_scn_IParticleEmitter_setAppearVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  const core::aabbox3df* volume = ((const core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAppearVolume'",NULL);
#endif
 {
  self->setAppearVolume(*volume);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAppearVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTexture of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setTexture00
static int tolua_MyLuaBind_scn_IParticleEmitter_setTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* tex = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTexture'",NULL);
#endif
 {
  self->setTexture(tex);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnabled of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_setEnabled00
static int tolua_MyLuaBind_scn_IParticleEmitter_setEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnabled'",NULL);
#endif
 {
  self->setEnabled(enabled);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_set00
static int tolua_MyLuaBind_scn_IParticleEmitter_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  scn::IParticleEmitter* pe = ((scn::IParticleEmitter*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->set(pe);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addAffector of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_addAffector00
static int tolua_MyLuaBind_scn_IParticleEmitter_addAffector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  scn::E_PARTICLE_AFFECTOR_TYPE atype = ((scn::E_PARTICLE_AFFECTOR_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addAffector'",NULL);
#endif
 {
  scn::IParticleAffector* tolua_ret = (scn::IParticleAffector*)  self->addAffector(atype);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IParticleAffector");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addAffector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAffector of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_removeAffector00
static int tolua_MyLuaBind_scn_IParticleEmitter_removeAffector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAffector'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeAffector(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAffector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAllAffectors of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_removeAllAffectors00
static int tolua_MyLuaBind_scn_IParticleEmitter_removeAllAffectors00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAllAffectors'",NULL);
#endif
 {
  self->removeAllAffectors();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAllAffectors'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAffector of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getAffector00
static int tolua_MyLuaBind_scn_IParticleEmitter_getAffector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAffector'",NULL);
#endif
 {
  scn::IParticleAffector* tolua_ret = (scn::IParticleAffector*)  self->getAffector(idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IParticleAffector");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAffector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAffectorsCount of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getAffectorsCount00
static int tolua_MyLuaBind_scn_IParticleEmitter_getAffectorsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAffectorsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getAffectorsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAffectorsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getParticlesCount of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getParticlesCount00
static int tolua_MyLuaBind_scn_IParticleEmitter_getParticlesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getParticlesCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getParticlesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParticlesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBoundingBox of class  scn::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleEmitter_getBoundingBox00
static int tolua_MyLuaBind_scn_IParticleEmitter_getBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleEmitter* self = (scn::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBoundingBox'",NULL);
#endif
 {
  const core::aabbox3df& tolua_ret = (const core::aabbox3df&)  self->getBoundingBox();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::aabbox3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addEmitter of class  scn::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleSystemSceneNode_addEmitter00
static int tolua_MyLuaBind_scn_IParticleSystemSceneNode_addEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleSystemSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleSystemSceneNode* self = (scn::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::E_PARTICLE_EMITTER_TYPE etype = ((scn::E_PARTICLE_EMITTER_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addEmitter'",NULL);
#endif
 {
  scn::IParticleEmitter* tolua_ret = (scn::IParticleEmitter*)  self->addEmitter(etype);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IParticleEmitter");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeEmitter of class  scn::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleSystemSceneNode_removeEmitter00
static int tolua_MyLuaBind_scn_IParticleSystemSceneNode_removeEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleSystemSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleSystemSceneNode* self = (scn::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeEmitter'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeEmitter(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEmitter of class  scn::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleSystemSceneNode_getEmitter00
static int tolua_MyLuaBind_scn_IParticleSystemSceneNode_getEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleSystemSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleSystemSceneNode* self = (scn::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEmitter'",NULL);
#endif
 {
  scn::IParticleEmitter* tolua_ret = (scn::IParticleEmitter*)  self->getEmitter(idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IParticleEmitter");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEmittersCount of class  scn::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleSystemSceneNode_getEmittersCount00
static int tolua_MyLuaBind_scn_IParticleSystemSceneNode_getEmittersCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleSystemSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleSystemSceneNode* self = (scn::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEmittersCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getEmittersCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEmittersCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnabled of class  scn::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleSystemSceneNode_setEnabled00
static int tolua_MyLuaBind_scn_IParticleSystemSceneNode_setEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleSystemSceneNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleSystemSceneNode* self = (scn::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnabled'",NULL);
#endif
 {
  self->setEnabled(enabled);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getParticlesCount of class  scn::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IParticleSystemSceneNode_getParticlesCount00
static int tolua_MyLuaBind_scn_IParticleSystemSceneNode_getParticlesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IParticleSystemSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IParticleSystemSceneNode* self = (scn::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getParticlesCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getParticlesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParticlesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentAnimationFileName of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationFileName00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentAnimationFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getCurrentAnimationFileName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentAnimationFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentAnimationBeginFrame of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationBeginFrame00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationBeginFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentAnimationBeginFrame'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getCurrentAnimationBeginFrame();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentAnimationBeginFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentAnimationEndFrame of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationEndFrame00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationEndFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentAnimationEndFrame'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getCurrentAnimationEndFrame();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentAnimationEndFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentAnimationSpeed of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationSpeed00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentAnimationSpeed'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getCurrentAnimationSpeed();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentAnimationLoopMode of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationLoopMode00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationLoopMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentAnimationLoopMode'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getCurrentAnimationLoopMode();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentAnimationLoopMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentAnimationBeginFrame of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationBeginFrame00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationBeginFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned frame = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentAnimationBeginFrame'",NULL);
#endif
 {
  self->setCurrentAnimationBeginFrame(frame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentAnimationBeginFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentAnimationEndFrame of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationEndFrame00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationEndFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned frame = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentAnimationEndFrame'",NULL);
#endif
 {
  self->setCurrentAnimationEndFrame(frame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentAnimationEndFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentAnimationSpeed of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationSpeed00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float speed = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentAnimationSpeed'",NULL);
#endif
 {
  self->setCurrentAnimationSpeed(speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentAnimationLoopMode of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationLoopMode00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationLoopMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool looped = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentAnimationLoopMode'",NULL);
#endif
 {
  self->setCurrentAnimationLoopMode(looped);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentAnimationLoopMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationFileName of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationFileName00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getAnimationFileName(idx);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationBeginFrame of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationBeginFrame00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationBeginFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationBeginFrame'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAnimationBeginFrame(idx);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationBeginFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationEndFrame of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationEndFrame00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationEndFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationEndFrame'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAnimationEndFrame(idx);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationEndFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationSpeed of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationSpeed00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationSpeed'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getAnimationSpeed(idx);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationLoopMode of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationLoopMode00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationLoopMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationLoopMode'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getAnimationLoopMode(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationLoopMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationBeginFrame of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationBeginFrame00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationBeginFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned frame = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationBeginFrame'",NULL);
#endif
 {
  self->setAnimationBeginFrame(idx,frame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationBeginFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationEndFrame of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationEndFrame00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationEndFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned frame = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationEndFrame'",NULL);
#endif
 {
  self->setAnimationEndFrame(idx,frame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationEndFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationSpeed of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationSpeed00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  float speed = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationSpeed'",NULL);
#endif
 {
  self->setAnimationSpeed(idx,speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationLoopMode of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationLoopMode00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationLoopMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  bool looped = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationLoopMode'",NULL);
#endif
 {
  self->setAnimationLoopMode(idx,looped);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationLoopMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationOveralSpeed of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationOveralSpeed00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationOveralSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float speed = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationOveralSpeed'",NULL);
#endif
 {
  self->setAnimationOveralSpeed(speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationOveralSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationOveralSpeed of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationOveralSpeed00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationOveralSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationOveralSpeed'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getAnimationOveralSpeed();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationOveralSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isAnimationOveralSmooth of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_isAnimationOveralSmooth00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_isAnimationOveralSmooth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isAnimationOveralSmooth'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isAnimationOveralSmooth();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isAnimationOveralSmooth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationOveralSmooth of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationOveralSmooth00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationOveralSmooth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool flag = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationOveralSmooth'",NULL);
#endif
 {
  self->setAnimationOveralSmooth(flag);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationOveralSmooth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationOveralFramesCount of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationOveralFramesCount00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationOveralFramesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationOveralFramesCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAnimationOveralFramesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationOveralFramesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimatedMesh of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimatedMesh00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimatedMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::E_LOD_LEVEL lodlevel = ((scn::E_LOD_LEVEL) (int)  tolua_tonumber(tolua_S,2,scn::ELL_LOD_NEAREST));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimatedMesh'",NULL);
#endif
 {
  scn::IAnimatedMesh* tolua_ret = (scn::IAnimatedMesh*)  self->getAnimatedMesh(lodlevel);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IAnimatedMesh");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimatedMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimatedMesh of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimatedMesh00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimatedMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::IAnimatedMesh* amesh = ((scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,2,0));
  scn::E_LOD_LEVEL lodlevel = ((scn::E_LOD_LEVEL) (int)  tolua_tonumber(tolua_S,3,scn::ELL_LOD_NEAREST));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimatedMesh'",NULL);
#endif
 {
  self->setAnimatedMesh(amesh,lodlevel);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimatedMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMesh of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getMesh00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::E_LOD_LEVEL lodlevel = ((scn::E_LOD_LEVEL) (int)  tolua_tonumber(tolua_S,2,scn::ELL_LOD_NEAREST));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMesh'",NULL);
#endif
 {
  scn::IMesh* tolua_ret = (scn::IMesh*)  self->getMesh(lodlevel);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IMesh");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMesh of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getMesh01
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getMesh01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float frame = ((float)  tolua_tonumber(tolua_S,2,0));
  scn::E_LOD_LEVEL lodlevel = ((scn::E_LOD_LEVEL) (int)  tolua_tonumber(tolua_S,3,scn::ELL_LOD_NEAREST));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMesh'",NULL);
#endif
 {
  scn::IMesh* tolua_ret = (scn::IMesh*)  self->getMesh(frame,lodlevel);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IMesh");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getMesh00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: attachToBone of class  scn::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_attachToBone00
static int tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_attachToBone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMeshSceneNode* self = (scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  const char* bone_name = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'attachToBone'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->attachToBone(node,bone_name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'attachToBone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBoundingBox of class  scn::IMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMesh_getBoundingBox00
static int tolua_MyLuaBind_scn_IMesh_getBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::IMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::IMesh* self = (const scn::IMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBoundingBox'",NULL);
#endif
 {
  const core::aabbox3df& tolua_ret = (const core::aabbox3df&)  self->getBoundingBox();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::aabbox3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMeshType of class  scn::IMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IMesh_getMeshType00
static int tolua_MyLuaBind_scn_IMesh_getMeshType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::IMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::IMesh* self = (const scn::IMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMeshType'",NULL);
#endif
 {
  scn::E_MESH_TYPE tolua_ret = (scn::E_MESH_TYPE)  self->getMeshType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMeshType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Animation of class  scn::SAnimationState */
#ifndef TOLUA_DISABLE_tolua_get_scn__SAnimationState_Animation
static int tolua_get_scn__SAnimationState_Animation(lua_State* tolua_S)
{
  scn::SAnimationState* self = (scn::SAnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Animation'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Animation);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Animation of class  scn::SAnimationState */
#ifndef TOLUA_DISABLE_tolua_set_scn__SAnimationState_Animation
static int tolua_set_scn__SAnimationState_Animation(lua_State* tolua_S)
{
  scn::SAnimationState* self = (scn::SAnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Animation'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Animation = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: AnimationTime of class  scn::SAnimationState */
#ifndef TOLUA_DISABLE_tolua_get_scn__SAnimationState_AnimationTime
static int tolua_get_scn__SAnimationState_AnimationTime(lua_State* tolua_S)
{
  scn::SAnimationState* self = (scn::SAnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AnimationTime'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->AnimationTime);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: AnimationTime of class  scn::SAnimationState */
#ifndef TOLUA_DISABLE_tolua_set_scn__SAnimationState_AnimationTime
static int tolua_set_scn__SAnimationState_AnimationTime(lua_State* tolua_S)
{
  scn::SAnimationState* self = (scn::SAnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AnimationTime'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AnimationTime = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: AnimationTimeSec of class  scn::SAnimationState */
#ifndef TOLUA_DISABLE_tolua_get_scn__SAnimationState_AnimationTimeSec
static int tolua_get_scn__SAnimationState_AnimationTimeSec(lua_State* tolua_S)
{
  scn::SAnimationState* self = (scn::SAnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AnimationTimeSec'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->AnimationTimeSec);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: AnimationTimeSec of class  scn::SAnimationState */
#ifndef TOLUA_DISABLE_tolua_set_scn__SAnimationState_AnimationTimeSec
static int tolua_set_scn__SAnimationState_AnimationTimeSec(lua_State* tolua_S)
{
  scn::SAnimationState* self = (scn::SAnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AnimationTimeSec'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AnimationTimeSec = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: AnimationDurationSec of class  scn::SAnimationState */
#ifndef TOLUA_DISABLE_tolua_get_scn__SAnimationState_AnimationDurationSec
static int tolua_get_scn__SAnimationState_AnimationDurationSec(lua_State* tolua_S)
{
  scn::SAnimationState* self = (scn::SAnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AnimationDurationSec'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->AnimationDurationSec);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: AnimationDurationSec of class  scn::SAnimationState */
#ifndef TOLUA_DISABLE_tolua_set_scn__SAnimationState_AnimationDurationSec
static int tolua_set_scn__SAnimationState_AnimationDurationSec(lua_State* tolua_S)
{
  scn::SAnimationState* self = (scn::SAnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AnimationDurationSec'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AnimationDurationSec = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Looped of class  scn::SAnimationState */
#ifndef TOLUA_DISABLE_tolua_get_scn__SAnimationState_Looped
static int tolua_get_scn__SAnimationState_Looped(lua_State* tolua_S)
{
  scn::SAnimationState* self = (scn::SAnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Looped'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->Looped);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Looped of class  scn::SAnimationState */
#ifndef TOLUA_DISABLE_tolua_set_scn__SAnimationState_Looped
static int tolua_set_scn__SAnimationState_Looped(lua_State* tolua_S)
{
  scn::SAnimationState* self = (scn::SAnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Looped'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Looped = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMesh of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getMesh00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMesh'",NULL);
#endif
 {
  scn::IMesh* tolua_ret = (scn::IMesh*)  self->getMesh();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IMesh");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMesh of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getMesh01
static int tolua_MyLuaBind_scn_IAnimatedMesh_getMesh01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  float frame = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMesh'",NULL);
#endif
 {
  scn::IMesh* tolua_ret = (scn::IMesh*)  self->getMesh(frame);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::IMesh");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_IAnimatedMesh_getMesh00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBoundingBox of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getBoundingBox00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::IAnimatedMesh* self = (const scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBoundingBox'",NULL);
#endif
 {
  const core::aabbox3df& tolua_ret = (const core::aabbox3df&)  self->getBoundingBox();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::aabbox3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: recalculateBoundingBox of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_recalculateBoundingBox00
static int tolua_MyLuaBind_scn_IAnimatedMesh_recalculateBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'recalculateBoundingBox'",NULL);
#endif
 {
  self->recalculateBoundingBox();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'recalculateBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimatedMeshType of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimatedMeshType00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimatedMeshType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::IAnimatedMesh* self = (const scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimatedMeshType'",NULL);
#endif
 {
  scn::E_MESH_TYPE tolua_ret = (scn::E_MESH_TYPE)  self->getAnimatedMeshType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimatedMeshType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOveralFramesCount of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getOveralFramesCount00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getOveralFramesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOveralFramesCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getOveralFramesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOveralFramesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationFramesCount of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationFramesCount00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationFramesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationFramesCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAnimationFramesCount(idx);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationFramesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationsCount of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationsCount00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationsCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAnimationsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rescaleAnimatedMeshNormals of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_rescaleAnimatedMeshNormals00
static int tolua_MyLuaBind_scn_IAnimatedMesh_rescaleAnimatedMeshNormals00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df* newScale = ((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rescaleAnimatedMeshNormals'",NULL);
#endif
 {
  self->rescaleAnimatedMeshNormals(*newScale);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rescaleAnimatedMeshNormals'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentAnimation of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_setCurrentAnimation00
static int tolua_MyLuaBind_scn_IAnimatedMesh_setCurrentAnimation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  float delay = ((float)  tolua_tonumber(tolua_S,3,0.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentAnimation'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setCurrentAnimation(idx,delay);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentAnimation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentAnimationIndex of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getCurrentAnimationIndex00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getCurrentAnimationIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentAnimationIndex'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getCurrentAnimationIndex();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentAnimationIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startRegisteringAnimations of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_startRegisteringAnimations00
static int tolua_MyLuaBind_scn_IAnimatedMesh_startRegisteringAnimations00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'startRegisteringAnimations'",NULL);
#endif
 {
  self->startRegisteringAnimations();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startRegisteringAnimations'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerAnimation of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation00
static int tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned start_frame = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned end_frame = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  float speed = ((float)  tolua_tonumber(tolua_S,4,0));
  bool looped = ((bool)  tolua_toboolean(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerAnimation'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->registerAnimation(start_frame,end_frame,speed,looped);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerAnimation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerAnimation of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation01
static int tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
  float speed = ((float)  tolua_tonumber(tolua_S,3,0));
  bool looped = ((bool)  tolua_toboolean(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerAnimation'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->registerAnimation(filename,speed,looped);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: unregisterAnimation of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_unregisterAnimation00
static int tolua_MyLuaBind_scn_IAnimatedMesh_unregisterAnimation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'unregisterAnimation'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->unregisterAnimation(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'unregisterAnimation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: swapAnimations of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_swapAnimations00
static int tolua_MyLuaBind_scn_IAnimatedMesh_swapAnimations00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx1 = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned idx2 = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'swapAnimations'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->swapAnimations(idx1,idx2);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'swapAnimations'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: endRegisteringAnimations of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_endRegisteringAnimations00
static int tolua_MyLuaBind_scn_IAnimatedMesh_endRegisteringAnimations00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'endRegisteringAnimations'",NULL);
#endif
 {
  self->endRegisteringAnimations();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'endRegisteringAnimations'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationFileName of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationFileName00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getAnimationFileName(idx);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationBeginFrame of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationBeginFrame00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationBeginFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationBeginFrame'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAnimationBeginFrame(idx);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationBeginFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationEndFrame of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationEndFrame00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationEndFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationEndFrame'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAnimationEndFrame(idx);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationEndFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationSpeed of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationSpeed00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationSpeed'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getAnimationSpeed(idx);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationLoopMode of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationLoopMode00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationLoopMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationLoopMode'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getAnimationLoopMode(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationLoopMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationBeginFrame of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationBeginFrame00
static int tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationBeginFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned frame = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationBeginFrame'",NULL);
#endif
 {
  self->setAnimationBeginFrame(idx,frame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationBeginFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationEndFrame of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationEndFrame00
static int tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationEndFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned frame = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationEndFrame'",NULL);
#endif
 {
  self->setAnimationEndFrame(idx,frame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationEndFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationSpeed of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationSpeed00
static int tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  float speed = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationSpeed'",NULL);
#endif
 {
  self->setAnimationSpeed(idx,speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationLoopMode of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationLoopMode00
static int tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationLoopMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  bool looped = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationLoopMode'",NULL);
#endif
 {
  self->setAnimationLoopMode(idx,looped);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationLoopMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationOveralSpeed of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationOveralSpeed00
static int tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationOveralSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  float speed = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationOveralSpeed'",NULL);
#endif
 {
  self->setAnimationOveralSpeed(speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationOveralSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationOveralSpeed of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationOveralSpeed00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationOveralSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationOveralSpeed'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getAnimationOveralSpeed();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationOveralSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationOveralSmooth of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationOveralSmooth00
static int tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationOveralSmooth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  bool flag = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationOveralSmooth'",NULL);
#endif
 {
  self->setAnimationOveralSmooth(flag);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationOveralSmooth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isAnimationOveralSmooth of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_isAnimationOveralSmooth00
static int tolua_MyLuaBind_scn_IAnimatedMesh_isAnimationOveralSmooth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isAnimationOveralSmooth'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isAnimationOveralSmooth();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isAnimationOveralSmooth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationTimeSec of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationTimeSec00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationTimeSec00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationTimeSec'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getAnimationTimeSec();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationTimeSec'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationDurationSec of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationDurationSec00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationDurationSec00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationDurationSec'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getAnimationDurationSec();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationDurationSec'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationFPS of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationFPS00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationFPS00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationFPS'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getAnimationFPS();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationFPS'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationFPS of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationFPS00
static int tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationFPS00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  int fps = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationFPS'",NULL);
#endif
 {
  self->setAnimationFPS(fps);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationFPS'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationState of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationState00
static int tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::SAnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  scn::SAnimationState* ani_state = ((scn::SAnimationState*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationState'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getAnimationState(*ani_state);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateMesh of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_updateMesh00
static int tolua_MyLuaBind_scn_IAnimatedMesh_updateMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  int delta_ms = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateMesh'",NULL);
#endif
 {
  self->updateMesh(delta_ms);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationState of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationState00
static int tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SAnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  const scn::SAnimationState* animstate = ((const scn::SAnimationState*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationState'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setAnimationState(*animstate);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isInterpolateAnimation of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_isInterpolateAnimation00
static int tolua_MyLuaBind_scn_IAnimatedMesh_isInterpolateAnimation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IAnimatedMesh* self = (scn::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isInterpolateAnimation'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isInterpolateAnimation();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isInterpolateAnimation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startRegisteringAnimations of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_startRegisteringAnimations01
static int tolua_MyLuaBind_scn_IAnimatedMesh_startRegisteringAnimations01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::IAnimatedMeshSceneNode* node = ((scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
 {
  scn::IAnimatedMesh::startRegisteringAnimations(node);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_scn_IAnimatedMesh_startRegisteringAnimations00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerAnimation of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation02
static int tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,6,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::IAnimatedMeshSceneNode* node = ((scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
  unsigned start_frame = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned end_frame = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  float speed = ((float)  tolua_tonumber(tolua_S,5,0));
  bool looped = ((bool)  tolua_toboolean(tolua_S,6,0));
 {
  bool tolua_ret = (bool)  scn::IAnimatedMesh::registerAnimation(node,start_frame,end_frame,speed,looped);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerAnimation of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation03
static int tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::IAnimatedMeshSceneNode* node = ((scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
  const char* filename = ((const char*)  tolua_tostring(tolua_S,3,0));
  float speed = ((float)  tolua_tonumber(tolua_S,4,0));
  bool looped = ((bool)  tolua_toboolean(tolua_S,5,0));
 {
  bool tolua_ret = (bool)  scn::IAnimatedMesh::registerAnimation(node,filename,speed,looped);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: unregisterAnimation of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_unregisterAnimation01
static int tolua_MyLuaBind_scn_IAnimatedMesh_unregisterAnimation01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::IAnimatedMeshSceneNode* node = ((scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,3,0));
 {
  bool tolua_ret = (bool)  scn::IAnimatedMesh::unregisterAnimation(node,idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_IAnimatedMesh_unregisterAnimation00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: swapAnimations of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_swapAnimations01
static int tolua_MyLuaBind_scn_IAnimatedMesh_swapAnimations01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::IAnimatedMeshSceneNode* node = ((scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
  unsigned idx1 = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned idx2 = ((unsigned)  tolua_tonumber(tolua_S,4,0));
 {
  bool tolua_ret = (bool)  scn::IAnimatedMesh::swapAnimations(node,idx1,idx2);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_scn_IAnimatedMesh_swapAnimations00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: endRegisteringAnimations of class  scn::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IAnimatedMesh_endRegisteringAnimations01
static int tolua_MyLuaBind_scn_IAnimatedMesh_endRegisteringAnimations01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::IAnimatedMesh",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::IAnimatedMeshSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  scn::IAnimatedMeshSceneNode* node = ((scn::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
 {
  scn::IAnimatedMesh::endRegisteringAnimations(node);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_scn_IAnimatedMesh_endRegisteringAnimations00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SBillboardParams_new00
static int tolua_MyLuaBind_scn_SBillboardParams_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SBillboardParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SBillboardParams* tolua_ret = (scn::SBillboardParams*)  new scn::SBillboardParams();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::SBillboardParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SBillboardParams_new00_local
static int tolua_MyLuaBind_scn_SBillboardParams_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SBillboardParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SBillboardParams* tolua_ret = (scn::SBillboardParams*)  new scn::SBillboardParams();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"scn::SBillboardParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SBillboardParams_delete00
static int tolua_MyLuaBind_scn_SBillboardParams_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::SBillboardParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SBillboardParams_set00
static int tolua_MyLuaBind_scn_SBillboardParams_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::SBillboardParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SBillboardParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
  const scn::SBillboardParams* other = ((const scn::SBillboardParams*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*other);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Size of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_get_scn__SBillboardParams_Size
static int tolua_get_scn__SBillboardParams_Size(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Size'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Size,"core::dimension2df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Size of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_set_scn__SBillboardParams_Size
static int tolua_set_scn__SBillboardParams_Size(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Size'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::dimension2df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Size = *((core::dimension2df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: FrameResolution of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_get_scn__SBillboardParams_FrameResolution
static int tolua_get_scn__SBillboardParams_FrameResolution(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FrameResolution'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->FrameResolution,"core::dimension2di");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: FrameResolution of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_set_scn__SBillboardParams_FrameResolution
static int tolua_set_scn__SBillboardParams_FrameResolution(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FrameResolution'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::dimension2di",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->FrameResolution = *((core::dimension2di*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: AxisAligmentType of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_get_scn__SBillboardParams_AxisAligmentType
static int tolua_get_scn__SBillboardParams_AxisAligmentType(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AxisAligmentType'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->AxisAligmentType);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: AxisAligmentType of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_set_scn__SBillboardParams_AxisAligmentType
static int tolua_set_scn__SBillboardParams_AxisAligmentType(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AxisAligmentType'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AxisAligmentType = ((scn::E_AXIS_ALIGMENT_TYPE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: AlignAxis of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_get_scn__SBillboardParams_AlignAxis
static int tolua_get_scn__SBillboardParams_AlignAxis(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AlignAxis'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->AlignAxis,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: AlignAxis of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_set_scn__SBillboardParams_AlignAxis
static int tolua_set_scn__SBillboardParams_AlignAxis(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AlignAxis'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AlignAxis = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: UpAxis of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_get_scn__SBillboardParams_UpAxis
static int tolua_get_scn__SBillboardParams_UpAxis(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UpAxis'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->UpAxis,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: UpAxis of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_set_scn__SBillboardParams_UpAxis
static int tolua_set_scn__SBillboardParams_UpAxis(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UpAxis'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->UpAxis = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: FlipWidth of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_get_scn__SBillboardParams_FlipWidth
static int tolua_get_scn__SBillboardParams_FlipWidth(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FlipWidth'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->FlipWidth);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: FlipWidth of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_set_scn__SBillboardParams_FlipWidth
static int tolua_set_scn__SBillboardParams_FlipWidth(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FlipWidth'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->FlipWidth = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: FlipHeight of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_get_scn__SBillboardParams_FlipHeight
static int tolua_get_scn__SBillboardParams_FlipHeight(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FlipHeight'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->FlipHeight);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: FlipHeight of class  scn::SBillboardParams */
#ifndef TOLUA_DISABLE_tolua_set_scn__SBillboardParams_FlipHeight
static int tolua_set_scn__SBillboardParams_FlipHeight(lua_State* tolua_S)
{
  scn::SBillboardParams* self = (scn::SBillboardParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FlipHeight'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->FlipHeight = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: TimePerFrame of class  scn::SAnimationFrameParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SAnimationFrameParameters_TimePerFrame
static int tolua_get_scn__SAnimationFrameParameters_TimePerFrame(lua_State* tolua_S)
{
  scn::SAnimationFrameParameters* self = (scn::SAnimationFrameParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TimePerFrame'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->TimePerFrame);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: TimePerFrame of class  scn::SAnimationFrameParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SAnimationFrameParameters_TimePerFrame
static int tolua_set_scn__SAnimationFrameParameters_TimePerFrame(lua_State* tolua_S)
{
  scn::SAnimationFrameParameters* self = (scn::SAnimationFrameParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TimePerFrame'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TimePerFrame = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Loop of class  scn::SAnimationFrameParameters */
#ifndef TOLUA_DISABLE_tolua_get_scn__SAnimationFrameParameters_Loop
static int tolua_get_scn__SAnimationFrameParameters_Loop(lua_State* tolua_S)
{
  scn::SAnimationFrameParameters* self = (scn::SAnimationFrameParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Loop'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->Loop);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Loop of class  scn::SAnimationFrameParameters */
#ifndef TOLUA_DISABLE_tolua_set_scn__SAnimationFrameParameters_Loop
static int tolua_set_scn__SAnimationFrameParameters_Loop(lua_State* tolua_S)
{
  scn::SAnimationFrameParameters* self = (scn::SAnimationFrameParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Loop'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Loop = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  scn::SAnimationFrame */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SAnimationFrame_new00
static int tolua_MyLuaBind_scn_SAnimationFrame_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SAnimationFrame",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SAnimationFrame* tolua_ret = (scn::SAnimationFrame*)  new scn::SAnimationFrame();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::SAnimationFrame");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  scn::SAnimationFrame */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SAnimationFrame_new00_local
static int tolua_MyLuaBind_scn_SAnimationFrame_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scn::SAnimationFrame",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scn::SAnimationFrame* tolua_ret = (scn::SAnimationFrame*)  new scn::SAnimationFrame();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"scn::SAnimationFrame");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  scn::SAnimationFrame */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SAnimationFrame_delete00
static int tolua_MyLuaBind_scn_SAnimationFrame_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::SAnimationFrame",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::SAnimationFrame* self = (scn::SAnimationFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  scn::SAnimationFrame */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SAnimationFrame_set00
static int tolua_MyLuaBind_scn_SAnimationFrame_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::SAnimationFrame",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SAnimationFrame",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::SAnimationFrame* self = (scn::SAnimationFrame*)  tolua_tousertype(tolua_S,1,0);
  const scn::SAnimationFrame* other = ((const scn::SAnimationFrame*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*other);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Texture of class  scn::SAnimationFrame */
#ifndef TOLUA_DISABLE_tolua_get_scn__SAnimationFrame_Texture_ptr
static int tolua_get_scn__SAnimationFrame_Texture_ptr(lua_State* tolua_S)
{
  scn::SAnimationFrame* self = (scn::SAnimationFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Texture'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)self->Texture,"vid::ITexture");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Texture of class  scn::SAnimationFrame */
#ifndef TOLUA_DISABLE_tolua_set_scn__SAnimationFrame_Texture_ptr
static int tolua_set_scn__SAnimationFrame_Texture_ptr(lua_State* tolua_S)
{
  scn::SAnimationFrame* self = (scn::SAnimationFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Texture'",NULL);
 if (!tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Texture = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: TCoords of class  scn::SAnimationFrame */
#ifndef TOLUA_DISABLE_tolua_get_scn__SAnimationFrame_TCoords
static int tolua_get_scn__SAnimationFrame_TCoords(lua_State* tolua_S)
{
  scn::SAnimationFrame* self = (scn::SAnimationFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TCoords'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->TCoords,"core::rectf");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: TCoords of class  scn::SAnimationFrame */
#ifndef TOLUA_DISABLE_tolua_set_scn__SAnimationFrame_TCoords
static int tolua_set_scn__SAnimationFrame_TCoords(lua_State* tolua_S)
{
  scn::SAnimationFrame* self = (scn::SAnimationFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TCoords'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::rectf",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TCoords = *((core::rectf*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: TOffset of class  scn::SAnimationFrame */
#ifndef TOLUA_DISABLE_tolua_get_scn__SAnimationFrame_TOffset
static int tolua_get_scn__SAnimationFrame_TOffset(lua_State* tolua_S)
{
  scn::SAnimationFrame* self = (scn::SAnimationFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TOffset'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->TOffset,"core::vector2df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: TOffset of class  scn::SAnimationFrame */
#ifndef TOLUA_DISABLE_tolua_set_scn__SAnimationFrame_TOffset
static int tolua_set_scn__SAnimationFrame_TOffset(lua_State* tolua_S)
{
  scn::SAnimationFrame* self = (scn::SAnimationFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TOffset'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector2df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TOffset = *((core::vector2df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSize of class  scn::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IBillboardSceneNode_setSize00
static int tolua_MyLuaBind_scn_IBillboardSceneNode_setSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IBillboardSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::dimension2df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IBillboardSceneNode* self = (scn::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const core::dimension2df* size = ((const core::dimension2df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSize'",NULL);
#endif
 {
  self->setSize(*size);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSize of class  scn::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IBillboardSceneNode_getSize00
static int tolua_MyLuaBind_scn_IBillboardSceneNode_getSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IBillboardSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IBillboardSceneNode* self = (scn::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSize'",NULL);
#endif
 {
  const core::dimension2df& tolua_ret = (const core::dimension2df&)  self->getSize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::dimension2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBillboardParameters of class  scn::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IBillboardSceneNode_getBillboardParameters00
static int tolua_MyLuaBind_scn_IBillboardSceneNode_getBillboardParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IBillboardSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IBillboardSceneNode* self = (scn::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBillboardParameters'",NULL);
#endif
 {
  const scn::SBillboardParams& tolua_ret = (const scn::SBillboardParams&)  self->getBillboardParameters();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const scn::SBillboardParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBillboardParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBillboardParameters of class  scn::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IBillboardSceneNode_setBillboardParameters00
static int tolua_MyLuaBind_scn_IBillboardSceneNode_setBillboardParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IBillboardSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const scn::SBillboardParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IBillboardSceneNode* self = (scn::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const scn::SBillboardParams* bill_params = ((const scn::SBillboardParams*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBillboardParameters'",NULL);
#endif
 {
  self->setBillboardParameters(*bill_params);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBillboardParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationDirectionSetFrame of class  scn::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationDirectionSetFrame00
static int tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationDirectionSetFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IBillboardSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IBillboardSceneNode* self = (scn::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned animation_idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned direction_idx = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned frame_idx = ((unsigned)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationDirectionSetFrame'",NULL);
#endif
 {
  const scn::SAnimationFrame& tolua_ret = (const scn::SAnimationFrame&)  self->getAnimationDirectionSetFrame(animation_idx,direction_idx,frame_idx);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const scn::SAnimationFrame");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationDirectionSetFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationFramesParameters of class  scn::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationFramesParameters00
static int tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationFramesParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IBillboardSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IBillboardSceneNode* self = (scn::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned animation_idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationFramesParameters'",NULL);
#endif
 {
  const scn::SAnimationFrameParameters& tolua_ret = (const scn::SAnimationFrameParameters&)  self->getAnimationFramesParameters(animation_idx);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const scn::SAnimationFrameParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationFramesParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationDirectionSetsCount of class  scn::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationDirectionSetsCount00
static int tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationDirectionSetsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IBillboardSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IBillboardSceneNode* self = (scn::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned animation_idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationDirectionSetsCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAnimationDirectionSetsCount(animation_idx);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationDirectionSetsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationDirectionSetFramesCount of class  scn::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationDirectionSetFramesCount00
static int tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationDirectionSetFramesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::IBillboardSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::IBillboardSceneNode* self = (scn::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned animation_idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned direction_idx = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationDirectionSetFramesCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAnimationDirectionSetFramesCount(animation_idx,direction_idx);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationDirectionSetFramesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTexture of class  scn::SLens */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_SLens_getTexture00
static int tolua_MyLuaBind_scn_SLens_getTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::SLens",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::SLens* self = (const scn::SLens*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: spaceConst of class  scn::SLens */
#ifndef TOLUA_DISABLE_tolua_get_scn__SLens_spaceConst
static int tolua_get_scn__SLens_spaceConst(lua_State* tolua_S)
{
  scn::SLens* self = (scn::SLens*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'spaceConst'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->spaceConst);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: spaceConst of class  scn::SLens */
#ifndef TOLUA_DISABLE_tolua_set_scn__SLens_spaceConst
static int tolua_set_scn__SLens_spaceConst(lua_State* tolua_S)
{
  scn::SLens* self = (scn::SLens*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'spaceConst'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->spaceConst = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLensCount of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_getLensCount00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_getLensCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILensFlareSceneNode* self = (scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLensCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getLensCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLensCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLens of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_setLens00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_setLens00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILensFlareSceneNode* self = (scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  vid::ITexture* tex = ((vid::ITexture*)  tolua_tousertype(tolua_S,3,0));
  float space = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLens'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setLens(idx,tex,space);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLens'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addLens of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_addLens00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_addLens00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILensFlareSceneNode* self = (scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* tex = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
  float space = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addLens'",NULL);
#endif
 {
  self->addLens(tex,space);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addLens'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLens of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_getLens00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_getLens00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ILensFlareSceneNode* self = (const scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLens'",NULL);
#endif
 {
  const scn::SLens& tolua_ret = (const scn::SLens&)  self->getLens(idx);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const scn::SLens");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLens'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeLens of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_removeLens00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_removeLens00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILensFlareSceneNode* self = (scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeLens'",NULL);
#endif
 {
  self->removeLens(idx);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeLens'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearLens of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_clearLens00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_clearLens00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILensFlareSceneNode* self = (scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearLens'",NULL);
#endif
 {
  self->clearLens();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearLens'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCorona of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_setCorona00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_setCorona00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILensFlareSceneNode* self = (scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* tex = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCorona'",NULL);
#endif
 {
  self->setCorona(tex);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCorona'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCorona of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_getCorona00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_getCorona00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ILensFlareSceneNode* self = (const scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCorona'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getCorona();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCorona'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColor of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_setColor00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_setColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILensFlareSceneNode* self = (scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColor'",NULL);
#endif
 {
  self->setColor(*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getColor of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_getColor00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_getColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILensFlareSceneNode* self = (scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getColor'",NULL);
#endif
 {
  const img::SColor& tolua_ret = (const img::SColor&)  self->getColor();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const img::SColor");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEtalonScreenSize of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_setEtalonScreenSize00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_setEtalonScreenSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILensFlareSceneNode* self = (scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned width = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned height = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEtalonScreenSize'",NULL);
#endif
 {
  self->setEtalonScreenSize(width,height);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEtalonScreenSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEtalonScreenSize of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_getEtalonScreenSize00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_getEtalonScreenSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ILensFlareSceneNode* self = (const scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEtalonScreenSize'",NULL);
#endif
 {
  const core::dimension2di& tolua_ret = (const core::dimension2di&)  self->getEtalonScreenSize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::dimension2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEtalonScreenSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScreenPosition of class  scn::ILensFlareSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILensFlareSceneNode_getScreenPosition00
static int tolua_MyLuaBind_scn_ILensFlareSceneNode_getScreenPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ILensFlareSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ILensFlareSceneNode* self = (const scn::ILensFlareSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScreenPosition'",NULL);
#endif
 {
  const core::position2di& tolua_ret = (const core::position2di&)  self->getScreenPosition();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::position2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScreenPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLightParameters of class  scn::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILightSceneNode_getLightParameters00
static int tolua_MyLuaBind_scn_ILightSceneNode_getLightParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::ILightSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::ILightSceneNode* self = (const scn::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLightParameters'",NULL);
#endif
 {
  const vid::SLight& tolua_ret = (const vid::SLight&)  self->getLightParameters();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const vid::SLight");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLightParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLightParameters of class  scn::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILightSceneNode_setLightParameters00
static int tolua_MyLuaBind_scn_ILightSceneNode_setLightParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILightSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SLight",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILightSceneNode* self = (scn::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const vid::SLight* lparams = ((const vid::SLight*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLightParameters'",NULL);
#endif
 {
  self->setLightParameters(*lparams);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLightParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLightedVolumeCenterOffset of class  scn::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILightSceneNode_getLightedVolumeCenterOffset00
static int tolua_MyLuaBind_scn_ILightSceneNode_getLightedVolumeCenterOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILightSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILightSceneNode* self = (scn::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLightedVolumeCenterOffset'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getLightedVolumeCenterOffset();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLightedVolumeCenterOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLightedVolumeCenterOffset of class  scn::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILightSceneNode_setLightedVolumeCenterOffset00
static int tolua_MyLuaBind_scn_ILightSceneNode_setLightedVolumeCenterOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILightSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILightSceneNode* self = (scn::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* offset = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLightedVolumeCenterOffset'",NULL);
#endif
 {
  self->setLightedVolumeCenterOffset(*offset);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLightedVolumeCenterOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLightedVolumeSizeChange of class  scn::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILightSceneNode_getLightedVolumeSizeChange00
static int tolua_MyLuaBind_scn_ILightSceneNode_getLightedVolumeSizeChange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILightSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILightSceneNode* self = (scn::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLightedVolumeSizeChange'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getLightedVolumeSizeChange();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLightedVolumeSizeChange'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLightedVolumeSizeChange of class  scn::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ILightSceneNode_setLightedVolumeSizeChange00
static int tolua_MyLuaBind_scn_ILightSceneNode_setLightedVolumeSizeChange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ILightSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ILightSceneNode* self = (scn::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* change = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLightedVolumeSizeChange'",NULL);
#endif
 {
  self->setLightedVolumeSizeChange(*change);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLightedVolumeSizeChange'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSides of class  scn::ISkyBoxSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISkyBoxSceneNode_setSides00
static int tolua_MyLuaBind_scn_ISkyBoxSceneNode_setSides00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISkyBoxSceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"vid::ITexture",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"vid::ITexture",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,5,"vid::ITexture",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,6,"vid::ITexture",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,7,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISkyBoxSceneNode* self = (scn::ISkyBoxSceneNode*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* top = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
  vid::ITexture* bottom = ((vid::ITexture*)  tolua_tousertype(tolua_S,3,0));
  vid::ITexture* left = ((vid::ITexture*)  tolua_tousertype(tolua_S,4,0));
  vid::ITexture* right = ((vid::ITexture*)  tolua_tousertype(tolua_S,5,0));
  vid::ITexture* front = ((vid::ITexture*)  tolua_tousertype(tolua_S,6,0));
  vid::ITexture* back = ((vid::ITexture*)  tolua_tousertype(tolua_S,7,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSides'",NULL);
#endif
 {
  self->setSides(top,bottom,left,right,front,back);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSides'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTopSideTexture of class  scn::ISkyBoxSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISkyBoxSceneNode_getTopSideTexture00
static int tolua_MyLuaBind_scn_ISkyBoxSceneNode_getTopSideTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISkyBoxSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISkyBoxSceneNode* self = (scn::ISkyBoxSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTopSideTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getTopSideTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTopSideTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBottomSideTexture of class  scn::ISkyBoxSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISkyBoxSceneNode_getBottomSideTexture00
static int tolua_MyLuaBind_scn_ISkyBoxSceneNode_getBottomSideTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISkyBoxSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISkyBoxSceneNode* self = (scn::ISkyBoxSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBottomSideTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getBottomSideTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBottomSideTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLeftSideTexture of class  scn::ISkyBoxSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISkyBoxSceneNode_getLeftSideTexture00
static int tolua_MyLuaBind_scn_ISkyBoxSceneNode_getLeftSideTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISkyBoxSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISkyBoxSceneNode* self = (scn::ISkyBoxSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLeftSideTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getLeftSideTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLeftSideTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRightSideTexture of class  scn::ISkyBoxSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISkyBoxSceneNode_getRightSideTexture00
static int tolua_MyLuaBind_scn_ISkyBoxSceneNode_getRightSideTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISkyBoxSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISkyBoxSceneNode* self = (scn::ISkyBoxSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRightSideTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getRightSideTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRightSideTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFrontSideTexture of class  scn::ISkyBoxSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISkyBoxSceneNode_getFrontSideTexture00
static int tolua_MyLuaBind_scn_ISkyBoxSceneNode_getFrontSideTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISkyBoxSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISkyBoxSceneNode* self = (scn::ISkyBoxSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFrontSideTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getFrontSideTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFrontSideTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBackSideTexture of class  scn::ISkyBoxSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ISkyBoxSceneNode_getBackSideTexture00
static int tolua_MyLuaBind_scn_ISkyBoxSceneNode_getBackSideTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ISkyBoxSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ISkyBoxSceneNode* self = (scn::ISkyBoxSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBackSideTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getBackSideTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBackSideTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSplatMapFileName of class  scn::STileSet */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_STileSet_getSplatMapFileName00
static int tolua_MyLuaBind_scn_STileSet_getSplatMapFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::STileSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::STileSet* self = (const scn::STileSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSplatMapFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getSplatMapFileName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSplatMapFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTile0Texture of class  scn::STileSet */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_STileSet_getTile0Texture00
static int tolua_MyLuaBind_scn_STileSet_getTile0Texture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::STileSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::STileSet* self = (const scn::STileSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTile0Texture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getTile0Texture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTile0Texture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTile1Texture of class  scn::STileSet */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_STileSet_getTile1Texture00
static int tolua_MyLuaBind_scn_STileSet_getTile1Texture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::STileSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::STileSet* self = (const scn::STileSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTile1Texture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getTile1Texture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTile1Texture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTile2Texture of class  scn::STileSet */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_STileSet_getTile2Texture00
static int tolua_MyLuaBind_scn_STileSet_getTile2Texture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const scn::STileSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const scn::STileSet* self = (const scn::STileSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTile2Texture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getTile2Texture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTile2Texture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaps of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_setMaps00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_setMaps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const char* hmap_filename = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* fogmap_filename = ((const char*)  tolua_tostring(tolua_S,3,0));
  float gridPointSpacing = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaps'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setMaps(hmap_filename,fogmap_filename,gridPointSpacing);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHeightMapFileName of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightMapFileName00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightMapFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHeightMapFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getHeightMapFileName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHeightMapFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGridPointSpacing of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getGridPointSpacing00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getGridPointSpacing00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGridPointSpacing'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getGridPointSpacing();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGridPointSpacing'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHeightScale of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightScale00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHeightScale'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getHeightScale();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHeightScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setHeightScale of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_setHeightScale00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_setHeightScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float scale = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setHeightScale'",NULL);
#endif
 {
  self->setHeightScale(scale);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setHeightScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addTileSet of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_addTileSet00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_addTileSet00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isstring(tolua_S,4,0,&tolua_err) ||
 !tolua_isstring(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const char* tile0tex_file_name = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* tile1tex_file_name = ((const char*)  tolua_tostring(tolua_S,3,0));
  const char* tile2tex_file_name = ((const char*)  tolua_tostring(tolua_S,4,0));
  const char* splatmap_file_name = ((const char*)  tolua_tostring(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addTileSet'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->addTileSet(tile0tex_file_name,tile1tex_file_name,tile2tex_file_name,splatmap_file_name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addTileSet'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTileSet of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_setTileSet00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_setTileSet00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isstring(tolua_S,4,0,&tolua_err) ||
 !tolua_isstring(tolua_S,5,0,&tolua_err) ||
 !tolua_isstring(tolua_S,6,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const char* tile0tex_file_name = ((const char*)  tolua_tostring(tolua_S,3,0));
  const char* tile1tex_file_name = ((const char*)  tolua_tostring(tolua_S,4,0));
  const char* tile2tex_file_name = ((const char*)  tolua_tostring(tolua_S,5,0));
  const char* splatmap_file_name = ((const char*)  tolua_tostring(tolua_S,6,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTileSet'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setTileSet(idx,tile0tex_file_name,tile1tex_file_name,tile2tex_file_name,splatmap_file_name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTileSet'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeTileSet of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_removeTileSet00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_removeTileSet00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeTileSet'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeTileSet(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeTileSet'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTileSet of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getTileSet00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getTileSet00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTileSet'",NULL);
#endif
 {
  const scn::STileSet& tolua_ret = (const scn::STileSet&)  self->getTileSet(idx);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const scn::STileSet");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTileSet'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTileSetsCount of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getTileSetsCount00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getTileSetsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTileSetsCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getTileSetsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTileSetsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHeightFieldSize of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightFieldSize00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightFieldSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHeightFieldSize'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getHeightFieldSize();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHeightFieldSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCellPosition of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getCellPosition00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getCellPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned i = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned j = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCellPosition'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getCellPosition(i,j);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCellPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCellHeight of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getCellHeight00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getCellHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned i = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned j = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCellHeight'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getCellHeight(i,j);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCellHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHeight of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getHeight00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float z = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHeight'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getHeight(x,z);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNormal of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getNormal00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getNormal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float z = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNormal'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getNormal(x,z);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNormal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTileRepeatNumber of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_setTileRepeatNumber00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_setTileRepeatNumber00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned value = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTileRepeatNumber'",NULL);
#endif
 {
  self->setTileRepeatNumber(value);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTileRepeatNumber'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTileRepeatNumber of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getTileRepeatNumber00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getTileRepeatNumber00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTileRepeatNumber'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getTileRepeatNumber();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTileRepeatNumber'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHeightMapTexture of class  scn::ITerrainSceneNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightMapTexture00
static int tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightMapTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scn::ITerrainSceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scn::ITerrainSceneNode* self = (scn::ITerrainSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHeightMapTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getHeightMapTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHeightMapTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addWeapon of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_addWeapon00
static int tolua_MyLuaBind_game_IGameInventory_addWeapon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNodeWeapon* weapon = ((game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,2,0));
  int number = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addWeapon'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->addWeapon(weapon,number);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addWeapon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWeapon of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_getWeapon00
static int tolua_MyLuaBind_game_IGameInventory_getWeapon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
  int number = ((int)  tolua_tonumber(tolua_S,2,0));
  int idx = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWeapon'",NULL);
#endif
 {
  game::IGameNodeWeapon* tolua_ret = (game::IGameNodeWeapon*)  self->getWeapon(number,idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNodeWeapon");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWeapon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWeaponsCount of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_getWeaponsCount00
static int tolua_MyLuaBind_game_IGameInventory_getWeaponsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWeaponsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getWeaponsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWeaponsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWeaponsSubCount of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_getWeaponsSubCount00
static int tolua_MyLuaBind_game_IGameInventory_getWeaponsSubCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
  int number = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWeaponsSubCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getWeaponsSubCount(number);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWeaponsSubCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeWeapon of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_removeWeapon00
static int tolua_MyLuaBind_game_IGameInventory_removeWeapon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNodeWeapon* weapon = ((game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeWeapon'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeWeapon(weapon);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeWeapon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addItem of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_addItem00
static int tolua_MyLuaBind_game_IGameInventory_addItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNodeItem* item = ((game::IGameNodeItem*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addItem'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->addItem(item);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addItem'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getItem of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_getItem00
static int tolua_MyLuaBind_game_IGameInventory_getItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getItem'",NULL);
#endif
 {
  game::IGameNodeItem* tolua_ret = (game::IGameNodeItem*)  self->getItem(idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNodeItem");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getItem'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getItemsCount of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_getItemsCount00
static int tolua_MyLuaBind_game_IGameInventory_getItemsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getItemsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getItemsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getItemsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeItem of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_removeItem00
static int tolua_MyLuaBind_game_IGameInventory_removeItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNodeItem* item = ((game::IGameNodeItem*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeItem'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeItem(item);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeItem'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addObject of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_addObject00
static int tolua_MyLuaBind_game_IGameInventory_addObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNode* gnode = ((game::IGameNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addObject'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->addObject(gnode);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getObject of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_getObject00
static int tolua_MyLuaBind_game_IGameInventory_getObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getObject'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->getObject(idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getObjectsCount of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_getObjectsCount00
static int tolua_MyLuaBind_game_IGameInventory_getObjectsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getObjectsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getObjectsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getObjectsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeObject of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_removeObject00
static int tolua_MyLuaBind_game_IGameInventory_removeObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNode* gnode = ((game::IGameNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeObject'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeObject(gnode);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAllObjects of class  game::IGameInventory */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameInventory_removeAllObjects00
static int tolua_MyLuaBind_game_IGameInventory_removeAllObjects00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameInventory* self = (game::IGameInventory*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAllObjects'",NULL);
#endif
 {
  self->removeAllObjects();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAllObjects'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SSceneProps_new00
static int tolua_MyLuaBind_game_SSceneProps_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SSceneProps* tolua_ret = (game::SSceneProps*)  new game::SSceneProps();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SSceneProps");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SSceneProps_new00_local
static int tolua_MyLuaBind_game_SSceneProps_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SSceneProps* tolua_ret = (game::SSceneProps*)  new game::SSceneProps();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SSceneProps");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SSceneProps_new01
static int tolua_MyLuaBind_game_SSceneProps_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SSceneProps",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SSceneProps* p = ((const game::SSceneProps*)  tolua_tousertype(tolua_S,2,0));
 {
  game::SSceneProps* tolua_ret = (game::SSceneProps*)  new game::SSceneProps(*p);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SSceneProps");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SSceneProps_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SSceneProps_new01_local
static int tolua_MyLuaBind_game_SSceneProps_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SSceneProps",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SSceneProps* p = ((const game::SSceneProps*)  tolua_tousertype(tolua_S,2,0));
 {
  game::SSceneProps* tolua_ret = (game::SSceneProps*)  new game::SSceneProps(*p);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SSceneProps");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SSceneProps_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  game::SSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SSceneProps_delete00
static int tolua_MyLuaBind_game_SSceneProps_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::SSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::SSceneProps* self = (game::SSceneProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  game::SSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SSceneProps_set00
static int tolua_MyLuaBind_game_SSceneProps_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::SSceneProps",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::SSceneProps* self = (game::SSceneProps*)  tolua_tousertype(tolua_S,1,0);
  const game::SSceneProps* p = ((const game::SSceneProps*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: LODDistances of class  game::SSceneProps */
#ifndef TOLUA_DISABLE_tolua_get_MyLuaBind_game_SSceneProps_LODDistances
static int tolua_get_MyLuaBind_game_SSceneProps_LODDistances(lua_State* tolua_S)
{
 int tolua_index;
  game::SSceneProps* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (game::SSceneProps*)  lua_touserdata(tolua_S,-1);
#ifndef TOLUA_RELEASE
 {
 tolua_Error tolua_err;
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in array indexing.",&tolua_err);
 }
#endif
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
#ifndef TOLUA_RELEASE
 if (tolua_index<0 || tolua_index>=scn::E_LOD_LEVEL_COUNT)
 tolua_error(tolua_S,"array indexing out of range.",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->LODDistances[tolua_index]);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: LODDistances of class  game::SSceneProps */
#ifndef TOLUA_DISABLE_tolua_set_MyLuaBind_game_SSceneProps_LODDistances
static int tolua_set_MyLuaBind_game_SSceneProps_LODDistances(lua_State* tolua_S)
{
 int tolua_index;
  game::SSceneProps* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (game::SSceneProps*)  lua_touserdata(tolua_S,-1);
#ifndef TOLUA_RELEASE
 {
 tolua_Error tolua_err;
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in array indexing.",&tolua_err);
 }
#endif
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
#ifndef TOLUA_RELEASE
 if (tolua_index<0 || tolua_index>=scn::E_LOD_LEVEL_COUNT)
 tolua_error(tolua_S,"array indexing out of range.",NULL);
#endif
  self->LODDistances[tolua_index] = ((float)  tolua_tonumber(tolua_S,3,0));
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SVideoProps_new00
static int tolua_MyLuaBind_game_SVideoProps_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SVideoProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SVideoProps* tolua_ret = (game::SVideoProps*)  new game::SVideoProps();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SVideoProps");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SVideoProps_new00_local
static int tolua_MyLuaBind_game_SVideoProps_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SVideoProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SVideoProps* tolua_ret = (game::SVideoProps*)  new game::SVideoProps();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SVideoProps");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SVideoProps_new01
static int tolua_MyLuaBind_game_SVideoProps_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SVideoProps",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SVideoProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SVideoProps* p = ((const game::SVideoProps*)  tolua_tousertype(tolua_S,2,0));
 {
  game::SVideoProps* tolua_ret = (game::SVideoProps*)  new game::SVideoProps(*p);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SVideoProps");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SVideoProps_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SVideoProps_new01_local
static int tolua_MyLuaBind_game_SVideoProps_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SVideoProps",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SVideoProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SVideoProps* p = ((const game::SVideoProps*)  tolua_tousertype(tolua_S,2,0));
 {
  game::SVideoProps* tolua_ret = (game::SVideoProps*)  new game::SVideoProps(*p);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SVideoProps");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SVideoProps_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SVideoProps_delete00
static int tolua_MyLuaBind_game_SVideoProps_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::SVideoProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SVideoProps_set00
static int tolua_MyLuaBind_game_SVideoProps_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::SVideoProps",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SVideoProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
  const game::SVideoProps* p = ((const game::SVideoProps*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ShadowColor of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_get_game__SVideoProps_ShadowColor
static int tolua_get_game__SVideoProps_ShadowColor(lua_State* tolua_S)
{
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShadowColor'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->ShadowColor,"img::SColor");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: ShadowColor of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_set_game__SVideoProps_ShadowColor
static int tolua_set_game__SVideoProps_ShadowColor(lua_State* tolua_S)
{
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShadowColor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"img::SColor",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ShadowColor = *((img::SColor*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DistanceFog of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_get_game__SVideoProps_DistanceFog
static int tolua_get_game__SVideoProps_DistanceFog(lua_State* tolua_S)
{
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DistanceFog'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->DistanceFog,"vid::SFog");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: DistanceFog of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_set_game__SVideoProps_DistanceFog
static int tolua_set_game__SVideoProps_DistanceFog(lua_State* tolua_S)
{
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DistanceFog'",NULL);
 if (!tolua_isusertype(tolua_S,2,"vid::SFog",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DistanceFog = *((vid::SFog*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: GroundFogColor of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_get_game__SVideoProps_GroundFogColor
static int tolua_get_game__SVideoProps_GroundFogColor(lua_State* tolua_S)
{
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'GroundFogColor'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->GroundFogColor,"img::SColor");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: GroundFogColor of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_set_game__SVideoProps_GroundFogColor
static int tolua_set_game__SVideoProps_GroundFogColor(lua_State* tolua_S)
{
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'GroundFogColor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"img::SColor",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->GroundFogColor = *((img::SColor*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: GlobalAmbientColor of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_get_game__SVideoProps_GlobalAmbientColor
static int tolua_get_game__SVideoProps_GlobalAmbientColor(lua_State* tolua_S)
{
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'GlobalAmbientColor'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->GlobalAmbientColor,"img::SColorf");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: GlobalAmbientColor of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_set_game__SVideoProps_GlobalAmbientColor
static int tolua_set_game__SVideoProps_GlobalAmbientColor(lua_State* tolua_S)
{
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'GlobalAmbientColor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"img::SColorf",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->GlobalAmbientColor = *((img::SColorf*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: GlobalLight of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_get_game__SVideoProps_GlobalLight
static int tolua_get_game__SVideoProps_GlobalLight(lua_State* tolua_S)
{
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'GlobalLight'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->GlobalLight,"vid::SLight");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: GlobalLight of class  game::SVideoProps */
#ifndef TOLUA_DISABLE_tolua_set_game__SVideoProps_GlobalLight
static int tolua_set_game__SVideoProps_GlobalLight(lua_State* tolua_S)
{
  game::SVideoProps* self = (game::SVideoProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'GlobalLight'",NULL);
 if (!tolua_isusertype(tolua_S,2,"vid::SLight",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->GlobalLight = *((vid::SLight*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SGameSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameSceneProps_new00
static int tolua_MyLuaBind_game_SGameSceneProps_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SGameSceneProps* tolua_ret = (game::SGameSceneProps*)  new game::SGameSceneProps();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SGameSceneProps");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SGameSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameSceneProps_new00_local
static int tolua_MyLuaBind_game_SGameSceneProps_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SGameSceneProps* tolua_ret = (game::SGameSceneProps*)  new game::SGameSceneProps();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SGameSceneProps");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SGameSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameSceneProps_new01
static int tolua_MyLuaBind_game_SGameSceneProps_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameSceneProps",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SGameSceneProps* p = ((const game::SGameSceneProps*)  tolua_tousertype(tolua_S,2,0));
 {
  game::SGameSceneProps* tolua_ret = (game::SGameSceneProps*)  new game::SGameSceneProps(*p);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SGameSceneProps");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SGameSceneProps_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SGameSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameSceneProps_new01_local
static int tolua_MyLuaBind_game_SGameSceneProps_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameSceneProps",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SGameSceneProps* p = ((const game::SGameSceneProps*)  tolua_tousertype(tolua_S,2,0));
 {
  game::SGameSceneProps* tolua_ret = (game::SGameSceneProps*)  new game::SGameSceneProps(*p);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SGameSceneProps");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SGameSceneProps_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  game::SGameSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameSceneProps_delete00
static int tolua_MyLuaBind_game_SGameSceneProps_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::SGameSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::SGameSceneProps* self = (game::SGameSceneProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  game::SGameSceneProps */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameSceneProps_set00
static int tolua_MyLuaBind_game_SGameSceneProps_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::SGameSceneProps",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::SGameSceneProps* self = (game::SGameSceneProps*)  tolua_tousertype(tolua_S,1,0);
  const game::SGameSceneProps* p = ((const game::SGameSceneProps*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Scene of class  game::SGameSceneProps */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameSceneProps_Scene
static int tolua_get_game__SGameSceneProps_Scene(lua_State* tolua_S)
{
  game::SGameSceneProps* self = (game::SGameSceneProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Scene'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Scene,"game::SSceneProps");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Scene of class  game::SGameSceneProps */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameSceneProps_Scene
static int tolua_set_game__SGameSceneProps_Scene(lua_State* tolua_S)
{
  game::SGameSceneProps* self = (game::SGameSceneProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Scene'",NULL);
 if (!tolua_isusertype(tolua_S,2,"game::SSceneProps",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Scene = *((game::SSceneProps*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Video of class  game::SGameSceneProps */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameSceneProps_Video
static int tolua_get_game__SGameSceneProps_Video(lua_State* tolua_S)
{
  game::SGameSceneProps* self = (game::SGameSceneProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Video'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Video,"game::SVideoProps");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Video of class  game::SGameSceneProps */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameSceneProps_Video
static int tolua_set_game__SGameSceneProps_Video(lua_State* tolua_S)
{
  game::SGameSceneProps* self = (game::SGameSceneProps*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Video'",NULL);
 if (!tolua_isusertype(tolua_S,2,"game::SVideoProps",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Video = *((game::SVideoProps*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getSingleton00
static int tolua_MyLuaBind_game_IGameManager_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::IGameManager& tolua_ret = (game::IGameManager&)  game::IGameManager::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"game::IGameManager");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameNode of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameNode00
static int tolua_MyLuaBind_game_IGameManager_getGameNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameNode'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->getGameNode(idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameNodesCount of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameNodesCount00
static int tolua_MyLuaBind_game_IGameManager_getGameNodesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameNodesCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getGameNodesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameNodesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getActiveGameNodesCount of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getActiveGameNodesCount00
static int tolua_MyLuaBind_game_IGameManager_getActiveGameNodesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getActiveGameNodesCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getActiveGameNodesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getActiveGameNodesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameNode of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameNode01
static int tolua_MyLuaBind_game_IGameManager_getGameNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::E_GAME_NODE_TYPE gntype = ((game::E_GAME_NODE_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  int idx = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameNode'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->getGameNode(gntype,idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_IGameManager_getGameNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameNodesCount of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameNodesCount01
static int tolua_MyLuaBind_game_IGameManager_getGameNodesCount01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::E_GAME_NODE_TYPE gntype = ((game::E_GAME_NODE_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameNodesCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getGameNodesCount(gntype);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_IGameManager_getGameNodesCount00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameNodeType of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameNodeType00
static int tolua_MyLuaBind_game_IGameManager_getGameNodeType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNode* game_node = ((game::IGameNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameNodeType'",NULL);
#endif
 {
  game::E_GAME_NODE_TYPE tolua_ret = (game::E_GAME_NODE_TYPE)  self->getGameNodeType(game_node);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameNodeType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameNodeIndex of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameNodeIndex00
static int tolua_MyLuaBind_game_IGameManager_getGameNodeIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNode* game_node = ((game::IGameNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameNodeIndex'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getGameNodeIndex(game_node);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameNodeIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: applyGameNodeCommonParams of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_applyGameNodeCommonParams00
static int tolua_MyLuaBind_game_IGameManager_applyGameNodeCommonParams00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  game::SGameNodeCommonParams* node_params = ((game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'applyGameNodeCommonParams'",NULL);
#endif
 {
  self->applyGameNodeCommonParams(node,*node_params);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'applyGameNodeCommonParams'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addGameUnitsFormation of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_addGameUnitsFormation00
static int tolua_MyLuaBind_game_IGameManager_addGameUnitsFormation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::dimension2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  core::dimension2di dim = *((core::dimension2di*)  tolua_tousertype(tolua_S,2,0));
  int formation_id = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addGameUnitsFormation'",NULL);
#endif
 {
  game::IGameUnitsFormation* tolua_ret = (game::IGameUnitsFormation*)  self->addGameUnitsFormation(dim,formation_id);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameUnitsFormation");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addGameUnitsFormation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameUnitsFormationFromID of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameUnitsFormationFromID00
static int tolua_MyLuaBind_game_IGameManager_getGameUnitsFormationFromID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  int formation_id = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameUnitsFormationFromID'",NULL);
#endif
 {
  game::IGameUnitsFormation* tolua_ret = (game::IGameUnitsFormation*)  self->getGameUnitsFormationFromID(formation_id);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameUnitsFormation");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameUnitsFormationFromID'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addGameNode of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_addGameNode00
static int tolua_MyLuaBind_game_IGameManager_addGameNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::SGameNodeCommonParams* node_params = ((game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,2,0));
  scn::ISceneNode* scene_node = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addGameNode'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->addGameNode(*node_params,scene_node);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addGameNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createGameNode of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_createGameNode00
static int tolua_MyLuaBind_game_IGameManager_createGameNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::SGameNodeCommonParams* node_params = ((game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,2,0));
  bool log_info = ((bool)  tolua_toboolean(tolua_S,3,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createGameNode'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->createGameNode(*node_params,log_info);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createGameNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: cloneGameNode of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_cloneGameNode00
static int tolua_MyLuaBind_game_IGameManager_cloneGameNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNode* game_node = ((game::IGameNode*)  tolua_tousertype(tolua_S,2,0));
  bool log_info = ((bool)  tolua_toboolean(tolua_S,3,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'cloneGameNode'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->cloneGameNode(game_node,log_info);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'cloneGameNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reloadGameNode of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_reloadGameNode00
static int tolua_MyLuaBind_game_IGameManager_reloadGameNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNode* gn = ((game::IGameNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reloadGameNode'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->reloadGameNode(gn);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reloadGameNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadGameNode of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_loadGameNode00
static int tolua_MyLuaBind_game_IGameManager_loadGameNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  const char* fname = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadGameNode'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->loadGameNode(fname);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadGameNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadGameNode of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_loadGameNode01
static int tolua_MyLuaBind_game_IGameManager_loadGameNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::E_GAME_NODE_TYPE gntype = ((game::E_GAME_NODE_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  const char* fname = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadGameNode'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->loadGameNode(gntype,fname);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_IGameManager_loadGameNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadGameNode of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_loadGameNode02
static int tolua_MyLuaBind_game_IGameManager_loadGameNode02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::SGameNodeCommonParams* node_params = ((game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,2,0));
  const char* fname = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadGameNode'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->loadGameNode(*node_params,fname);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_IGameManager_loadGameNode01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadGameSceneLater of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_loadGameSceneLater00
static int tolua_MyLuaBind_game_IGameManager_loadGameSceneLater00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadGameSceneLater'",NULL);
#endif
 {
  self->loadGameSceneLater(filename);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadGameSceneLater'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadGameScene of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_loadGameScene00
static int tolua_MyLuaBind_game_IGameManager_loadGameScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadGameScene'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->loadGameScene(filename);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadGameScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: saveGameScene of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_saveGameScene00
static int tolua_MyLuaBind_game_IGameManager_saveGameScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,NULL));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'saveGameScene'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->saveGameScene(filename);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'saveGameScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearGameScene of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_clearGameScene00
static int tolua_MyLuaBind_game_IGameManager_clearGameScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  bool clear_resourses = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearGameScene'",NULL);
#endif
 {
  self->clearGameScene(clear_resourses);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearGameScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameSceneFileName of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameSceneFileName00
static int tolua_MyLuaBind_game_IGameManager_getGameSceneFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameSceneFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getGameSceneFileName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameSceneFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentMainPlayer of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_setCurrentMainPlayer00
static int tolua_MyLuaBind_game_IGameManager_setCurrentMainPlayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentMainPlayer'",NULL);
#endif
 {
  game::IGameNodeMainPlayer* tolua_ret = (game::IGameNodeMainPlayer*)  self->setCurrentMainPlayer(idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNodeMainPlayer");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentMainPlayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMainPlayersCount of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getMainPlayersCount00
static int tolua_MyLuaBind_game_IGameManager_getMainPlayersCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMainPlayersCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getMainPlayersCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMainPlayersCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMainPlayerGameNode of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getMainPlayerGameNode00
static int tolua_MyLuaBind_game_IGameManager_getMainPlayerGameNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMainPlayerGameNode'",NULL);
#endif
 {
  game::IGameNodeMainPlayer* tolua_ret = (game::IGameNodeMainPlayer*)  self->getMainPlayerGameNode();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNodeMainPlayer");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMainPlayerGameNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMainPlayerSceneNode of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getMainPlayerSceneNode00
static int tolua_MyLuaBind_game_IGameManager_getMainPlayerSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMainPlayerSceneNode'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getMainPlayerSceneNode();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMainPlayerSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMainPlayerDynamicObject of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getMainPlayerDynamicObject00
static int tolua_MyLuaBind_game_IGameManager_getMainPlayerDynamicObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMainPlayerDynamicObject'",NULL);
#endif
 {
  dyn::IDynamicObject* tolua_ret = (dyn::IDynamicObject*)  self->getMainPlayerDynamicObject();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"dyn::IDynamicObject");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMainPlayerDynamicObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMainPlayerCamera of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getMainPlayerCamera00
static int tolua_MyLuaBind_game_IGameManager_getMainPlayerCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMainPlayerCamera'",NULL);
#endif
 {
  scn::ICameraSceneNode* tolua_ret = (scn::ICameraSceneNode*)  self->getMainPlayerCamera();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ICameraSceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMainPlayerCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameNodeFromScreenCoordinates of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameNodeFromScreenCoordinates00
static int tolua_MyLuaBind_game_IGameManager_getGameNodeFromScreenCoordinates00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  const core::position2di* scr_pos = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameNodeFromScreenCoordinates'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->getGameNodeFromScreenCoordinates(*scr_pos);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameNodeFromScreenCoordinates'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: stopGame of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_stopGame00
static int tolua_MyLuaBind_game_IGameManager_stopGame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'stopGame'",NULL);
#endif
 {
  self->stopGame();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'stopGame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startGame of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_startGame00
static int tolua_MyLuaBind_game_IGameManager_startGame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'startGame'",NULL);
#endif
 {
  self->startGame();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startGame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: doGame of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_doGame00
static int tolua_MyLuaBind_game_IGameManager_doGame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'doGame'",NULL);
#endif
 {
  self->doGame();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'doGame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: preRenderFrame of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_preRenderFrame00
static int tolua_MyLuaBind_game_IGameManager_preRenderFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'preRenderFrame'",NULL);
#endif
 {
  self->preRenderFrame();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'preRenderFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: postRenderFrame of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_postRenderFrame00
static int tolua_MyLuaBind_game_IGameManager_postRenderFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'postRenderFrame'",NULL);
#endif
 {
  self->postRenderFrame();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'postRenderFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: showMessageBox of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_showMessageBox00
static int tolua_MyLuaBind_game_IGameManager_showMessageBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,1,&tolua_err) ||
 !tolua_isstring(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  bool show = ((bool)  tolua_toboolean(tolua_S,2,0));
  const char* caption = ((const char*)  tolua_tostring(tolua_S,3,""));
  const char* message = ((const char*)  tolua_tostring(tolua_S,4,""));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'showMessageBox'",NULL);
#endif
 {
  self->showMessageBox(show,caption,message);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'showMessageBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDynamicPS of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getDynamicPS00
static int tolua_MyLuaBind_game_IGameManager_getDynamicPS00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDynamicPS'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getDynamicPS();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDynamicPS'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGamePS of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGamePS00
static int tolua_MyLuaBind_game_IGameManager_getGamePS00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGamePS'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getGamePS();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGamePS'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScriptPS of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getScriptPS00
static int tolua_MyLuaBind_game_IGameManager_getScriptPS00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScriptPS'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getScriptPS();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScriptPS'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isGameStarted of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_isGameStarted00
static int tolua_MyLuaBind_game_IGameManager_isGameStarted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isGameStarted'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isGameStarted();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isGameStarted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGameScriptFileName of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_setGameScriptFileName00
static int tolua_MyLuaBind_game_IGameManager_setGameScriptFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  core::stringc* scr_fname = ((core::stringc*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGameScriptFileName'",NULL);
#endif
 {
  self->setGameScriptFileName(*scr_fname);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGameScriptFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameScriptFileName of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameScriptFileName00
static int tolua_MyLuaBind_game_IGameManager_getGameScriptFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameScriptFileName'",NULL);
#endif
 {
  core::stringc tolua_ret = (core::stringc)  self->getGameScriptFileName();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::stringc(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::stringc");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::stringc));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::stringc");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameScriptFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addSoundTrack of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_addSoundTrack00
static int tolua_MyLuaBind_game_IGameManager_addSoundTrack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::stringc",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  core::stringc* snd_fname = ((core::stringc*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addSoundTrack'",NULL);
#endif
 {
  self->addSoundTrack(*snd_fname);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addSoundTrack'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAllSoundTracks of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_removeAllSoundTracks00
static int tolua_MyLuaBind_game_IGameManager_removeAllSoundTracks00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAllSoundTracks'",NULL);
#endif
 {
  self->removeAllSoundTracks();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAllSoundTracks'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSoundTrack of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getSoundTrack00
static int tolua_MyLuaBind_game_IGameManager_getSoundTrack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSoundTrack'",NULL);
#endif
 {
  mm::ISound* tolua_ret = (mm::ISound*)  self->getSoundTrack(idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"mm::ISound");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSoundTrack'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSoundTracksCount of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getSoundTracksCount00
static int tolua_MyLuaBind_game_IGameManager_getSoundTracksCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSoundTracksCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getSoundTracksCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSoundTracksCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: playSoundTrack of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_playSoundTrack00
static int tolua_MyLuaBind_game_IGameManager_playSoundTrack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'playSoundTrack'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->playSoundTrack(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'playSoundTrack'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: pauseSoundTrack of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_pauseSoundTrack00
static int tolua_MyLuaBind_game_IGameManager_pauseSoundTrack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'pauseSoundTrack'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->pauseSoundTrack(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'pauseSoundTrack'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: stopAllSoundTracks of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_stopAllSoundTracks00
static int tolua_MyLuaBind_game_IGameManager_stopAllSoundTracks00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'stopAllSoundTracks'",NULL);
#endif
 {
  self->stopAllSoundTracks();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'stopAllSoundTracks'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSoundTracksVolume of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_setSoundTracksVolume00
static int tolua_MyLuaBind_game_IGameManager_setSoundTracksVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  float volume = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSoundTracksVolume'",NULL);
#endif
 {
  self->setSoundTracksVolume(volume);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSoundTracksVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSoundTracksVolume of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getSoundTracksVolume00
static int tolua_MyLuaBind_game_IGameManager_getSoundTracksVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSoundTracksVolume'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getSoundTracksVolume();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSoundTracksVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSoundEffectsVolume of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_setSoundEffectsVolume00
static int tolua_MyLuaBind_game_IGameManager_setSoundEffectsVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  float volume = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSoundEffectsVolume'",NULL);
#endif
 {
  self->setSoundEffectsVolume(volume);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSoundEffectsVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSoundEffectsVolume of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getSoundEffectsVolume00
static int tolua_MyLuaBind_game_IGameManager_getSoundEffectsVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSoundEffectsVolume'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getSoundEffectsVolume();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSoundEffectsVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameNodeParams of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameNodeParams00
static int tolua_MyLuaBind_game_IGameManager_getGameNodeParams00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNode* gnode = ((game::IGameNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameNodeParams'",NULL);
#endif
 {
  game::SGameNodeParams tolua_ret = (game::SGameNodeParams)  self->getGameNodeParams(gnode);
 {
#ifdef __cplusplus
 void* tolua_obj = new game::SGameNodeParams(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"game::SGameNodeParams");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(game::SGameNodeParams));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"game::SGameNodeParams");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameNodeParams'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: applyGameNodeParams of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_applyGameNodeParams00
static int tolua_MyLuaBind_game_IGameManager_applyGameNodeParams00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNode* gnode = ((game::IGameNode*)  tolua_tousertype(tolua_S,2,0));
  game::SGameNodeParams* params = ((game::SGameNodeParams*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'applyGameNodeParams'",NULL);
#endif
 {
  self->applyGameNodeParams(gnode,*params);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'applyGameNodeParams'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createPathFindTask of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_createPathFindTask00
static int tolua_MyLuaBind_game_IGameManager_createPathFindTask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createPathFindTask'",NULL);
#endif
 {
  game::IPathFindTask* tolua_ret = (game::IPathFindTask*)  self->createPathFindTask();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IPathFindTask");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createPathFindTask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameSceneProps of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_getGameSceneProps00
static int tolua_MyLuaBind_game_IGameManager_getGameSceneProps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameSceneProps'",NULL);
#endif
 {
  const game::SGameSceneProps& tolua_ret = (const game::SGameSceneProps&)  self->getGameSceneProps();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const game::SGameSceneProps");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameSceneProps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGameSceneProps of class  game::IGameManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameManager_setGameSceneProps00
static int tolua_MyLuaBind_game_IGameManager_setGameSceneProps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameManager",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameSceneProps",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameManager* self = (game::IGameManager*)  tolua_tousertype(tolua_S,1,0);
  const game::SGameSceneProps* props = ((const game::SGameSceneProps*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGameSceneProps'",NULL);
#endif
 {
  self->setGameSceneProps(*props);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGameSceneProps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeParams_new00
static int tolua_MyLuaBind_game_SGameNodeParams_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SGameNodeParams* tolua_ret = (game::SGameNodeParams*)  new game::SGameNodeParams();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SGameNodeParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeParams_new00_local
static int tolua_MyLuaBind_game_SGameNodeParams_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SGameNodeParams* tolua_ret = (game::SGameNodeParams*)  new game::SGameNodeParams();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SGameNodeParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeParams_new01
static int tolua_MyLuaBind_game_SGameNodeParams_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  game::E_GAME_NODE_TYPE gntype = ((game::E_GAME_NODE_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  char* class_name = ((char*)  tolua_tostring(tolua_S,3,0));
 {
  game::SGameNodeParams* tolua_ret = (game::SGameNodeParams*)  new game::SGameNodeParams(gntype,class_name);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SGameNodeParams");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SGameNodeParams_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeParams_new01_local
static int tolua_MyLuaBind_game_SGameNodeParams_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  game::E_GAME_NODE_TYPE gntype = ((game::E_GAME_NODE_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  char* class_name = ((char*)  tolua_tostring(tolua_S,3,0));
 {
  game::SGameNodeParams* tolua_ret = (game::SGameNodeParams*)  new game::SGameNodeParams(gntype,class_name);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SGameNodeParams");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SGameNodeParams_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeParams_new02
static int tolua_MyLuaBind_game_SGameNodeParams_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SGameNodeParams* p = ((const game::SGameNodeParams*)  tolua_tousertype(tolua_S,2,0));
 {
  game::SGameNodeParams* tolua_ret = (game::SGameNodeParams*)  new game::SGameNodeParams(*p);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SGameNodeParams");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SGameNodeParams_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeParams_new02_local
static int tolua_MyLuaBind_game_SGameNodeParams_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SGameNodeParams* p = ((const game::SGameNodeParams*)  tolua_tousertype(tolua_S,2,0));
 {
  game::SGameNodeParams* tolua_ret = (game::SGameNodeParams*)  new game::SGameNodeParams(*p);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SGameNodeParams");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SGameNodeParams_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeParams_new03
static int tolua_MyLuaBind_game_SGameNodeParams_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SGameNodeParams* p = ((const game::SGameNodeParams*)  tolua_tousertype(tolua_S,2,0));
  game::E_GAME_NODE_TYPE gntype = ((game::E_GAME_NODE_TYPE) (int)  tolua_tonumber(tolua_S,3,0));
 {
  game::SGameNodeParams* tolua_ret = (game::SGameNodeParams*)  new game::SGameNodeParams(*p,gntype);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SGameNodeParams");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SGameNodeParams_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeParams_new03_local
static int tolua_MyLuaBind_game_SGameNodeParams_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SGameNodeParams* p = ((const game::SGameNodeParams*)  tolua_tousertype(tolua_S,2,0));
  game::E_GAME_NODE_TYPE gntype = ((game::E_GAME_NODE_TYPE) (int)  tolua_tonumber(tolua_S,3,0));
 {
  game::SGameNodeParams* tolua_ret = (game::SGameNodeParams*)  new game::SGameNodeParams(*p,gntype);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SGameNodeParams");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SGameNodeParams_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeParams_set00
static int tolua_MyLuaBind_game_SGameNodeParams_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
  const game::SGameNodeParams* p = ((const game::SGameNodeParams*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeParams__eq00
static int tolua_MyLuaBind_game_SGameNodeParams__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
  const game::SGameNodeParams* p = ((const game::SGameNodeParams*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->operator==(*p);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ClassName of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeParams_ClassName
static int tolua_get_game__SGameNodeParams_ClassName(lua_State* tolua_S)
{
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClassName'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->ClassName,"core::stringc");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: ClassName of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeParams_ClassName
static int tolua_set_game__SGameNodeParams_ClassName(lua_State* tolua_S)
{
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClassName'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::stringc",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ClassName = *((core::stringc*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Type of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeParams_Type
static int tolua_get_game__SGameNodeParams_Type(lua_State* tolua_S)
{
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Type'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Type);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Type of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeParams_Type
static int tolua_set_game__SGameNodeParams_Type(lua_State* tolua_S)
{
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Type'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Type = ((game::E_GAME_NODE_TYPE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MovSpeed of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeParams_MovSpeed
static int tolua_get_game__SGameNodeParams_MovSpeed(lua_State* tolua_S)
{
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MovSpeed'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->MovSpeed);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MovSpeed of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeParams_MovSpeed
static int tolua_set_game__SGameNodeParams_MovSpeed(lua_State* tolua_S)
{
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MovSpeed'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MovSpeed = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: RotSpeed of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeParams_RotSpeed
static int tolua_get_game__SGameNodeParams_RotSpeed(lua_State* tolua_S)
{
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'RotSpeed'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->RotSpeed);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: RotSpeed of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeParams_RotSpeed
static int tolua_set_game__SGameNodeParams_RotSpeed(lua_State* tolua_S)
{
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'RotSpeed'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->RotSpeed = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Life of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeParams_Life
static int tolua_get_game__SGameNodeParams_Life(lua_State* tolua_S)
{
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Life'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Life);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Life of class  game::SGameNodeParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeParams_Life
static int tolua_set_game__SGameNodeParams_Life(lua_State* tolua_S)
{
  game::SGameNodeParams* self = (game::SGameNodeParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Life'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Life = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SGameNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeCommonParams_new00
static int tolua_MyLuaBind_game_SGameNodeCommonParams_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SGameNodeCommonParams* tolua_ret = (game::SGameNodeCommonParams*)  new game::SGameNodeCommonParams();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SGameNodeCommonParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SGameNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeCommonParams_new00_local
static int tolua_MyLuaBind_game_SGameNodeCommonParams_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SGameNodeCommonParams* tolua_ret = (game::SGameNodeCommonParams*)  new game::SGameNodeCommonParams();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SGameNodeCommonParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SGameNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeCommonParams_new01
static int tolua_MyLuaBind_game_SGameNodeCommonParams_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SGameNodeCommonParams* p = ((const game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,2,0));
 {
  game::SGameNodeCommonParams* tolua_ret = (game::SGameNodeCommonParams*)  new game::SGameNodeCommonParams(*p);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SGameNodeCommonParams");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SGameNodeCommonParams_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SGameNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeCommonParams_new01_local
static int tolua_MyLuaBind_game_SGameNodeCommonParams_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const game::SGameNodeCommonParams* p = ((const game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,2,0));
 {
  game::SGameNodeCommonParams* tolua_ret = (game::SGameNodeCommonParams*)  new game::SGameNodeCommonParams(*p);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SGameNodeCommonParams");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_SGameNodeCommonParams_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  game::SGameNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeCommonParams_set00
static int tolua_MyLuaBind_game_SGameNodeCommonParams_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const game::SGameNodeCommonParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::SGameNodeCommonParams* self = (game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
  const game::SGameNodeCommonParams* p = ((const game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Scene of class  game::SGameNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeCommonParams_Scene
static int tolua_get_game__SGameNodeCommonParams_Scene(lua_State* tolua_S)
{
  game::SGameNodeCommonParams* self = (game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Scene'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Scene,"scn::SSceneNodeCommonParams");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Scene of class  game::SGameNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeCommonParams_Scene
static int tolua_set_game__SGameNodeCommonParams_Scene(lua_State* tolua_S)
{
  game::SGameNodeCommonParams* self = (game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Scene'",NULL);
 if (!tolua_isusertype(tolua_S,2,"scn::SSceneNodeCommonParams",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Scene = *((scn::SSceneNodeCommonParams*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Dynamic of class  game::SGameNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeCommonParams_Dynamic
static int tolua_get_game__SGameNodeCommonParams_Dynamic(lua_State* tolua_S)
{
  game::SGameNodeCommonParams* self = (game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Dynamic'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Dynamic,"dyn::SDynamicObjectParams");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Dynamic of class  game::SGameNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeCommonParams_Dynamic
static int tolua_set_game__SGameNodeCommonParams_Dynamic(lua_State* tolua_S)
{
  game::SGameNodeCommonParams* self = (game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Dynamic'",NULL);
 if (!tolua_isusertype(tolua_S,2,"dyn::SDynamicObjectParams",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Dynamic = *((dyn::SDynamicObjectParams*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Game of class  game::SGameNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeCommonParams_Game
static int tolua_get_game__SGameNodeCommonParams_Game(lua_State* tolua_S)
{
  game::SGameNodeCommonParams* self = (game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Game'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Game,"game::SGameNodeParams");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Game of class  game::SGameNodeCommonParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeCommonParams_Game
static int tolua_set_game__SGameNodeCommonParams_Game(lua_State* tolua_S)
{
  game::SGameNodeCommonParams* self = (game::SGameNodeCommonParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Game'",NULL);
 if (!tolua_isusertype(tolua_S,2,"game::SGameNodeParams",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Game = *((game::SGameNodeParams*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInventory of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getInventory00
static int tolua_MyLuaBind_game_IGameNode_getInventory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInventory'",NULL);
#endif
 {
  game::IGameInventory& tolua_ret = (game::IGameInventory&)  self->getInventory();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"game::IGameInventory");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInventory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameNodeType of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getGameNodeType00
static int tolua_MyLuaBind_game_IGameNode_getGameNodeType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameNodeType'",NULL);
#endif
 {
  game::E_GAME_NODE_TYPE tolua_ret = (game::E_GAME_NODE_TYPE)  self->getGameNodeType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameNodeType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getParameters of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getParameters00
static int tolua_MyLuaBind_game_IGameNode_getParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getParameters'",NULL);
#endif
 {
  const game::SGameNodeParams& tolua_ret = (const game::SGameNodeParams&)  self->getParameters();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const game::SGameNodeParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParameters of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_setParameters00
static int tolua_MyLuaBind_game_IGameNode_setParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::SGameNodeParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  game::SGameNodeParams* game_params = ((game::SGameNodeParams*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParameters'",NULL);
#endif
 {
  self->setParameters(*game_params);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSceneNode of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getSceneNode00
static int tolua_MyLuaBind_game_IGameNode_getSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSceneNode'",NULL);
#endif
 {
  scn::ISceneNode* tolua_ret = (scn::ISceneNode*)  self->getSceneNode();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"scn::ISceneNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDynamicObject of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getDynamicObject00
static int tolua_MyLuaBind_game_IGameNode_getDynamicObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDynamicObject'",NULL);
#endif
 {
  dyn::IDynamicObject* tolua_ret = (dyn::IDynamicObject*)  self->getDynamicObject();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"dyn::IDynamicObject");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDynamicObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isMainPlayer of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_isMainPlayer00
static int tolua_MyLuaBind_game_IGameNode_isMainPlayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isMainPlayer'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isMainPlayer();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isMainPlayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addSoundEffect of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_addSoundEffect00
static int tolua_MyLuaBind_game_IGameNode_addSoundEffect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  mm::ISound* sound = ((mm::ISound*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addSoundEffect'",NULL);
#endif
 {
  self->addSoundEffect(sound);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addSoundEffect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: playSoundEffect of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_playSoundEffect00
static int tolua_MyLuaBind_game_IGameNode_playSoundEffect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'playSoundEffect'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->playSoundEffect(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'playSoundEffect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: stopSoundEffect of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_stopSoundEffect00
static int tolua_MyLuaBind_game_IGameNode_stopSoundEffect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'stopSoundEffect'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->stopSoundEffect(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'stopSoundEffect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isPlayingSoundEffect of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_isPlayingSoundEffect00
static int tolua_MyLuaBind_game_IGameNode_isPlayingSoundEffect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isPlayingSoundEffect'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isPlayingSoundEffect(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isPlayingSoundEffect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSoundEffect of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getSoundEffect00
static int tolua_MyLuaBind_game_IGameNode_getSoundEffect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSoundEffect'",NULL);
#endif
 {
  mm::ISound* tolua_ret = (mm::ISound*)  self->getSoundEffect(idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"mm::ISound");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSoundEffect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSoundEffectsCount of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getSoundEffectsCount00
static int tolua_MyLuaBind_game_IGameNode_getSoundEffectsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSoundEffectsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getSoundEffectsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSoundEffectsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAllSoundEffects of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_removeAllSoundEffects00
static int tolua_MyLuaBind_game_IGameNode_removeAllSoundEffects00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAllSoundEffects'",NULL);
#endif
 {
  self->removeAllSoundEffects();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAllSoundEffects'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeSoundEffect of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_removeSoundEffect00
static int tolua_MyLuaBind_game_IGameNode_removeSoundEffect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  mm::ISound* sound = ((mm::ISound*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeSoundEffect'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeSoundEffect(sound);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeSoundEffect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSoundEffectsVolume of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_setSoundEffectsVolume00
static int tolua_MyLuaBind_game_IGameNode_setSoundEffectsVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  float volume = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSoundEffectsVolume'",NULL);
#endif
 {
  self->setSoundEffectsVolume(volume);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSoundEffectsVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAutoCreatedFlag of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_setAutoCreatedFlag00
static int tolua_MyLuaBind_game_IGameNode_setAutoCreatedFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  bool value = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAutoCreatedFlag'",NULL);
#endif
 {
  self->setAutoCreatedFlag(value);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAutoCreatedFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isAutoCreated of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_isAutoCreated00
static int tolua_MyLuaBind_game_IGameNode_isAutoCreated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isAutoCreated'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isAutoCreated();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isAutoCreated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLastDislocation of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getLastDislocation00
static int tolua_MyLuaBind_game_IGameNode_getLastDislocation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNode* self = (const game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLastDislocation'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getLastDislocation();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLastDislocation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDislocation of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getDislocation00
static int tolua_MyLuaBind_game_IGameNode_getDislocation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNode* self = (const game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDislocation'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getDislocation();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDislocation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLastOrientation of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getLastOrientation00
static int tolua_MyLuaBind_game_IGameNode_getLastOrientation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNode* self = (const game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLastOrientation'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getLastOrientation();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLastOrientation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOrientation of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getOrientation00
static int tolua_MyLuaBind_game_IGameNode_getOrientation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNode* self = (const game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOrientation'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getOrientation();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOrientation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTransformation of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getTransformation00
static int tolua_MyLuaBind_game_IGameNode_getTransformation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNode* self = (const game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTransformation'",NULL);
#endif
 {
  const core::matrix4& tolua_ret = (const core::matrix4&)  self->getTransformation();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::matrix4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTransformation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMoveDir of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getMoveDir00
static int tolua_MyLuaBind_game_IGameNode_getMoveDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNode* self = (const game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMoveDir'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getMoveDir();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMoveDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBoundingBox of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getBoundingBox00
static int tolua_MyLuaBind_game_IGameNode_getBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNode* self = (const game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBoundingBox'",NULL);
#endif
 {
  const core::aabbox3df& tolua_ret = (const core::aabbox3df&)  self->getBoundingBox();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::aabbox3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTransformedBBox of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getTransformedBBox00
static int tolua_MyLuaBind_game_IGameNode_getTransformedBBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNode* self = (const game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTransformedBBox'",NULL);
#endif
 {
  const core::aabbox3df& tolua_ret = (const core::aabbox3df&)  self->getTransformedBBox();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::aabbox3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTransformedBBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTransformedBBoxCenter of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getTransformedBBoxCenter00
static int tolua_MyLuaBind_game_IGameNode_getTransformedBBoxCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNode* self = (const game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTransformedBBoxCenter'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getTransformedBBoxCenter();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTransformedBBoxCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNodeSphereRadius of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getNodeSphereRadius00
static int tolua_MyLuaBind_game_IGameNode_getNodeSphereRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNode* self = (const game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNodeSphereRadius'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getNodeSphereRadius();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNodeSphereRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMoveSpeed of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getMoveSpeed00
static int tolua_MyLuaBind_game_IGameNode_getMoveSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMoveSpeed'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getMoveSpeed();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMoveSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameClassName of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getGameClassName00
static int tolua_MyLuaBind_game_IGameNode_getGameClassName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameClassName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getGameClassName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameClassName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isEnabled of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_isEnabled00
static int tolua_MyLuaBind_game_IGameNode_isEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isEnabled'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isEnabled();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnabled of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_setEnabled00
static int tolua_MyLuaBind_game_IGameNode_setEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnabled'",NULL);
#endif
 {
  self->setEnabled(enabled);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isRendered of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_isRendered00
static int tolua_MyLuaBind_game_IGameNode_isRendered00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isRendered'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isRendered();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isRendered'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isGaming of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_isGaming00
static int tolua_MyLuaBind_game_IGameNode_isGaming00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isGaming'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isGaming();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isGaming'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimation of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getAnimation00
static int tolua_MyLuaBind_game_IGameNode_getAnimation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimation'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getAnimation();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationProgress of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getAnimationProgress00
static int tolua_MyLuaBind_game_IGameNode_getAnimationProgress00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationProgress'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getAnimationProgress();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationProgress'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isDead of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_isDead00
static int tolua_MyLuaBind_game_IGameNode_isDead00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isDead'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isDead();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isDead'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isLive of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_isLive00
static int tolua_MyLuaBind_game_IGameNode_isLive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isLive'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isLive();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isLive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addLife of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_addLife00
static int tolua_MyLuaBind_game_IGameNode_addLife00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  float add_val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addLife'",NULL);
#endif
 {
  self->addLife(add_val);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addLife'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLife of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getLife00
static int tolua_MyLuaBind_game_IGameNode_getLife00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLife'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getLife();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLife'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLife of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_setLife00
static int tolua_MyLuaBind_game_IGameNode_setLife00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLife'",NULL);
#endif
 {
  self->setLife(val);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLife'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxLife of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_setMaxLife00
static int tolua_MyLuaBind_game_IGameNode_setMaxLife00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxLife'",NULL);
#endif
 {
  self->setMaxLife(val);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxLife'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxLife of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getMaxLife00
static int tolua_MyLuaBind_game_IGameNode_getMaxLife00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxLife'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getMaxLife();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxLife'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: update of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_update00
static int tolua_MyLuaBind_game_IGameNode_update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'update'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->update();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameCommonParams of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getGameCommonParams00
static int tolua_MyLuaBind_game_IGameNode_getGameCommonParams00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNode* self = (const game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameCommonParams'",NULL);
#endif
 {
  const game::SGameNodeCommonParams& tolua_ret = (const game::SGameNodeCommonParams&)  self->getGameCommonParams();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const game::SGameNodeCommonParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameCommonParams'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateGameCommonParams of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_updateGameCommonParams00
static int tolua_MyLuaBind_game_IGameNode_updateGameCommonParams00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateGameCommonParams'",NULL);
#endif
 {
  self->updateGameCommonParams();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateGameCommonParams'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWarSide of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getWarSide00
static int tolua_MyLuaBind_game_IGameNode_getWarSide00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWarSide'",NULL);
#endif
 {
  game::E_WAR_SIDE tolua_ret = (game::E_WAR_SIDE)  self->getWarSide();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWarSide'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSceneCorePropertiesXMLString of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getSceneCorePropertiesXMLString00
static int tolua_MyLuaBind_game_IGameNode_getSceneCorePropertiesXMLString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSceneCorePropertiesXMLString'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getSceneCorePropertiesXMLString();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSceneCorePropertiesXMLString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDynamicCorePropertiesXMLString of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getDynamicCorePropertiesXMLString00
static int tolua_MyLuaBind_game_IGameNode_getDynamicCorePropertiesXMLString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDynamicCorePropertiesXMLString'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getDynamicCorePropertiesXMLString();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDynamicCorePropertiesXMLString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameCorePropertiesXMLString of class  game::IGameNode */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNode_getGameCorePropertiesXMLString00
static int tolua_MyLuaBind_game_IGameNode_getGameCorePropertiesXMLString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNode* self = (game::IGameNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameCorePropertiesXMLString'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getGameCorePropertiesXMLString();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameCorePropertiesXMLString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MeleAttackRange of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_MeleAttackRange
static int tolua_get_game__SGameNodeAIParams_MeleAttackRange(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MeleAttackRange'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->MeleAttackRange);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MeleAttackRange of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_MeleAttackRange
static int tolua_set_game__SGameNodeAIParams_MeleAttackRange(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MeleAttackRange'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MeleAttackRange = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MeleAttackDamage of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_MeleAttackDamage
static int tolua_get_game__SGameNodeAIParams_MeleAttackDamage(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MeleAttackDamage'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->MeleAttackDamage);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MeleAttackDamage of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_MeleAttackDamage
static int tolua_set_game__SGameNodeAIParams_MeleAttackDamage(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MeleAttackDamage'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MeleAttackDamage = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MeleAttackAngle of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_MeleAttackAngle
static int tolua_get_game__SGameNodeAIParams_MeleAttackAngle(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MeleAttackAngle'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->MeleAttackAngle);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MeleAttackAngle of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_MeleAttackAngle
static int tolua_set_game__SGameNodeAIParams_MeleAttackAngle(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MeleAttackAngle'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MeleAttackAngle = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: FireAttackHorizMaxAngle of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_FireAttackHorizMaxAngle
static int tolua_get_game__SGameNodeAIParams_FireAttackHorizMaxAngle(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FireAttackHorizMaxAngle'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->FireAttackHorizMaxAngle);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: FireAttackHorizMaxAngle of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_FireAttackHorizMaxAngle
static int tolua_set_game__SGameNodeAIParams_FireAttackHorizMaxAngle(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FireAttackHorizMaxAngle'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->FireAttackHorizMaxAngle = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: FireAttackVertMaxAngle of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_FireAttackVertMaxAngle
static int tolua_get_game__SGameNodeAIParams_FireAttackVertMaxAngle(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FireAttackVertMaxAngle'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->FireAttackVertMaxAngle);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: FireAttackVertMaxAngle of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_FireAttackVertMaxAngle
static int tolua_set_game__SGameNodeAIParams_FireAttackVertMaxAngle(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FireAttackVertMaxAngle'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->FireAttackVertMaxAngle = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Armor of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_Armor
static int tolua_get_game__SGameNodeAIParams_Armor(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Armor'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Armor);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Armor of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_Armor
static int tolua_set_game__SGameNodeAIParams_Armor(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Armor'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Armor = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Power of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_Power
static int tolua_get_game__SGameNodeAIParams_Power(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Power'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Power);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Power of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_Power
static int tolua_set_game__SGameNodeAIParams_Power(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Power'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Power = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Dexterity of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_Dexterity
static int tolua_get_game__SGameNodeAIParams_Dexterity(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Dexterity'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Dexterity);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Dexterity of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_Dexterity
static int tolua_set_game__SGameNodeAIParams_Dexterity(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Dexterity'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Dexterity = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Accuracy of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_Accuracy
static int tolua_get_game__SGameNodeAIParams_Accuracy(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Accuracy'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Accuracy);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Accuracy of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_Accuracy
static int tolua_set_game__SGameNodeAIParams_Accuracy(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Accuracy'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Accuracy = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: StandReadyMaxTimeMs of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_StandReadyMaxTimeMs
static int tolua_get_game__SGameNodeAIParams_StandReadyMaxTimeMs(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'StandReadyMaxTimeMs'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->StandReadyMaxTimeMs);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: StandReadyMaxTimeMs of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_StandReadyMaxTimeMs
static int tolua_set_game__SGameNodeAIParams_StandReadyMaxTimeMs(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'StandReadyMaxTimeMs'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->StandReadyMaxTimeMs = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ViewDist of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_ViewDist
static int tolua_get_game__SGameNodeAIParams_ViewDist(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ViewDist'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->ViewDist);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: ViewDist of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_ViewDist
static int tolua_set_game__SGameNodeAIParams_ViewDist(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ViewDist'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ViewDist = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MemoryTime of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_MemoryTime
static int tolua_get_game__SGameNodeAIParams_MemoryTime(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MemoryTime'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->MemoryTime);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MemoryTime of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_MemoryTime
static int tolua_set_game__SGameNodeAIParams_MemoryTime(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MemoryTime'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MemoryTime = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: FriendlyDamageCoeff of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_get_game__SGameNodeAIParams_FriendlyDamageCoeff
static int tolua_get_game__SGameNodeAIParams_FriendlyDamageCoeff(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FriendlyDamageCoeff'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->FriendlyDamageCoeff);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: FriendlyDamageCoeff of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_set_game__SGameNodeAIParams_FriendlyDamageCoeff
static int tolua_set_game__SGameNodeAIParams_FriendlyDamageCoeff(lua_State* tolua_S)
{
  game::SGameNodeAIParams* self = (game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FriendlyDamageCoeff'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->FriendlyDamageCoeff = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeAIParams_new00
static int tolua_MyLuaBind_game_SGameNodeAIParams_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeAIParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SGameNodeAIParams* tolua_ret = (game::SGameNodeAIParams*)  new game::SGameNodeAIParams();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SGameNodeAIParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SGameNodeAIParams */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SGameNodeAIParams_new00_local
static int tolua_MyLuaBind_game_SGameNodeAIParams_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SGameNodeAIParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SGameNodeAIParams* tolua_ret = (game::SGameNodeAIParams*)  new game::SGameNodeAIParams();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SGameNodeAIParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addToFormation of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_addToFormation00
static int tolua_MyLuaBind_game_IGameNodeAI_addToFormation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  game::IGameUnitsFormation* formation = ((game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addToFormation'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->addToFormation(formation);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addToFormation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeFromFormation of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_removeFromFormation00
static int tolua_MyLuaBind_game_IGameNodeAI_removeFromFormation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeFromFormation'",NULL);
#endif
 {
  self->removeFromFormation();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeFromFormation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFormation of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_getFormation00
static int tolua_MyLuaBind_game_IGameNodeAI_getFormation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFormation'",NULL);
#endif
 {
  game::IGameUnitsFormation* tolua_ret = (game::IGameUnitsFormation*)  self->getFormation();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameUnitsFormation");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFormation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: inFormation of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_inFormation00
static int tolua_MyLuaBind_game_IGameNodeAI_inFormation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'inFormation'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->inFormation();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'inFormation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isCanSee of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_isCanSee00
static int tolua_MyLuaBind_game_IGameNodeAI_isCanSee00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNode",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNode* gnode = ((game::IGameNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isCanSee'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isCanSee(gnode);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isCanSee'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addLife of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_addLife00
static int tolua_MyLuaBind_game_IGameNodeAI_addLife00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  float add_val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addLife'",NULL);
#endif
 {
  self->addLife(add_val);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addLife'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isReadyToAttack of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_isReadyToAttack00
static int tolua_MyLuaBind_game_IGameNodeAI_isReadyToAttack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNode",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNode* other = ((game::IGameNode*)  tolua_tousertype(tolua_S,2,0));
  bool can_mele_attack = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isReadyToAttack'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isReadyToAttack(other,can_mele_attack);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 tolua_pushboolean(tolua_S,(bool)can_mele_attack);
 }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isReadyToAttack'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isDead of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_isDead00
static int tolua_MyLuaBind_game_IGameNodeAI_isDead00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isDead'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isDead();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isDead'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setState of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_setState00
static int tolua_MyLuaBind_game_IGameNodeAI_setState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  game::E_AI_STATE state = ((game::E_AI_STATE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setState'",NULL);
#endif
 {
  self->setState(state);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getState of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_getState00
static int tolua_MyLuaBind_game_IGameNodeAI_getState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getState'",NULL);
#endif
 {
  game::E_AI_STATE tolua_ret = (game::E_AI_STATE)  self->getState();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getParametersAI of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_getParametersAI00
static int tolua_MyLuaBind_game_IGameNodeAI_getParametersAI00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getParametersAI'",NULL);
#endif
 {
  const game::SGameNodeAIParams& tolua_ret = (const game::SGameNodeAIParams&)  self->getParametersAI();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const game::SGameNodeAIParams");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParametersAI'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParametersAI of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_setParametersAI00
static int tolua_MyLuaBind_game_IGameNodeAI_setParametersAI00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::SGameNodeAIParams",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  game::SGameNodeAIParams* params_ai = ((game::SGameNodeAIParams*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParametersAI'",NULL);
#endif
 {
  self->setParametersAI(*params_ai);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setParametersAI'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: bindWeapon of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_bindWeapon00
static int tolua_MyLuaBind_game_IGameNodeAI_bindWeapon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isstring(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  int number = ((int)  tolua_tonumber(tolua_S,2,0));
  game::IGameNodeWeapon* weapon = ((game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,3,0));
  const char* target_bone = ((const char*)  tolua_tostring(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'bindWeapon'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->bindWeapon(number,weapon,target_bone);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'bindWeapon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: selectWeapon of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_selectWeapon00
static int tolua_MyLuaBind_game_IGameNodeAI_selectWeapon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  int number = ((int)  tolua_tonumber(tolua_S,2,0));
  bool select = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'selectWeapon'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->selectWeapon(number,select);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'selectWeapon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: selectPrevWeapon of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_selectPrevWeapon00
static int tolua_MyLuaBind_game_IGameNodeAI_selectPrevWeapon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'selectPrevWeapon'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->selectPrevWeapon();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'selectPrevWeapon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: selectNextWeapon of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_selectNextWeapon00
static int tolua_MyLuaBind_game_IGameNodeAI_selectNextWeapon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'selectNextWeapon'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->selectNextWeapon();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'selectNextWeapon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelectedWeaponNumber of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_getSelectedWeaponNumber00
static int tolua_MyLuaBind_game_IGameNodeAI_getSelectedWeaponNumber00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelectedWeaponNumber'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getSelectedWeaponNumber();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelectedWeaponNumber'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: aimWeaponByRay of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_aimWeaponByRay00
static int tolua_MyLuaBind_game_IGameNodeAI_aimWeaponByRay00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  const core::line3df* ray = ((const core::line3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'aimWeaponByRay'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->aimWeaponByRay(*ray);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'aimWeaponByRay'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: aimWeaponAtPos of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_aimWeaponAtPos00
static int tolua_MyLuaBind_game_IGameNodeAI_aimWeaponAtPos00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'aimWeaponAtPos'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->aimWeaponAtPos(*pos);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'aimWeaponAtPos'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: fireWeapon of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_fireWeapon00
static int tolua_MyLuaBind_game_IGameNodeAI_fireWeapon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  bool fire = ((bool)  tolua_toboolean(tolua_S,2,true));
  bool with_delay = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'fireWeapon'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->fireWeapon(fire,with_delay);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'fireWeapon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isFiring of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_isFiring00
static int tolua_MyLuaBind_game_IGameNodeAI_isFiring00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isFiring'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isFiring();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isFiring'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFireCount of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_getFireCount00
static int tolua_MyLuaBind_game_IGameNodeAI_getFireCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFireCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getFireCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFireCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: update of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_update00
static int tolua_MyLuaBind_game_IGameNodeAI_update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'update'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->update();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLookDir of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_getLookDir00
static int tolua_MyLuaBind_game_IGameNodeAI_getLookDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLookDir'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getLookDir();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLookDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRightDir of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_getRightDir00
static int tolua_MyLuaBind_game_IGameNodeAI_getRightDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRightDir'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getRightDir();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRightDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTopDir of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_getTopDir00
static int tolua_MyLuaBind_game_IGameNodeAI_getTopDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTopDir'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getTopDir();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTopDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: moveByVec of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_moveByVec00
static int tolua_MyLuaBind_game_IGameNodeAI_moveByVec00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* vec = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'moveByVec'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->moveByVec(*vec);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'moveByVec'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: moveToPos of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_moveToPos00
static int tolua_MyLuaBind_game_IGameNodeAI_moveToPos00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'moveToPos'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->moveToPos(*pos);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'moveToPos'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: pushByForce of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_pushByForce00
static int tolua_MyLuaBind_game_IGameNodeAI_pushByForce00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* force = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'pushByForce'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->pushByForce(*force);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'pushByForce'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: pushToPos of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_pushToPos00
static int tolua_MyLuaBind_game_IGameNodeAI_pushToPos00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'pushToPos'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->pushToPos(*pos);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'pushToPos'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: pushInDir of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_pushInDir00
static int tolua_MyLuaBind_game_IGameNodeAI_pushInDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df dir = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  float speed = ((float)  tolua_tonumber(tolua_S,3,1.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'pushInDir'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->pushInDir(dir,speed);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'pushInDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: orientInHorizDir of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_orientInHorizDir00
static int tolua_MyLuaBind_game_IGameNodeAI_orientInHorizDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df dir = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  float speed = ((float)  tolua_tonumber(tolua_S,3,1.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'orientInHorizDir'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->orientInHorizDir(dir,speed);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'orientInHorizDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: orientByAngles of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_orientByAngles00
static int tolua_MyLuaBind_game_IGameNodeAI_orientByAngles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df angles = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  float speed = ((float)  tolua_tonumber(tolua_S,3,1.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'orientByAngles'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->orientByAngles(angles,speed);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'orientByAngles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWarSide of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_getWarSide00
static int tolua_MyLuaBind_game_IGameNodeAI_getWarSide00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWarSide'",NULL);
#endif
 {
  game::E_WAR_SIDE tolua_ret = (game::E_WAR_SIDE)  self->getWarSide();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWarSide'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isGaming of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_isGaming00
static int tolua_MyLuaBind_game_IGameNodeAI_isGaming00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isGaming'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isGaming();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isGaming'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isWarWith of class  game::IGameNodeAI */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeAI_isWarWith00
static int tolua_MyLuaBind_game_IGameNodeAI_isWarWith00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeAI* self = (game::IGameNodeAI*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNodeAI* other = ((game::IGameNodeAI*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isWarWith'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isWarWith(other);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isWarWith'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setItemName of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_setItemName00
static int tolua_MyLuaBind_game_IGameNodeItem_setItemName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setItemName'",NULL);
#endif
 {
  self->setItemName(name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setItemName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setItemKeyName of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_setItemKeyName00
static int tolua_MyLuaBind_game_IGameNodeItem_setItemKeyName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setItemKeyName'",NULL);
#endif
 {
  self->setItemKeyName(name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setItemKeyName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setItemShortDescr of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_setItemShortDescr00
static int tolua_MyLuaBind_game_IGameNodeItem_setItemShortDescr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
  const char* descr = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setItemShortDescr'",NULL);
#endif
 {
  self->setItemShortDescr(descr);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setItemShortDescr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setItemDescr of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_setItemDescr00
static int tolua_MyLuaBind_game_IGameNodeItem_setItemDescr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
  const char* short_descr = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setItemDescr'",NULL);
#endif
 {
  self->setItemDescr(short_descr);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setItemDescr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setItemImageName of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_setItemImageName00
static int tolua_MyLuaBind_game_IGameNodeItem_setItemImageName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
  const char* image_name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setItemImageName'",NULL);
#endif
 {
  self->setItemImageName(image_name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setItemImageName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getItemName of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_getItemName00
static int tolua_MyLuaBind_game_IGameNodeItem_getItemName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getItemName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getItemName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getItemName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getItemKeyName of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_getItemKeyName00
static int tolua_MyLuaBind_game_IGameNodeItem_getItemKeyName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getItemKeyName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getItemKeyName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getItemKeyName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getItemShortDescr of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_getItemShortDescr00
static int tolua_MyLuaBind_game_IGameNodeItem_getItemShortDescr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getItemShortDescr'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getItemShortDescr();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getItemShortDescr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getItemDescr of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_getItemDescr00
static int tolua_MyLuaBind_game_IGameNodeItem_getItemDescr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getItemDescr'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getItemDescr();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getItemDescr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getItemImageName of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_getItemImageName00
static int tolua_MyLuaBind_game_IGameNodeItem_getItemImageName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getItemImageName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getItemImageName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getItemImageName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: collectToInventory of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_collectToInventory00
static int tolua_MyLuaBind_game_IGameNodeItem_collectToInventory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameInventory",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
  game::IGameInventory* inventory = ((game::IGameInventory*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'collectToInventory'",NULL);
#endif
 {
  self->collectToInventory(*inventory);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'collectToInventory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: throwFromInventory of class  game::IGameNodeItem */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeItem_throwFromInventory00
static int tolua_MyLuaBind_game_IGameNodeItem_throwFromInventory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeItem",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeItem* self = (game::IGameNodeItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'throwFromInventory'",NULL);
#endif
 {
  self->throwFromInventory();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'throwFromInventory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCameraStylesCount of class  game::IGameNodeMainPlayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeMainPlayer_getCameraStylesCount00
static int tolua_MyLuaBind_game_IGameNodeMainPlayer_getCameraStylesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeMainPlayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeMainPlayer* self = (game::IGameNodeMainPlayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCameraStylesCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getCameraStylesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCameraStylesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCameraStyle of class  game::IGameNodeMainPlayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraStyle00
static int tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraStyle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeMainPlayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeMainPlayer* self = (game::IGameNodeMainPlayer*)  tolua_tousertype(tolua_S,1,0);
  int idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCameraStyle'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setCameraStyle(idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCameraStyle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCameraStyle of class  game::IGameNodeMainPlayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraStyle01
static int tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraStyle01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeMainPlayer",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  game::IGameNodeMainPlayer* self = (game::IGameNodeMainPlayer*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCameraStyle'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setCameraStyle(name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraStyle00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCameraAutoZoom of class  game::IGameNodeMainPlayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraAutoZoom00
static int tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraAutoZoom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeMainPlayer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeMainPlayer* self = (game::IGameNodeMainPlayer*)  tolua_tousertype(tolua_S,1,0);
  bool auto_zoom = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCameraAutoZoom'",NULL);
#endif
 {
  self->setCameraAutoZoom(auto_zoom);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCameraAutoZoom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isCameraAutoZoom of class  game::IGameNodeMainPlayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeMainPlayer_isCameraAutoZoom00
static int tolua_MyLuaBind_game_IGameNodeMainPlayer_isCameraAutoZoom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeMainPlayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeMainPlayer* self = (game::IGameNodeMainPlayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isCameraAutoZoom'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isCameraAutoZoom();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isCameraAutoZoom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCameraZoom of class  game::IGameNodeMainPlayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraZoom00
static int tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraZoom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeMainPlayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeMainPlayer* self = (game::IGameNodeMainPlayer*)  tolua_tousertype(tolua_S,1,0);
  float zoom = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCameraZoom'",NULL);
#endif
 {
  self->setCameraZoom(zoom);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCameraZoom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCameraZoom of class  game::IGameNodeMainPlayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeMainPlayer_getCameraZoom00
static int tolua_MyLuaBind_game_IGameNodeMainPlayer_getCameraZoom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeMainPlayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeMainPlayer* self = (game::IGameNodeMainPlayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCameraZoom'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getCameraZoom();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCameraZoom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SWeaponParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SWeaponParameters_new00
static int tolua_MyLuaBind_game_SWeaponParameters_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SWeaponParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SWeaponParameters* tolua_ret = (game::SWeaponParameters*)  new game::SWeaponParameters();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SWeaponParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SWeaponParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SWeaponParameters_new00_local
static int tolua_MyLuaBind_game_SWeaponParameters_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SWeaponParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SWeaponParameters* tolua_ret = (game::SWeaponParameters*)  new game::SWeaponParameters();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SWeaponParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: FirePerSecond of class  game::SWeaponParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SWeaponParameters_FirePerSecond
static int tolua_get_game__SWeaponParameters_FirePerSecond(lua_State* tolua_S)
{
  game::SWeaponParameters* self = (game::SWeaponParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FirePerSecond'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->FirePerSecond);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: FirePerSecond of class  game::SWeaponParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SWeaponParameters_FirePerSecond
static int tolua_set_game__SWeaponParameters_FirePerSecond(lua_State* tolua_S)
{
  game::SWeaponParameters* self = (game::SWeaponParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FirePerSecond'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->FirePerSecond = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Mass of class  game::SWeaponParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SWeaponParameters_Mass
static int tolua_get_game__SWeaponParameters_Mass(lua_State* tolua_S)
{
  game::SWeaponParameters* self = (game::SWeaponParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Mass'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Mass);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Mass of class  game::SWeaponParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SWeaponParameters_Mass
static int tolua_set_game__SWeaponParameters_Mass(lua_State* tolua_S)
{
  game::SWeaponParameters* self = (game::SWeaponParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Mass'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Mass = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: SelectSpeed of class  game::SWeaponParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SWeaponParameters_SelectSpeed
static int tolua_get_game__SWeaponParameters_SelectSpeed(lua_State* tolua_S)
{
  game::SWeaponParameters* self = (game::SWeaponParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SelectSpeed'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->SelectSpeed);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: SelectSpeed of class  game::SWeaponParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SWeaponParameters_SelectSpeed
static int tolua_set_game__SWeaponParameters_SelectSpeed(lua_State* tolua_S)
{
  game::SWeaponParameters* self = (game::SWeaponParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SelectSpeed'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SelectSpeed = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: WaitBeforeFire of class  game::SWeaponParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SWeaponParameters_WaitBeforeFire
static int tolua_get_game__SWeaponParameters_WaitBeforeFire(lua_State* tolua_S)
{
  game::SWeaponParameters* self = (game::SWeaponParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WaitBeforeFire'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->WaitBeforeFire);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: WaitBeforeFire of class  game::SWeaponParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SWeaponParameters_WaitBeforeFire
static int tolua_set_game__SWeaponParameters_WaitBeforeFire(lua_State* tolua_S)
{
  game::SWeaponParameters* self = (game::SWeaponParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WaitBeforeFire'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->WaitBeforeFire = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SWeaponBulletParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SWeaponBulletParameters_new00
static int tolua_MyLuaBind_game_SWeaponBulletParameters_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SWeaponBulletParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SWeaponBulletParameters* tolua_ret = (game::SWeaponBulletParameters*)  new game::SWeaponBulletParameters();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SWeaponBulletParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SWeaponBulletParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SWeaponBulletParameters_new00_local
static int tolua_MyLuaBind_game_SWeaponBulletParameters_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SWeaponBulletParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SWeaponBulletParameters* tolua_ret = (game::SWeaponBulletParameters*)  new game::SWeaponBulletParameters();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SWeaponBulletParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MaxAmmoCount of class  game::SWeaponBulletParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SWeaponBulletParameters_MaxAmmoCount
static int tolua_get_game__SWeaponBulletParameters_MaxAmmoCount(lua_State* tolua_S)
{
  game::SWeaponBulletParameters* self = (game::SWeaponBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxAmmoCount'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->MaxAmmoCount);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MaxAmmoCount of class  game::SWeaponBulletParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SWeaponBulletParameters_MaxAmmoCount
static int tolua_set_game__SWeaponBulletParameters_MaxAmmoCount(lua_State* tolua_S)
{
  game::SWeaponBulletParameters* self = (game::SWeaponBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxAmmoCount'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MaxAmmoCount = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: AutoFeelBulletsPerSecond of class  game::SWeaponBulletParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SWeaponBulletParameters_AutoFeelBulletsPerSecond
static int tolua_get_game__SWeaponBulletParameters_AutoFeelBulletsPerSecond(lua_State* tolua_S)
{
  game::SWeaponBulletParameters* self = (game::SWeaponBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoFeelBulletsPerSecond'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->AutoFeelBulletsPerSecond);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: AutoFeelBulletsPerSecond of class  game::SWeaponBulletParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SWeaponBulletParameters_AutoFeelBulletsPerSecond
static int tolua_set_game__SWeaponBulletParameters_AutoFeelBulletsPerSecond(lua_State* tolua_S)
{
  game::SWeaponBulletParameters* self = (game::SWeaponBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoFeelBulletsPerSecond'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoFeelBulletsPerSecond = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: KeyName of class  game::SWeaponBulletParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SWeaponBulletParameters_KeyName
static int tolua_get_game__SWeaponBulletParameters_KeyName(lua_State* tolua_S)
{
  game::SWeaponBulletParameters* self = (game::SWeaponBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'KeyName'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->KeyName,"core::stringc");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: KeyName of class  game::SWeaponBulletParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SWeaponBulletParameters_KeyName
static int tolua_set_game__SWeaponBulletParameters_KeyName(lua_State* tolua_S)
{
  game::SWeaponBulletParameters* self = (game::SWeaponBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'KeyName'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::stringc",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->KeyName = *((core::stringc*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SBulletParameters_new00
static int tolua_MyLuaBind_game_SBulletParameters_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SBulletParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SBulletParameters* tolua_ret = (game::SBulletParameters*)  new game::SBulletParameters();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::SBulletParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_SBulletParameters_new00_local
static int tolua_MyLuaBind_game_SBulletParameters_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::SBulletParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::SBulletParameters* tolua_ret = (game::SBulletParameters*)  new game::SBulletParameters();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"game::SBulletParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MaxFlyTime of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SBulletParameters_MaxFlyTime
static int tolua_get_game__SBulletParameters_MaxFlyTime(lua_State* tolua_S)
{
  game::SBulletParameters* self = (game::SBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxFlyTime'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->MaxFlyTime);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MaxFlyTime of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SBulletParameters_MaxFlyTime
static int tolua_set_game__SBulletParameters_MaxFlyTime(lua_State* tolua_S)
{
  game::SBulletParameters* self = (game::SBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxFlyTime'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MaxFlyTime = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Damage of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SBulletParameters_Damage
static int tolua_get_game__SBulletParameters_Damage(lua_State* tolua_S)
{
  game::SBulletParameters* self = (game::SBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Damage'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Damage);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Damage of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SBulletParameters_Damage
static int tolua_set_game__SBulletParameters_Damage(lua_State* tolua_S)
{
  game::SBulletParameters* self = (game::SBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Damage'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Damage = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Mass of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SBulletParameters_Mass
static int tolua_get_game__SBulletParameters_Mass(lua_State* tolua_S)
{
  game::SBulletParameters* self = (game::SBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Mass'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Mass);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Mass of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SBulletParameters_Mass
static int tolua_set_game__SBulletParameters_Mass(lua_State* tolua_S)
{
  game::SBulletParameters* self = (game::SBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Mass'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Mass = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Range of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SBulletParameters_Range
static int tolua_get_game__SBulletParameters_Range(lua_State* tolua_S)
{
  game::SBulletParameters* self = (game::SBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Range'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Range);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Range of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SBulletParameters_Range
static int tolua_set_game__SBulletParameters_Range(lua_State* tolua_S)
{
  game::SBulletParameters* self = (game::SBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Range'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Range = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Dispersion of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_get_game__SBulletParameters_Dispersion
static int tolua_get_game__SBulletParameters_Dispersion(lua_State* tolua_S)
{
  game::SBulletParameters* self = (game::SBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Dispersion'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Dispersion,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Dispersion of class  game::SBulletParameters */
#ifndef TOLUA_DISABLE_tolua_set_game__SBulletParameters_Dispersion
static int tolua_set_game__SBulletParameters_Dispersion(lua_State* tolua_S)
{
  game::SBulletParameters* self = (game::SBulletParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Dispersion'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Dispersion = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFlashRadius of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_setFlashRadius00
static int tolua_MyLuaBind_game_IGameNodeWeapon_setFlashRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  float r = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFlashRadius'",NULL);
#endif
 {
  self->setFlashRadius(r);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFlashRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFlashRadius of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getFlashRadius00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getFlashRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFlashRadius'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getFlashRadius();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFlashRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFlashColor of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_setFlashColor00
static int tolua_MyLuaBind_game_IGameNodeWeapon_setFlashColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"img::SColorf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  img::SColorf* c = ((img::SColorf*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFlashColor'",NULL);
#endif
 {
  self->setFlashColor(*c);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFlashColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFlashColor of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getFlashColor00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getFlashColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFlashColor'",NULL);
#endif
 {
  img::SColorf tolua_ret = (img::SColorf)  self->getFlashColor();
 {
#ifdef __cplusplus
 void* tolua_obj = new img::SColorf(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"img::SColorf");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(img::SColorf));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"img::SColorf");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFlashColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFirePoint of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_setFirePoint00
static int tolua_MyLuaBind_game_IGameNodeWeapon_setFirePoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  core::vector3df* pos = ((core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFirePoint'",NULL);
#endif
 {
  self->setFirePoint(*pos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFirePoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFirePoint of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getFirePoint00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getFirePoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFirePoint'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getFirePoint();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFirePoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: bindBullet of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_bindBullet00
static int tolua_MyLuaBind_game_IGameNodeWeapon_bindBullet00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const game::SWeaponBulletParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  const char* fname = ((const char*)  tolua_tostring(tolua_S,2,0));
  const game::SWeaponBulletParameters* params = ((const game::SWeaponBulletParameters*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'bindBullet'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->bindBullet(fname,*params);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'bindBullet'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBulletsCount of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getBulletsCount00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getBulletsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBulletsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getBulletsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBulletsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: bindFireEffect of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_bindFireEffect00
static int tolua_MyLuaBind_game_IGameNodeWeapon_bindFireEffect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"scn::ISceneNode",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  scn::ISceneNode* fireeffect = ((scn::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'bindFireEffect'",NULL);
#endif
 {
  self->bindFireEffect(fireeffect,*pos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'bindFireEffect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: startFire of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_startFire00
static int tolua_MyLuaBind_game_IGameNodeWeapon_startFire00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  bool with_delay = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'startFire'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->startFire(with_delay);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'startFire'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: stopFire of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_stopFire00
static int tolua_MyLuaBind_game_IGameNodeWeapon_stopFire00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'stopFire'",NULL);
#endif
 {
  self->stopFire();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'stopFire'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isFiring of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_isFiring00
static int tolua_MyLuaBind_game_IGameNodeWeapon_isFiring00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isFiring'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isFiring();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isFiring'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: fire of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_fire00
static int tolua_MyLuaBind_game_IGameNodeWeapon_fire00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'fire'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->fire();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'fire'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: aimAtPos of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_aimAtPos00
static int tolua_MyLuaBind_game_IGameNodeWeapon_aimAtPos00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'aimAtPos'",NULL);
#endif
 {
  self->aimAtPos(*pos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'aimAtPos'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: aimByDir of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_aimByDir00
static int tolua_MyLuaBind_game_IGameNodeWeapon_aimByDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* dir = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'aimByDir'",NULL);
#endif
 {
  self->aimByDir(*dir);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'aimByDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: aimByRay of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_aimByRay00
static int tolua_MyLuaBind_game_IGameNodeWeapon_aimByRay00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::line3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  const core::line3df* ray = ((const core::line3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'aimByRay'",NULL);
#endif
 {
  self->aimByRay(*ray);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'aimByRay'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAimedPos of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_setAimedPos00
static int tolua_MyLuaBind_game_IGameNodeWeapon_setAimedPos00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* aimed_pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAimedPos'",NULL);
#endif
 {
  self->setAimedPos(*aimed_pos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAimedPos'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWeaponParameters of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponParameters00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNodeWeapon* self = (const game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWeaponParameters'",NULL);
#endif
 {
  const game::SWeaponParameters& tolua_ret = (const game::SWeaponParameters&)  self->getWeaponParameters();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const game::SWeaponParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWeaponParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBulletParameters of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getBulletParameters00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getBulletParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNodeWeapon* self = (const game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  int bullet_idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBulletParameters'",NULL);
#endif
 {
  const game::SBulletParameters& tolua_ret = (const game::SBulletParameters&)  self->getBulletParameters(bullet_idx);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const game::SBulletParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBulletParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWeaponBulletParameters of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponBulletParameters00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponBulletParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const game::IGameNodeWeapon* self = (const game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  int bullet_idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWeaponBulletParameters'",NULL);
#endif
 {
  const game::SWeaponBulletParameters& tolua_ret = (const game::SWeaponBulletParameters&)  self->getWeaponBulletParameters(bullet_idx);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const game::SWeaponBulletParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWeaponBulletParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOwner of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getOwner00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getOwner00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOwner'",NULL);
#endif
 {
  game::IGameNodeAI* tolua_ret = (game::IGameNodeAI*)  self->getOwner();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNodeAI");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOwner'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOwner of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_setOwner00
static int tolua_MyLuaBind_game_IGameNodeWeapon_setOwner00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNodeAI* owner = ((game::IGameNodeAI*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOwner'",NULL);
#endif
 {
  self->setOwner(owner);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOwner'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: select of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_select00
static int tolua_MyLuaBind_game_IGameNodeWeapon_select00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'select'",NULL);
#endif
 {
  self->select();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'select'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: deSelect of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_deSelect00
static int tolua_MyLuaBind_game_IGameNodeWeapon_deSelect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'deSelect'",NULL);
#endif
 {
  self->deSelect();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'deSelect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFireCount of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getFireCount00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getFireCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFireCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getFireCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFireCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: chooseBullet of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_chooseBullet00
static int tolua_MyLuaBind_game_IGameNodeWeapon_chooseBullet00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  int bullet_idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'chooseBullet'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->chooseBullet(bullet_idx);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'chooseBullet'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getChoosedBulletIndex of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getChoosedBulletIndex00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getChoosedBulletIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getChoosedBulletIndex'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getChoosedBulletIndex();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getChoosedBulletIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBulletIndexByKeyName of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getBulletIndexByKeyName00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getBulletIndexByKeyName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  const char* key_name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBulletIndexByKeyName'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getBulletIndexByKeyName(key_name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBulletIndexByKeyName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: feelBulletAmmo of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_feelBulletAmmo00
static int tolua_MyLuaBind_game_IGameNodeWeapon_feelBulletAmmo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  int bullet_idx = ((int)  tolua_tonumber(tolua_S,2,0));
  int ammo = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'feelBulletAmmo'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->feelBulletAmmo(bullet_idx,ammo);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'feelBulletAmmo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBulletAmmoCount of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getBulletAmmoCount00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getBulletAmmoCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  int bullet_idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBulletAmmoCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getBulletAmmoCount(bullet_idx);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBulletAmmoCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBulletMaxAmmoCount of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getBulletMaxAmmoCount00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getBulletMaxAmmoCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  int bullet_idx = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBulletMaxAmmoCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getBulletMaxAmmoCount(bullet_idx);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBulletMaxAmmoCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFireRange of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getFireRange00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getFireRange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFireRange'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getFireRange();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFireRange'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBindedBoneName of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getBindedBoneName00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getBindedBoneName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBindedBoneName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getBindedBoneName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBindedBoneName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBindedBoneName of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_setBindedBoneName00
static int tolua_MyLuaBind_game_IGameNodeWeapon_setBindedBoneName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  const char* binded_bone_name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBindedBoneName'",NULL);
#endif
 {
  self->setBindedBoneName(binded_bone_name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBindedBoneName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFlashLightPosition of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_setFlashLightPosition00
static int tolua_MyLuaBind_game_IGameNodeWeapon_setFlashLightPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* lpos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFlashLightPosition'",NULL);
#endif
 {
  self->setFlashLightPosition(*lpos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFlashLightPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFlashLightPosition of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getFlashLightPosition00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getFlashLightPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFlashLightPosition'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getFlashLightPosition();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFlashLightPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setWeaponEnabled of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponEnabled00
static int tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setWeaponEnabled'",NULL);
#endif
 {
  self->setWeaponEnabled(enabled);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setWeaponEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isWeaponEnabled of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_isWeaponEnabled00
static int tolua_MyLuaBind_game_IGameNodeWeapon_isWeaponEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isWeaponEnabled'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isWeaponEnabled();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isWeaponEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setWeaponImageName of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponImageName00
static int tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponImageName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  const char* image_name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setWeaponImageName'",NULL);
#endif
 {
  self->setWeaponImageName(image_name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setWeaponImageName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWeaponImageName of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponImageName00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponImageName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWeaponImageName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getWeaponImageName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWeaponImageName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setWeaponSelectedImageName of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponSelectedImageName00
static int tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponSelectedImageName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  const char* image_name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setWeaponSelectedImageName'",NULL);
#endif
 {
  self->setWeaponSelectedImageName(image_name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setWeaponSelectedImageName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWeaponSelectedImageName of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponSelectedImageName00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponSelectedImageName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWeaponSelectedImageName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getWeaponSelectedImageName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWeaponSelectedImageName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setWeaponItemKeyName of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponItemKeyName00
static int tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponItemKeyName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
  const char* item_key_name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setWeaponItemKeyName'",NULL);
#endif
 {
  self->setWeaponItemKeyName(item_key_name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setWeaponItemKeyName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWeaponItemKeyName of class  game::IGameNodeWeapon */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponItemKeyName00
static int tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponItemKeyName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameNodeWeapon",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameNodeWeapon* self = (game::IGameNodeWeapon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWeaponItemKeyName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getWeaponItemKeyName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWeaponItemKeyName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addUnit of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_addUnit00
static int tolua_MyLuaBind_game_IGameUnitsFormation_addUnit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNodeAI* gnode = ((game::IGameNodeAI*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addUnit'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->addUnit(gnode);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addUnit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeUnit of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_removeUnit00
static int tolua_MyLuaBind_game_IGameUnitsFormation_removeUnit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"game::IGameNodeAI",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
  game::IGameNodeAI* gnode = ((game::IGameNodeAI*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeUnit'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeUnit(gnode);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeUnit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAllUnits of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_removeAllUnits00
static int tolua_MyLuaBind_game_IGameUnitsFormation_removeAllUnits00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAllUnits'",NULL);
#endif
 {
  self->removeAllUnits();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAllUnits'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getUnit of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_getUnit00
static int tolua_MyLuaBind_game_IGameUnitsFormation_getUnit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
  int col_idx = ((int)  tolua_tonumber(tolua_S,2,0));
  int row_idx = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getUnit'",NULL);
#endif
 {
  game::IGameNodeAI* tolua_ret = (game::IGameNodeAI*)  self->getUnit(col_idx,row_idx);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNodeAI");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUnit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getUnitsCount of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_getUnitsCount00
static int tolua_MyLuaBind_game_IGameUnitsFormation_getUnitsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getUnitsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getUnitsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUnitsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getUnitsMaxCount of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_getUnitsMaxCount00
static int tolua_MyLuaBind_game_IGameUnitsFormation_getUnitsMaxCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getUnitsMaxCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getUnitsMaxCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUnitsMaxCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: canAddOneMoreUnit of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_canAddOneMoreUnit00
static int tolua_MyLuaBind_game_IGameUnitsFormation_canAddOneMoreUnit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'canAddOneMoreUnit'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->canAddOneMoreUnit();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'canAddOneMoreUnit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFormationID of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_getFormationID00
static int tolua_MyLuaBind_game_IGameUnitsFormation_getFormationID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFormationID'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getFormationID();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFormationID'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFormationID of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_setFormationID00
static int tolua_MyLuaBind_game_IGameUnitsFormation_setFormationID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
  int new_id = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFormationID'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setFormationID(new_id);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFormationID'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCommander of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_getCommander00
static int tolua_MyLuaBind_game_IGameUnitsFormation_getCommander00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCommander'",NULL);
#endif
 {
  game::IGameNode* tolua_ret = (game::IGameNode*)  self->getCommander();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"game::IGameNode");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCommander'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFormationState of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_getFormationState00
static int tolua_MyLuaBind_game_IGameUnitsFormation_getFormationState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFormationState'",NULL);
#endif
 {
  game::E_FORMATION_STATES tolua_ret = (game::E_FORMATION_STATES)  self->getFormationState();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFormationState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDimension of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_getDimension00
static int tolua_MyLuaBind_game_IGameUnitsFormation_getDimension00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDimension'",NULL);
#endif
 {
  core::dimension2di tolua_ret = (core::dimension2di)  self->getDimension();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::dimension2di(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::dimension2di");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::dimension2di));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::dimension2di");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDimension'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDimension of class  game::IGameUnitsFormation */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameUnitsFormation_setDimension00
static int tolua_MyLuaBind_game_IGameUnitsFormation_setDimension00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameUnitsFormation",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"core::dimension2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameUnitsFormation* self = (game::IGameUnitsFormation*)  tolua_tousertype(tolua_S,1,0);
  core::dimension2di* newdim = ((core::dimension2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDimension'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setDimension(*newdim);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDimension'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  game::IGameTasksManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameTasksManager_getSingleton00
static int tolua_MyLuaBind_game_IGameTasksManager_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::IGameTasksManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::IGameTasksManager& tolua_ret = (game::IGameTasksManager&)  game::IGameTasksManager::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"game::IGameTasksManager");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameTasksCount of class  game::IGameTasksManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameTasksManager_getGameTasksCount00
static int tolua_MyLuaBind_game_IGameTasksManager_getGameTasksCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameTasksManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameTasksManager* self = (game::IGameTasksManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameTasksCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getGameTasksCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameTasksCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  game::IGameEventsDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameEventsDispatcher_getSingleton00
static int tolua_MyLuaBind_game_IGameEventsDispatcher_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::IGameEventsDispatcher",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::IGameEventsDispatcher& tolua_ret = (game::IGameEventsDispatcher&)  game::IGameEventsDispatcher::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"game::IGameEventsDispatcher");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameEventsCount of class  game::IGameEventsDispatcher */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameEventsDispatcher_getGameEventsCount00
static int tolua_MyLuaBind_game_IGameEventsDispatcher_getGameEventsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameEventsDispatcher",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameEventsDispatcher* self = (game::IGameEventsDispatcher*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameEventsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getGameEventsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameEventsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  game::IGameAIModule */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameAIModule_getSingleton00
static int tolua_MyLuaBind_game_IGameAIModule_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"game::IGameAIModule",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  game::IGameAIModule& tolua_ret = (game::IGameAIModule&)  game::IGameAIModule::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"game::IGameAIModule");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGameAIEventsCount of class  game::IGameAIModule */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_game_IGameAIModule_getGameAIEventsCount00
static int tolua_MyLuaBind_game_IGameAIModule_getGameAIEventsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"game::IGameAIModule",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  game::IGameAIModule* self = (game::IGameAIModule*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGameAIEventsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getGameAIEventsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGameAIEventsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_new00
static int tolua_MyLuaBind_img_SColor_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  img::SColor* tolua_ret = (img::SColor*)  new img::SColor();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::SColor");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_new00_local
static int tolua_MyLuaBind_img_SColor_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  img::SColor* tolua_ret = (img::SColor*)  new img::SColor();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"img::SColor");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_new01
static int tolua_MyLuaBind_img_SColor_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const img::SColor* other = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
 {
  img::SColor* tolua_ret = (img::SColor*)  new img::SColor(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::SColor");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColor_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_new01_local
static int tolua_MyLuaBind_img_SColor_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const img::SColor* other = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
 {
  img::SColor* tolua_ret = (img::SColor*)  new img::SColor(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"img::SColor");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColor_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_new02
static int tolua_MyLuaBind_img_SColor_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColorf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const img::SColorf* other = ((const img::SColorf*)  tolua_tousertype(tolua_S,2,0));
 {
  img::SColor* tolua_ret = (img::SColor*)  new img::SColor(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::SColor");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColor_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_new02_local
static int tolua_MyLuaBind_img_SColor_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColorf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const img::SColorf* other = ((const img::SColorf*)  tolua_tousertype(tolua_S,2,0));
 {
  img::SColor* tolua_ret = (img::SColor*)  new img::SColor(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"img::SColor");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColor_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_new03
static int tolua_MyLuaBind_img_SColor_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  unsigned char a = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
  unsigned char r = ((unsigned char)  tolua_tonumber(tolua_S,3,0));
  unsigned char g = ((unsigned char)  tolua_tonumber(tolua_S,4,0));
  unsigned char b = ((unsigned char)  tolua_tonumber(tolua_S,5,0));
 {
  img::SColor* tolua_ret = (img::SColor*)  new img::SColor(a,r,g,b);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::SColor");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColor_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_new03_local
static int tolua_MyLuaBind_img_SColor_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  unsigned char a = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
  unsigned char r = ((unsigned char)  tolua_tonumber(tolua_S,3,0));
  unsigned char g = ((unsigned char)  tolua_tonumber(tolua_S,4,0));
  unsigned char b = ((unsigned char)  tolua_tonumber(tolua_S,5,0));
 {
  img::SColor* tolua_ret = (img::SColor*)  new img::SColor(a,r,g,b);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"img::SColor");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColor_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_new04
static int tolua_MyLuaBind_img_SColor_new04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  unsigned clr = ((unsigned)  tolua_tonumber(tolua_S,2,0));
 {
  img::SColor* tolua_ret = (img::SColor*)  new img::SColor(clr);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::SColor");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColor_new03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_new04_local
static int tolua_MyLuaBind_img_SColor_new04_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  unsigned clr = ((unsigned)  tolua_tonumber(tolua_S,2,0));
 {
  img::SColor* tolua_ret = (img::SColor*)  new img::SColor(clr);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"img::SColor");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColor_new03_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_delete00
static int tolua_MyLuaBind_img_SColor_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAlpha of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_getAlpha00
static int tolua_MyLuaBind_img_SColor_getAlpha00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAlpha'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getAlpha();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlpha'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRed of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_getRed00
static int tolua_MyLuaBind_img_SColor_getRed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRed'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getRed();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGreen of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_getGreen00
static int tolua_MyLuaBind_img_SColor_getGreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGreen'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getGreen();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGreen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBlue of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_getBlue00
static int tolua_MyLuaBind_img_SColor_getBlue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBlue'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getBlue();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBlue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAlpha of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_setAlpha00
static int tolua_MyLuaBind_img_SColor_setAlpha00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
  int a = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAlpha'",NULL);
#endif
 {
  self->setAlpha(a);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAlpha'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRed of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_setRed00
static int tolua_MyLuaBind_img_SColor_setRed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
  int r = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRed'",NULL);
#endif
 {
  self->setRed(r);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGreen of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_setGreen00
static int tolua_MyLuaBind_img_SColor_setGreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
  int g = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGreen'",NULL);
#endif
 {
  self->setGreen(g);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGreen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBlue of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_setBlue00
static int tolua_MyLuaBind_img_SColor_setBlue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
  int b = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBlue'",NULL);
#endif
 {
  self->setBlue(b);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBlue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_set00
static int tolua_MyLuaBind_img_SColor_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
  unsigned char a = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
  unsigned char r = ((unsigned char)  tolua_tonumber(tolua_S,3,0));
  unsigned char g = ((unsigned char)  tolua_tonumber(tolua_S,4,0));
  unsigned char b = ((unsigned char)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(a,r,g,b);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_set01
static int tolua_MyLuaBind_img_SColor_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* other = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*other);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_img_SColor_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_set02
static int tolua_MyLuaBind_img_SColor_set02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColor",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColorf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
  const img::SColorf* other = ((const img::SColorf*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*other);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_img_SColor_set01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColor_getInterpolated00
static int tolua_MyLuaBind_img_SColor_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const img::SColor",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const img::SColor* self = (const img::SColor*)  tolua_tousertype(tolua_S,1,0);
  img::SColor other = *((img::SColor*)  tolua_tousertype(tolua_S,2,0));
  float d = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'",NULL);
#endif
 {
  img::SColor tolua_ret = (img::SColor)  self->getInterpolated(other,d);
 {
#ifdef __cplusplus
 void* tolua_obj = new img::SColor(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"img::SColor");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(img::SColor));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"img::SColor");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: color of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_get_img__SColor_color
static int tolua_get_img__SColor_color(lua_State* tolua_S)
{
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->color);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: color of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_set_img__SColor_color
static int tolua_set_img__SColor_color(lua_State* tolua_S)
{
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->color = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: blue of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_get_img__SColor_unsigned_blue
static int tolua_get_img__SColor_unsigned_blue(lua_State* tolua_S)
{
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'blue'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->blue);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: blue of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_set_img__SColor_unsigned_blue
static int tolua_set_img__SColor_unsigned_blue(lua_State* tolua_S)
{
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'blue'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->blue = ((unsigned char)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: green of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_get_img__SColor_unsigned_green
static int tolua_get_img__SColor_unsigned_green(lua_State* tolua_S)
{
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'green'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->green);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: green of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_set_img__SColor_unsigned_green
static int tolua_set_img__SColor_unsigned_green(lua_State* tolua_S)
{
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'green'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->green = ((unsigned char)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: red of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_get_img__SColor_unsigned_red
static int tolua_get_img__SColor_unsigned_red(lua_State* tolua_S)
{
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'red'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->red);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: red of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_set_img__SColor_unsigned_red
static int tolua_set_img__SColor_unsigned_red(lua_State* tolua_S)
{
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'red'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->red = ((unsigned char)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: alpha of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_get_img__SColor_unsigned_alpha
static int tolua_get_img__SColor_unsigned_alpha(lua_State* tolua_S)
{
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'alpha'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->alpha);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: alpha of class  img::SColor */
#ifndef TOLUA_DISABLE_tolua_set_img__SColor_unsigned_alpha
static int tolua_set_img__SColor_unsigned_alpha(lua_State* tolua_S)
{
  img::SColor* self = (img::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'alpha'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->alpha = ((unsigned char)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_new00
static int tolua_MyLuaBind_img_SColorf_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  img::SColorf* tolua_ret = (img::SColorf*)  new img::SColorf();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::SColorf");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_new00_local
static int tolua_MyLuaBind_img_SColorf_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  img::SColorf* tolua_ret = (img::SColorf*)  new img::SColorf();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"img::SColorf");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_new01
static int tolua_MyLuaBind_img_SColorf_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float r = ((float)  tolua_tonumber(tolua_S,2,0));
  float g = ((float)  tolua_tonumber(tolua_S,3,0));
  float b = ((float)  tolua_tonumber(tolua_S,4,0));
 {
  img::SColorf* tolua_ret = (img::SColorf*)  new img::SColorf(r,g,b);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::SColorf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColorf_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_new01_local
static int tolua_MyLuaBind_img_SColorf_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float r = ((float)  tolua_tonumber(tolua_S,2,0));
  float g = ((float)  tolua_tonumber(tolua_S,3,0));
  float b = ((float)  tolua_tonumber(tolua_S,4,0));
 {
  img::SColorf* tolua_ret = (img::SColorf*)  new img::SColorf(r,g,b);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"img::SColorf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColorf_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_new02
static int tolua_MyLuaBind_img_SColorf_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float r = ((float)  tolua_tonumber(tolua_S,2,0));
  float g = ((float)  tolua_tonumber(tolua_S,3,0));
  float b = ((float)  tolua_tonumber(tolua_S,4,0));
  float a = ((float)  tolua_tonumber(tolua_S,5,0));
 {
  img::SColorf* tolua_ret = (img::SColorf*)  new img::SColorf(r,g,b,a);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::SColorf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColorf_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_new02_local
static int tolua_MyLuaBind_img_SColorf_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float r = ((float)  tolua_tonumber(tolua_S,2,0));
  float g = ((float)  tolua_tonumber(tolua_S,3,0));
  float b = ((float)  tolua_tonumber(tolua_S,4,0));
  float a = ((float)  tolua_tonumber(tolua_S,5,0));
 {
  img::SColorf* tolua_ret = (img::SColorf*)  new img::SColorf(r,g,b,a);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"img::SColorf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColorf_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_new03
static int tolua_MyLuaBind_img_SColorf_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const img::SColor* other = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
 {
  img::SColorf* tolua_ret = (img::SColorf*)  new img::SColorf(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::SColorf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColorf_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_new03_local
static int tolua_MyLuaBind_img_SColorf_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const img::SColor* other = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
 {
  img::SColorf* tolua_ret = (img::SColorf*)  new img::SColorf(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"img::SColorf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColorf_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_new04
static int tolua_MyLuaBind_img_SColorf_new04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColorf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const img::SColorf* other = ((const img::SColorf*)  tolua_tousertype(tolua_S,2,0));
 {
  img::SColorf* tolua_ret = (img::SColorf*)  new img::SColorf(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::SColorf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColorf_new03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_new04_local
static int tolua_MyLuaBind_img_SColorf_new04_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColorf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const img::SColorf* other = ((const img::SColorf*)  tolua_tousertype(tolua_S,2,0));
 {
  img::SColorf* tolua_ret = (img::SColorf*)  new img::SColorf(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"img::SColorf");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_SColorf_new03_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_delete00
static int tolua_MyLuaBind_img_SColorf_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: r of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_get_img__SColorf_r
static int tolua_get_img__SColorf_r(lua_State* tolua_S)
{
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'r'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->r);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: r of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_set_img__SColorf_r
static int tolua_set_img__SColorf_r(lua_State* tolua_S)
{
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'r'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->r = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: g of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_get_img__SColorf_g
static int tolua_get_img__SColorf_g(lua_State* tolua_S)
{
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'g'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->g);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: g of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_set_img__SColorf_g
static int tolua_set_img__SColorf_g(lua_State* tolua_S)
{
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'g'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->g = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: b of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_get_img__SColorf_b
static int tolua_get_img__SColorf_b(lua_State* tolua_S)
{
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'b'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->b);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: b of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_set_img__SColorf_b
static int tolua_set_img__SColorf_b(lua_State* tolua_S)
{
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'b'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->b = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: a of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_get_img__SColorf_a
static int tolua_get_img__SColorf_a(lua_State* tolua_S)
{
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'a'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->a);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: a of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_set_img__SColorf_a
static int tolua_set_img__SColorf_a(lua_State* tolua_S)
{
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'a'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->a = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_set00
static int tolua_MyLuaBind_img_SColorf_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
  float rr = ((float)  tolua_tonumber(tolua_S,2,0));
  float gg = ((float)  tolua_tonumber(tolua_S,3,0));
  float bb = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(rr,gg,bb);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_set01
static int tolua_MyLuaBind_img_SColorf_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
  float rr = ((float)  tolua_tonumber(tolua_S,2,0));
  float gg = ((float)  tolua_tonumber(tolua_S,3,0));
  float bb = ((float)  tolua_tonumber(tolua_S,4,0));
  float aa = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(rr,gg,bb,aa);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_img_SColorf_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_set02
static int tolua_MyLuaBind_img_SColorf_set02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* other = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*other);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_img_SColorf_set01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  img::SColorf */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_SColorf_set03
static int tolua_MyLuaBind_img_SColorf_set03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::SColorf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColorf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  img::SColorf* self = (img::SColorf*)  tolua_tousertype(tolua_S,1,0);
  const img::SColorf* other = ((const img::SColorf*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*other);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_img_SColorf_set02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDimension of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_getDimension00
static int tolua_MyLuaBind_img_IImage_getDimension00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const img::IImage",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const img::IImage* self = (const img::IImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDimension'",NULL);
#endif
 {
  const core::dimension2di& tolua_ret = (const core::dimension2di&)  self->getDimension();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::dimension2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDimension'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPixel of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_getPixel00
static int tolua_MyLuaBind_img_IImage_getPixel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const img::IImage",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const img::IImage* self = (const img::IImage*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPixel'",NULL);
#endif
 {
  img::SColor tolua_ret = (img::SColor)  self->getPixel(x,y);
 {
#ifdef __cplusplus
 void* tolua_obj = new img::SColor(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"img::SColor");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(img::SColor));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"img::SColor");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPixel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPixel of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_setPixel00
static int tolua_MyLuaBind_img_IImage_setPixel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPixel'",NULL);
#endif
 {
  self->setPixel(x,y,*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPixel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operate of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_operate00
static int tolua_MyLuaBind_img_IImage_operate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  img::E_IMAGE_OPERATION op = ((img::E_IMAGE_OPERATION) (int)  tolua_tonumber(tolua_S,2,0));
  float arg = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operate'",NULL);
#endif
 {
  self->operate(op,arg);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'operate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: blendWith of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_blendWith00
static int tolua_MyLuaBind_img_IImage_blendWith00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::IImage",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  const img::IImage* img = ((const img::IImage*)  tolua_tousertype(tolua_S,2,0));
  img::E_IMAGE_OPERATION op = ((img::E_IMAGE_OPERATION) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'blendWith'",NULL);
#endif
 {
  self->blendWith(img,op);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'blendWith'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: smoothingFilter of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_smoothingFilter00
static int tolua_MyLuaBind_img_IImage_smoothingFilter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'smoothingFilter'",NULL);
#endif
 {
  self->smoothingFilter();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'smoothingFilter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: stampingFilter of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_stampingFilter00
static int tolua_MyLuaBind_img_IImage_stampingFilter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'stampingFilter'",NULL);
#endif
 {
  self->stampingFilter();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'stampingFilter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getColorFormat of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_getColorFormat00
static int tolua_MyLuaBind_img_IImage_getColorFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getColorFormat'",NULL);
#endif
 {
  img::E_COLOR_FORMAT tolua_ret = (img::E_COLOR_FORMAT)  self->getColorFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColorFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: convertTo of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_convertTo00
static int tolua_MyLuaBind_img_IImage_convertTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  img::E_COLOR_FORMAT new_color_format = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'convertTo'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->convertTo(new_color_format);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'convertTo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: copyTo of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_copyTo00
static int tolua_MyLuaBind_img_IImage_copyTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"img::IImage",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  img::IImage* target = ((img::IImage*)  tolua_tousertype(tolua_S,2,0));
  int x = ((int)  tolua_tonumber(tolua_S,3,0));
  int y = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'copyTo'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->copyTo(target,x,y);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'copyTo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: copyTo of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_copyTo01
static int tolua_MyLuaBind_img_IImage_copyTo01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"img::IImage",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  img::IImage* target = ((img::IImage*)  tolua_tousertype(tolua_S,2,0));
  const core::position2di* pos = ((const core::position2di*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'copyTo'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->copyTo(target,*pos);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_IImage_copyTo00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: fill of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_fill00
static int tolua_MyLuaBind_img_IImage_fill00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'fill'",NULL);
#endif
 {
  self->fill(*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'fill'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: floodFill of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_floodFill00
static int tolua_MyLuaBind_img_IImage_floodFill00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const img::SColor",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,5,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  int startx = ((int)  tolua_tonumber(tolua_S,2,0));
  int starty = ((int)  tolua_tonumber(tolua_S,3,0));
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,4,0));
  const img::SColor* with_color = ((const img::SColor*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'floodFill'",NULL);
#endif
 {
  self->floodFill(startx,starty,*color,*with_color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'floodFill'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: drawBorder of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_drawBorder00
static int tolua_MyLuaBind_img_IImage_drawBorder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  const core::recti* r = ((const core::recti*)  tolua_tousertype(tolua_S,2,0));
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'drawBorder'",NULL);
#endif
 {
  self->drawBorder(*r,*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'drawBorder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: drawBorder of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_drawBorder01
static int tolua_MyLuaBind_img_IImage_drawBorder01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,6,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  int x2 = ((int)  tolua_tonumber(tolua_S,4,0));
  int y2 = ((int)  tolua_tonumber(tolua_S,5,0));
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,6,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'drawBorder'",NULL);
#endif
 {
  self->drawBorder(x,y,x2,y2,*color);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_img_IImage_drawBorder00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: copyTo of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_copyTo02
static int tolua_MyLuaBind_img_IImage_copyTo02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"img::IImage",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  img::IImage* target = ((img::IImage*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'copyTo'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->copyTo(target);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_IImage_copyTo01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: resizeTo of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_resizeTo00
static int tolua_MyLuaBind_img_IImage_resizeTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::dimension2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  const core::dimension2di* size = ((const core::dimension2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'resizeTo'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->resizeTo(*size);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'resizeTo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeColorKey of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_makeColorKey00
static int tolua_MyLuaBind_img_IImage_makeColorKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeColorKey'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->makeColorKey(*color);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'makeColorKey'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeColorKey of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_makeColorKey01
static int tolua_MyLuaBind_img_IImage_makeColorKey01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::position2di",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  const core::position2di* colorKeyPixelPos = ((const core::position2di*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeColorKey'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->makeColorKey(*colorKeyPixelPos);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_img_IImage_makeColorKey00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeNormalMap of class  img::IImage */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImage_makeNormalMap00
static int tolua_MyLuaBind_img_IImage_makeNormalMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImage",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImage* self = (img::IImage*)  tolua_tousertype(tolua_S,1,0);
  float amplitude = ((float)  tolua_tonumber(tolua_S,2,0));
  bool swapX = ((bool)  tolua_toboolean(tolua_S,3,0));
  bool swapY = ((bool)  tolua_toboolean(tolua_S,4,0));
  bool hmapInAlpha = ((bool)  tolua_toboolean(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeNormalMap'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->makeNormalMap(amplitude,swapX,swapY,hmapInAlpha);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'makeNormalMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  img::IImageLibrary */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImageLibrary_getSingleton00
static int tolua_MyLuaBind_img_IImageLibrary_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"img::IImageLibrary",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  img::IImageLibrary& tolua_ret = (img::IImageLibrary&)  img::IImageLibrary::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"img::IImageLibrary");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addImage of class  img::IImageLibrary */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImageLibrary_addImage00
static int tolua_MyLuaBind_img_IImageLibrary_addImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImageLibrary",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::dimension2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImageLibrary* self = (img::IImageLibrary*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
  const core::dimension2di* size = ((const core::dimension2di*)  tolua_tousertype(tolua_S,3,0));
  img::E_COLOR_FORMAT format = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addImage'",NULL);
#endif
 {
  img::IImage* tolua_ret = (img::IImage*)  self->addImage(name,*size,format);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::IImage");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addImage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getImage of class  img::IImageLibrary */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImageLibrary_getImage00
static int tolua_MyLuaBind_img_IImageLibrary_getImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImageLibrary",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImageLibrary* self = (img::IImageLibrary*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getImage'",NULL);
#endif
 {
  img::IImage* tolua_ret = (img::IImage*)  self->getImage(filename);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::IImage");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getImage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findImage of class  img::IImageLibrary */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImageLibrary_findImage00
static int tolua_MyLuaBind_img_IImageLibrary_findImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImageLibrary",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImageLibrary* self = (img::IImageLibrary*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findImage'",NULL);
#endif
 {
  img::IImage* tolua_ret = (img::IImage*)  self->findImage(filename);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::IImage");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findImage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findImageFileName of class  img::IImageLibrary */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImageLibrary_findImageFileName00
static int tolua_MyLuaBind_img_IImageLibrary_findImageFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImageLibrary",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"img::IImage",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImageLibrary* self = (img::IImageLibrary*)  tolua_tousertype(tolua_S,1,0);
  img::IImage* image = ((img::IImage*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findImageFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->findImageFileName(image);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findImageFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findImageFullFileName of class  img::IImageLibrary */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImageLibrary_findImageFullFileName00
static int tolua_MyLuaBind_img_IImageLibrary_findImageFullFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImageLibrary",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"img::IImage",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImageLibrary* self = (img::IImageLibrary*)  tolua_tousertype(tolua_S,1,0);
  img::IImage* image = ((img::IImage*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findImageFullFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->findImageFullFileName(image);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findImageFullFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeImage of class  img::IImageLibrary */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImageLibrary_removeImage00
static int tolua_MyLuaBind_img_IImageLibrary_removeImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImageLibrary",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"img::IImage",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImageLibrary* self = (img::IImageLibrary*)  tolua_tousertype(tolua_S,1,0);
  img::IImage* image = ((img::IImage*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeImage'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeImage(image);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeImage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearUnusedImageCache of class  img::IImageLibrary */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImageLibrary_clearUnusedImageCache00
static int tolua_MyLuaBind_img_IImageLibrary_clearUnusedImageCache00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImageLibrary",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImageLibrary* self = (img::IImageLibrary*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearUnusedImageCache'",NULL);
#endif
 {
  self->clearUnusedImageCache();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearUnusedImageCache'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: saveImageToFile of class  img::IImageLibrary */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_img_IImageLibrary_saveImageToFile00
static int tolua_MyLuaBind_img_IImageLibrary_saveImageToFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"img::IImageLibrary",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"img::IImage",0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  img::IImageLibrary* self = (img::IImageLibrary*)  tolua_tousertype(tolua_S,1,0);
  img::IImage* image = ((img::IImage*)  tolua_tousertype(tolua_S,2,0));
  const char* filename = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'saveImageToFile'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->saveImageToFile(image,filename);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'saveImageToFile'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: MyCEGUI::create */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_MyCEGUI_create00
static int tolua_MyLuaBind_MyCEGUI_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const char* cegui_ini_file_name = ((const char*)  tolua_tostring(tolua_S,1,0));
 {
  bool tolua_ret = (bool)  MyCEGUI::create(cegui_ini_file_name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: MyCEGUI::onEvent */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_MyCEGUI_onEvent00
static int tolua_MyLuaBind_MyCEGUI_onEvent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const io::SEvent",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const io::SEvent* event = ((const io::SEvent*)  tolua_tousertype(tolua_S,1,0));
 {
  bool tolua_ret = (bool)  MyCEGUI::onEvent(*event);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'onEvent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: MyCEGUI::registerForRendering */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_MyCEGUI_registerForRendering00
static int tolua_MyLuaBind_MyCEGUI_registerForRendering00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  MyCEGUI::registerForRendering();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerForRendering'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: MyCEGUI::destroy */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_MyCEGUI_destroy00
static int tolua_MyLuaBind_MyCEGUI_destroy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  MyCEGUI::destroy();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'destroy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: MyCEGUI::setWindowTextUtf8 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_MyCEGUI_setWindowTextUtf800
static int tolua_MyLuaBind_MyCEGUI_setWindowTextUtf800(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CEGUI::Window",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CEGUI::Window* win = ((CEGUI::Window*)  tolua_tousertype(tolua_S,1,0));
  const char* utf8_text = ((const char*)  tolua_tostring(tolua_S,2,0));
 {
  MyCEGUI::setWindowTextUtf8(win,utf8_text);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setWindowTextUtf8'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: MyCEGUI::setListboxItemTextUtf8 */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_MyCEGUI_setListboxItemTextUtf800
static int tolua_MyLuaBind_MyCEGUI_setListboxItemTextUtf800(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CEGUI::ListboxItem",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CEGUI::ListboxItem* item = ((CEGUI::ListboxItem*)  tolua_tousertype(tolua_S,1,0));
  const char* utf8_text = ((const char*)  tolua_tostring(tolua_S,2,0));
 {
  MyCEGUI::setListboxItemTextUtf8(item,utf8_text);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setListboxItemTextUtf8'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: MyCEGUI::getTexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_MyCEGUI_getTexture00
static int tolua_MyLuaBind_MyCEGUI_getTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CEGUI::Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CEGUI::Texture* ceguitex = ((CEGUI::Texture*)  tolua_tousertype(tolua_S,1,0));
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  MyCEGUI::getTexture(*ceguitex);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: MyCEGUI::setTexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_MyCEGUI_setTexture00
static int tolua_MyLuaBind_MyCEGUI_setTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CEGUI::Texture",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CEGUI::Texture* ceguitex = ((CEGUI::Texture*)  tolua_tousertype(tolua_S,1,0));
  vid::ITexture* mytex = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
  bool useAlphaBlending = ((bool)  tolua_toboolean(tolua_S,3,0));
 {
  MyCEGUI::setTexture(*ceguitex,mytex,useAlphaBlending);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: lock of class  vid::ITexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_ITexture_lock00
static int tolua_MyLuaBind_vid_ITexture_lock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::ITexture* self = (vid::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'lock'",NULL);
#endif
 {
  img::IImage* tolua_ret = (img::IImage*)  self->lock();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::IImage");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'lock'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: unlock of class  vid::ITexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_ITexture_unlock00
static int tolua_MyLuaBind_vid_ITexture_unlock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::ITexture* self = (vid::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'unlock'",NULL);
#endif
 {
  self->unlock();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'unlock'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOriginalSize of class  vid::ITexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_ITexture_getOriginalSize00
static int tolua_MyLuaBind_vid_ITexture_getOriginalSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::ITexture* self = (vid::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOriginalSize'",NULL);
#endif
 {
  const core::dimension2di& tolua_ret = (const core::dimension2di&)  self->getOriginalSize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::dimension2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOriginalSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSize of class  vid::ITexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_ITexture_getSize00
static int tolua_MyLuaBind_vid_ITexture_getSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::ITexture* self = (vid::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSize'",NULL);
#endif
 {
  const core::dimension2di& tolua_ret = (const core::dimension2di&)  self->getSize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::dimension2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getColorFormat of class  vid::ITexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_ITexture_getColorFormat00
static int tolua_MyLuaBind_vid_ITexture_getColorFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::ITexture* self = (vid::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getColorFormat'",NULL);
#endif
 {
  img::E_COLOR_FORMAT tolua_ret = (img::E_COLOR_FORMAT)  self->getColorFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColorFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  vid::ITexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_ITexture_getType00
static int tolua_MyLuaBind_vid_ITexture_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::ITexture* self = (vid::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'",NULL);
#endif
 {
  vid::E_TEXTURE_TYPE tolua_ret = (vid::E_TEXTURE_TYPE)  self->getType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFormat of class  vid::ITexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_ITexture_getFormat00
static int tolua_MyLuaBind_vid_ITexture_getFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::ITexture* self = (vid::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFormat'",NULL);
#endif
 {
  vid::E_TEXTURE_FORMAT tolua_ret = (vid::E_TEXTURE_FORMAT)  self->getFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: hasMipMaps of class  vid::ITexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_ITexture_hasMipMaps00
static int tolua_MyLuaBind_vid_ITexture_hasMipMaps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::ITexture* self = (vid::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'hasMipMaps'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->hasMipMaps();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'hasMipMaps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxMipMapLevels of class  vid::ITexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_ITexture_getMaxMipMapLevels00
static int tolua_MyLuaBind_vid_ITexture_getMaxMipMapLevels00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::ITexture* self = (vid::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxMipMapLevels'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getMaxMipMapLevels();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxMipMapLevels'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isCompressed of class  vid::ITexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_ITexture_isCompressed00
static int tolua_MyLuaBind_vid_ITexture_isCompressed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::ITexture* self = (vid::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isCompressed'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isCompressed();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isCompressed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isRenderTarget of class  vid::ITexture */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_ITexture_isRenderTarget00
static int tolua_MyLuaBind_vid_ITexture_isRenderTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::ITexture* self = (vid::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isRenderTarget'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isRenderTarget();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isRenderTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getSingleton00
static int tolua_MyLuaBind_vid_IVideoDriver_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  vid::IVideoDriver& tolua_ret = (vid::IVideoDriver&)  vid::IVideoDriver::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"vid::IVideoDriver");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRenderPath of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setRenderPath00
static int tolua_MyLuaBind_vid_IVideoDriver_setRenderPath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::E_RENDER_PATH renderPath = ((vid::E_RENDER_PATH) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRenderPath'",NULL);
#endif
 {
  self->setRenderPath(renderPath);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRenderPath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRenderPath of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getRenderPath00
static int tolua_MyLuaBind_vid_IVideoDriver_getRenderPath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRenderPath'",NULL);
#endif
 {
  vid::E_RENDER_PATH tolua_ret = (vid::E_RENDER_PATH)  self->getRenderPath();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRenderPath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBackColorFormat of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getBackColorFormat00
static int tolua_MyLuaBind_vid_IVideoDriver_getBackColorFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBackColorFormat'",NULL);
#endif
 {
  img::E_COLOR_FORMAT tolua_ret = (img::E_COLOR_FORMAT)  self->getBackColorFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBackColorFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearDepth of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_clearDepth00
static int tolua_MyLuaBind_vid_IVideoDriver_clearDepth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearDepth'",NULL);
#endif
 {
  self->clearDepth();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearDepth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearStencil of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_clearStencil00
static int tolua_MyLuaBind_vid_IVideoDriver_clearStencil00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearStencil'",NULL);
#endif
 {
  self->clearStencil();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearStencil'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearColor of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_clearColor00
static int tolua_MyLuaBind_vid_IVideoDriver_clearColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearColor'",NULL);
#endif
 {
  self->clearColor(*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearColor of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_clearColor01
static int tolua_MyLuaBind_vid_IVideoDriver_clearColor01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  unsigned char r = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
  unsigned char g = ((unsigned char)  tolua_tonumber(tolua_S,3,0));
  unsigned char b = ((unsigned char)  tolua_tonumber(tolua_S,4,0));
  unsigned char a = ((unsigned char)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearColor'",NULL);
#endif
 {
  self->clearColor(r,g,b,a);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_clearColor00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColorMask of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setColorMask00
static int tolua_MyLuaBind_vid_IVideoDriver_setColorMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  bool r = ((bool)  tolua_toboolean(tolua_S,2,0));
  bool g = ((bool)  tolua_toboolean(tolua_S,3,0));
  bool b = ((bool)  tolua_toboolean(tolua_S,4,0));
  bool a = ((bool)  tolua_toboolean(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColorMask'",NULL);
#endif
 {
  self->setColorMask(r,g,b,a);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setColorMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColorMask of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setColorMask01
static int tolua_MyLuaBind_vid_IVideoDriver_setColorMask01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  unsigned mask = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColorMask'",NULL);
#endif
 {
  self->setColorMask(mask);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_setColorMask00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getColorMask of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getColorMask00
static int tolua_MyLuaBind_vid_IVideoDriver_getColorMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getColorMask'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getColorMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColorMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBackgroundColor of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setBackgroundColor00
static int tolua_MyLuaBind_vid_IVideoDriver_setBackgroundColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBackgroundColor'",NULL);
#endif
 {
  self->setBackgroundColor(*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBackgroundColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBackgroundColor of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getBackgroundColor00
static int tolua_MyLuaBind_vid_IVideoDriver_getBackgroundColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBackgroundColor'",NULL);
#endif
 {
  const img::SColor& tolua_ret = (const img::SColor&)  self->getBackgroundColor();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const img::SColor");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBackgroundColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: render2DRect of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_render2DRect00
static int tolua_MyLuaBind_vid_IVideoDriver_render2DRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SMaterial",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::rectf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const vid::SMaterial* material = ((const vid::SMaterial*)  tolua_tousertype(tolua_S,2,0));
  const core::rectf* drawRect = ((const core::rectf*)  tolua_tousertype(tolua_S,3,0));
  const core::rectf* texRect = ((const core::rectf*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'render2DRect'",NULL);
#endif
 {
  self->render2DRect(*material,*drawRect,*texRect);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'render2DRect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeScreenShotTexture of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_makeScreenShotTexture00
static int tolua_MyLuaBind_vid_IVideoDriver_makeScreenShotTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeScreenShotTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->makeScreenShotTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'makeScreenShotTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeScreenShotImage of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_makeScreenShotImage00
static int tolua_MyLuaBind_vid_IVideoDriver_makeScreenShotImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeScreenShotImage'",NULL);
#endif
 {
  img::IImage* tolua_ret = (img::IImage*)  self->makeScreenShotImage();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"img::IImage");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'makeScreenShotImage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: beginRendering of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_beginRendering00
static int tolua_MyLuaBind_vid_IVideoDriver_beginRendering00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'beginRendering'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->beginRendering();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'beginRendering'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: renderAll of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_renderAll00
static int tolua_MyLuaBind_vid_IVideoDriver_renderAll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'renderAll'",NULL);
#endif
 {
  self->renderAll();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'renderAll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: renderPass of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_renderPass00
static int tolua_MyLuaBind_vid_IVideoDriver_renderPass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::E_RENDER_PASS pass = ((vid::E_RENDER_PASS) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'renderPass'",NULL);
#endif
 {
  self->renderPass(pass);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'renderPass'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: endRendering of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_endRendering00
static int tolua_MyLuaBind_vid_IVideoDriver_endRendering00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'endRendering'",NULL);
#endif
 {
  self->endRendering();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'endRendering'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: swapBuffers of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_swapBuffers00
static int tolua_MyLuaBind_vid_IVideoDriver_swapBuffers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'swapBuffers'",NULL);
#endif
 {
  self->swapBuffers();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'swapBuffers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isRendering of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_isRendering00
static int tolua_MyLuaBind_vid_IVideoDriver_isRendering00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isRendering'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isRendering();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isRendering'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDynamicLightsMaximalAmount of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getDynamicLightsMaximalAmount00
static int tolua_MyLuaBind_vid_IVideoDriver_getDynamicLightsMaximalAmount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDynamicLightsMaximalAmount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getDynamicLightsMaximalAmount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDynamicLightsMaximalAmount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDynamicLightsCount of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getDynamicLightsCount00
static int tolua_MyLuaBind_vid_IVideoDriver_getDynamicLightsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDynamicLightsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getDynamicLightsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDynamicLightsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScreenSize of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getScreenSize00
static int tolua_MyLuaBind_vid_IVideoDriver_getScreenSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScreenSize'",NULL);
#endif
 {
  const core::dimension2di& tolua_ret = (const core::dimension2di&)  self->getScreenSize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::dimension2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScreenSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCurrentFPS of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getCurrentFPS00
static int tolua_MyLuaBind_vid_IVideoDriver_getCurrentFPS00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCurrentFPS'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getCurrentFPS();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentFPS'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAverageFPS of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getAverageFPS00
static int tolua_MyLuaBind_vid_IVideoDriver_getAverageFPS00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAverageFPS'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getAverageFPS();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAverageFPS'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRenderedTrianglesCount of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getRenderedTrianglesCount00
static int tolua_MyLuaBind_vid_IVideoDriver_getRenderedTrianglesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::E_RENDER_PASS pass = ((vid::E_RENDER_PASS) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRenderedTrianglesCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getRenderedTrianglesCount(pass);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRenderedTrianglesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRenderedTrianglesCount of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getRenderedTrianglesCount01
static int tolua_MyLuaBind_vid_IVideoDriver_getRenderedTrianglesCount01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRenderedTrianglesCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getRenderedTrianglesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_getRenderedTrianglesCount00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRenderedDIPsCount of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getRenderedDIPsCount00
static int tolua_MyLuaBind_vid_IVideoDriver_getRenderedDIPsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::E_RENDER_PASS pass = ((vid::E_RENDER_PASS) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRenderedDIPsCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getRenderedDIPsCount(pass);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRenderedDIPsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRenderedDIPsCount of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getRenderedDIPsCount01
static int tolua_MyLuaBind_vid_IVideoDriver_getRenderedDIPsCount01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRenderedDIPsCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getRenderedDIPsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_getRenderedDIPsCount00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaximalColorAttachmentsAmount of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getMaximalColorAttachmentsAmount00
static int tolua_MyLuaBind_vid_IVideoDriver_getMaximalColorAttachmentsAmount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaximalColorAttachmentsAmount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getMaximalColorAttachmentsAmount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaximalColorAttachmentsAmount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaximalTextureUnitsAmount of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getMaximalTextureUnitsAmount00
static int tolua_MyLuaBind_vid_IVideoDriver_getMaximalTextureUnitsAmount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaximalTextureUnitsAmount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getMaximalTextureUnitsAmount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaximalTextureUnitsAmount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaximalTextureSize of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getMaximalTextureSize00
static int tolua_MyLuaBind_vid_IVideoDriver_getMaximalTextureSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaximalTextureSize'",NULL);
#endif
 {
  const core::dimension2di& tolua_ret = (const core::dimension2di&)  self->getMaximalTextureSize();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::dimension2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaximalTextureSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGlobalAmbientColor of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setGlobalAmbientColor00
static int tolua_MyLuaBind_vid_IVideoDriver_setGlobalAmbientColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColorf",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const img::SColorf* color = ((const img::SColorf*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGlobalAmbientColor'",NULL);
#endif
 {
  self->setGlobalAmbientColor(*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGlobalAmbientColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGlobalAmbientColor of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getGlobalAmbientColor00
static int tolua_MyLuaBind_vid_IVideoDriver_getGlobalAmbientColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGlobalAmbientColor'",NULL);
#endif
 {
  const img::SColorf& tolua_ret = (const img::SColorf&)  self->getGlobalAmbientColor();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const img::SColorf");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGlobalAmbientColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGlobalLightParams of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setGlobalLightParams00
static int tolua_MyLuaBind_vid_IVideoDriver_setGlobalLightParams00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SLight",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const vid::SLight* light = ((const vid::SLight*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGlobalLightParams'",NULL);
#endif
 {
  self->setGlobalLightParams(*light);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGlobalLightParams'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGlobalLightParams of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getGlobalLightParams00
static int tolua_MyLuaBind_vid_IVideoDriver_getGlobalLightParams00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGlobalLightParams'",NULL);
#endif
 {
  const vid::SLight& tolua_ret = (const vid::SLight&)  self->getGlobalLightParams();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const vid::SLight");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGlobalLightParams'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setShadowColor of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setShadowColor00
static int tolua_MyLuaBind_vid_IVideoDriver_setShadowColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setShadowColor'",NULL);
#endif
 {
  self->setShadowColor(*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setShadowColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getShadowColor of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getShadowColor00
static int tolua_MyLuaBind_vid_IVideoDriver_getShadowColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getShadowColor'",NULL);
#endif
 {
  const img::SColor& tolua_ret = (const img::SColor&)  self->getShadowColor();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const img::SColor");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getShadowColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getName of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getName00
static int tolua_MyLuaBind_vid_IVideoDriver_getName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTexture of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getTexture00
static int tolua_MyLuaBind_vid_IVideoDriver_getTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getTexture(name);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addTexture of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_addTexture00
static int tolua_MyLuaBind_vid_IVideoDriver_addTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"img::IImage",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
  img::IImage* image = ((img::IImage*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->addTexture(name,image);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addTexture of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_addTexture01
static int tolua_MyLuaBind_vid_IVideoDriver_addTexture01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::dimension2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
  const core::dimension2di* size = ((const core::dimension2di*)  tolua_tousertype(tolua_S,3,0));
  img::E_COLOR_FORMAT format = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->addTexture(name,*size,format);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_addTexture00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: addTexture of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_addTexture02
static int tolua_MyLuaBind_vid_IVideoDriver_addTexture02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
  unsigned width = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned height = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  img::E_COLOR_FORMAT format = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->addTexture(name,width,height,format);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_addTexture01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: addRenderTargetTexture of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_addRenderTargetTexture00
static int tolua_MyLuaBind_vid_IVideoDriver_addRenderTargetTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::dimension2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
  const core::dimension2di* size = ((const core::dimension2di*)  tolua_tousertype(tolua_S,3,0));
  img::E_COLOR_FORMAT format = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addRenderTargetTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->addRenderTargetTexture(name,*size,format);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addRenderTargetTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addRenderTargetTexture of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_addRenderTargetTexture01
static int tolua_MyLuaBind_vid_IVideoDriver_addRenderTargetTexture01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
  unsigned width = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned height = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  img::E_COLOR_FORMAT format = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addRenderTargetTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->addRenderTargetTexture(name,width,height,format);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_addRenderTargetTexture00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeTexture of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_removeTexture00
static int tolua_MyLuaBind_vid_IVideoDriver_removeTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* texture = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeTexture'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeTexture(texture);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFont of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getFont00
static int tolua_MyLuaBind_vid_IVideoDriver_getFont00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFont'",NULL);
#endif
 {
  vid::IFont* tolua_ret = (vid::IFont*)  self->getFont(filename);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IFont");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFont'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBuiltInFont of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getBuiltInFont00
static int tolua_MyLuaBind_vid_IVideoDriver_getBuiltInFont00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBuiltInFont'",NULL);
#endif
 {
  vid::IFont* tolua_ret = (vid::IFont*)  self->getBuiltInFont();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IFont");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBuiltInFont'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTextureCreationFlag of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setTextureCreationFlag00
static int tolua_MyLuaBind_vid_IVideoDriver_setTextureCreationFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::E_TEXTURE_CREATION_FLAG flag = ((vid::E_TEXTURE_CREATION_FLAG) (int)  tolua_tonumber(tolua_S,2,0));
  bool enabled = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTextureCreationFlag'",NULL);
#endif
 {
  self->setTextureCreationFlag(flag,enabled);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTextureCreationFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTextureCreationFlag of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getTextureCreationFlag00
static int tolua_MyLuaBind_vid_IVideoDriver_getTextureCreationFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::E_TEXTURE_CREATION_FLAG flag = ((vid::E_TEXTURE_CREATION_FLAG) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTextureCreationFlag'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getTextureCreationFlag(flag);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTextureCreationFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDriverType of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getDriverType00
static int tolua_MyLuaBind_vid_IVideoDriver_getDriverType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDriverType'",NULL);
#endif
 {
  vid::E_DRIVER_TYPE tolua_ret = (vid::E_DRIVER_TYPE)  self->getDriverType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDriverType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDriverFamily of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getDriverFamily00
static int tolua_MyLuaBind_vid_IVideoDriver_getDriverFamily00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDriverFamily'",NULL);
#endif
 {
  vid::E_DRIVER_FAMILY tolua_ret = (vid::E_DRIVER_FAMILY)  self->getDriverFamily();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDriverFamily'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBackgroundColor of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setBackgroundColor01
static int tolua_MyLuaBind_vid_IVideoDriver_setBackgroundColor01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBackgroundColor'",NULL);
#endif
 {
  self->setBackgroundColor(*color);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_setBackgroundColor00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBackgroundColor of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setBackgroundColor02
static int tolua_MyLuaBind_vid_IVideoDriver_setBackgroundColor02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBackgroundColor'",NULL);
#endif
 {
  self->setBackgroundColor(*color);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_setBackgroundColor01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: findTexture of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_findTexture00
static int tolua_MyLuaBind_vid_IVideoDriver_findTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->findTexture(name);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findTextureName of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_findTextureName00
static int tolua_MyLuaBind_vid_IVideoDriver_findTextureName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* texture = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findTextureName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->findTextureName(texture);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findTextureName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTextureName of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setTextureName00
static int tolua_MyLuaBind_vid_IVideoDriver_setTextureName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* texture = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
  const char* name = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTextureName'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setTextureName(texture,name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTextureName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setViewPort of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setViewPort00
static int tolua_MyLuaBind_vid_IVideoDriver_setViewPort00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  int left = ((int)  tolua_tonumber(tolua_S,2,0));
  int top = ((int)  tolua_tonumber(tolua_S,3,0));
  int right = ((int)  tolua_tonumber(tolua_S,4,0));
  int bottom = ((int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setViewPort'",NULL);
#endif
 {
  self->setViewPort(left,top,right,bottom);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setViewPort'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewPort of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getViewPort00
static int tolua_MyLuaBind_vid_IVideoDriver_getViewPort00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewPort'",NULL);
#endif
 {
  const core::recti& tolua_ret = (const core::recti&)  self->getViewPort();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::recti");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewPort'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFog of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setFog00
static int tolua_MyLuaBind_vid_IVideoDriver_setFog00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SFog",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const vid::SFog* fog = ((const vid::SFog*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFog'",NULL);
#endif
 {
  self->setFog(*fog);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFog'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFog of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getFog00
static int tolua_MyLuaBind_vid_IVideoDriver_getFog00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFog'",NULL);
#endif
 {
  const vid::SFog& tolua_ret = (const vid::SFog&)  self->getFog();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const vid::SFog");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFog'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVideoModeList of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getVideoModeList00
static int tolua_MyLuaBind_vid_IVideoDriver_getVideoModeList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVideoModeList'",NULL);
#endif
 {
  vid::IVideoModeList* tolua_ret = (vid::IVideoModeList*)  self->getVideoModeList();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IVideoModeList");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVideoModeList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScreenCoordinatesFrom3DPosition of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getScreenCoordinatesFrom3DPosition00
static int tolua_MyLuaBind_vid_IVideoDriver_getScreenCoordinatesFrom3DPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos3d = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScreenCoordinatesFrom3DPosition'",NULL);
#endif
 {
  const core::position2di& tolua_ret = (const core::position2di&)  self->getScreenCoordinatesFrom3DPosition(*pos3d);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::position2di");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScreenCoordinatesFrom3DPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScreenRelativeCoordinatesFrom3DPosition of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getScreenRelativeCoordinatesFrom3DPosition00
static int tolua_MyLuaBind_vid_IVideoDriver_getScreenRelativeCoordinatesFrom3DPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos3d = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScreenRelativeCoordinatesFrom3DPosition'",NULL);
#endif
 {
  const core::position2df& tolua_ret = (const core::position2df&)  self->getScreenRelativeCoordinatesFrom3DPosition(*pos3d);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::position2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScreenRelativeCoordinatesFrom3DPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScreenProjectionCoordinatesFrom3DPosition of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getScreenProjectionCoordinatesFrom3DPosition00
static int tolua_MyLuaBind_vid_IVideoDriver_getScreenProjectionCoordinatesFrom3DPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* pos3d = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScreenProjectionCoordinatesFrom3DPosition'",NULL);
#endif
 {
  const core::position2df& tolua_ret = (const core::position2df&)  self->getScreenProjectionCoordinatesFrom3DPosition(*pos3d);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::position2df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScreenProjectionCoordinatesFrom3DPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScreenRectFrom3DVolume of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getScreenRectFrom3DVolume00
static int tolua_MyLuaBind_vid_IVideoDriver_getScreenRectFrom3DVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::aabbox3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::IVideoDriver* self = (const vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const core::aabbox3df* box3d = ((const core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScreenRectFrom3DVolume'",NULL);
#endif
 {
  const core::recti& tolua_ret = (const core::recti&)  self->getScreenRectFrom3DVolume(*box3d);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::recti");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScreenRectFrom3DVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: register2DImageForRendering of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_register2DImageForRendering00
static int tolua_MyLuaBind_vid_IVideoDriver_register2DImageForRendering00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SMaterial",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,5,"img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const vid::SMaterial* material = ((const vid::SMaterial*)  tolua_tousertype(tolua_S,2,0));
  const core::rectf* drawRect = ((const core::rectf*)  tolua_tousertype(tolua_S,3,0));
  const core::rectf* texRect = ((const core::rectf*)  tolua_tousertype(tolua_S,4,0));
  img::SColor color = *((img::SColor*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'register2DImageForRendering'",NULL);
#endif
 {
  self->register2DImageForRendering(*material,*drawRect,*texRect,color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'register2DImageForRendering'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: register2DImageForRendering of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_register2DImageForRendering01
static int tolua_MyLuaBind_vid_IVideoDriver_register2DImageForRendering01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,5,"img::SColor",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,6,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* texture = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
  const core::rectf* drawRect = ((const core::rectf*)  tolua_tousertype(tolua_S,3,0));
  const core::rectf* texRect = ((const core::rectf*)  tolua_tousertype(tolua_S,4,0));
  img::SColor color = *((img::SColor*)  tolua_tousertype(tolua_S,5,0));
  bool useAlphaBlending = ((bool)  tolua_toboolean(tolua_S,6,0));
  bool useColorBlending = ((bool)  tolua_toboolean(tolua_S,7,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'register2DImageForRendering'",NULL);
#endif
 {
  self->register2DImageForRendering(texture,*drawRect,*texRect,color,useAlphaBlending,useColorBlending);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_register2DImageForRendering00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerGUIImageForRendering of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_registerGUIImageForRendering00
static int tolua_MyLuaBind_vid_IVideoDriver_registerGUIImageForRendering00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,5,"const img::SColor",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,6,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* texture = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
  const core::rectf* drawRect = ((const core::rectf*)  tolua_tousertype(tolua_S,3,0));
  const core::rectf* texRect = ((const core::rectf*)  tolua_tousertype(tolua_S,4,0));
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,5,0));
  bool useAlphaBlending = ((bool)  tolua_toboolean(tolua_S,6,0));
  bool useColorBlending = ((bool)  tolua_toboolean(tolua_S,7,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerGUIImageForRendering'",NULL);
#endif
 {
  self->registerGUIImageForRendering(texture,*drawRect,*texRect,*color,useAlphaBlending,useColorBlending);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerGUIImageForRendering'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerGUIRectangleForRendering of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_registerGUIRectangleForRendering00
static int tolua_MyLuaBind_vid_IVideoDriver_registerGUIRectangleForRendering00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::rectf",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const img::SColor",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const core::rectf* drawRect = ((const core::rectf*)  tolua_tousertype(tolua_S,2,0));
  const img::SColor* color = ((const img::SColor*)  tolua_tousertype(tolua_S,3,0));
  bool useAlphaBlending = ((bool)  tolua_toboolean(tolua_S,4,0));
  bool useColorBlending = ((bool)  tolua_toboolean(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerGUIRectangleForRendering'",NULL);
#endif
 {
  self->registerGUIRectangleForRendering(*drawRect,*color,useAlphaBlending,useColorBlending);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerGUIRectangleForRendering'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findGPUProgramFileName of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_findGPUProgramFileName00
static int tolua_MyLuaBind_vid_IVideoDriver_findGPUProgramFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::IGPUProgram",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::IGPUProgram* gpu_prog = ((vid::IGPUProgram*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findGPUProgramFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->findGPUProgramFileName(gpu_prog);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findGPUProgramFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findGPUProgramFullFileName of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_findGPUProgramFullFileName00
static int tolua_MyLuaBind_vid_IVideoDriver_findGPUProgramFullFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::IGPUProgram",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::IGPUProgram* gpu_prog = ((vid::IGPUProgram*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findGPUProgramFullFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->findGPUProgramFullFileName(gpu_prog);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findGPUProgramFullFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addGPUProgram of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_addGPUProgram00
static int tolua_MyLuaBind_vid_IVideoDriver_addGPUProgram00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isstring(tolua_S,7,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
 !tolua_isstring(tolua_S,9,0,&tolua_err) ||
 !tolua_isstring(tolua_S,10,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,11,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::E_VERTEX_TYPE vertex_type = ((vid::E_VERTEX_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  const vid::SRenderPass* pass = ((const vid::SRenderPass*)  tolua_tousertype(tolua_S,3,0));
  unsigned uniforms = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  unsigned lightcnt = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  vid::E_VERTEX_SHADER_VERSION vertex_shader_ver = ((vid::E_VERTEX_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,6,0));
  const char* vertex_shader = ((const char*)  tolua_tostring(tolua_S,7,0));
  vid::E_PIXEL_SHADER_VERSION pixel_shader_ver = ((vid::E_PIXEL_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,8,0));
  const char* pixel_shader = ((const char*)  tolua_tostring(tolua_S,9,0));
  const char* tag = ((const char*)  tolua_tostring(tolua_S,10,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addGPUProgram'",NULL);
#endif
 {
  vid::IGPUProgram* tolua_ret = (vid::IGPUProgram*)  self->addGPUProgram(vertex_type,*pass,uniforms,lightcnt,vertex_shader_ver,vertex_shader,pixel_shader_ver,pixel_shader,tag);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IGPUProgram");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addGPUProgram'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGPUProgram of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram00
static int tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::E_VERTEX_TYPE vertex_type = ((vid::E_VERTEX_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  const vid::SRenderPass* pass = ((const vid::SRenderPass*)  tolua_tousertype(tolua_S,3,0));
  unsigned lightcnt = ((unsigned)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGPUProgram'",NULL);
#endif
 {
  vid::IGPUProgram* tolua_ret = (vid::IGPUProgram*)  self->getGPUProgram(vertex_type,*pass,lightcnt);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IGPUProgram");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGPUProgram'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGPUProgram of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram01
static int tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"u64",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::E_VERTEX_TYPE vertex_type = ((vid::E_VERTEX_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  u64 hash = *((u64*)  tolua_tousertype(tolua_S,3,0));
  unsigned lightcnt = ((unsigned)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGPUProgram'",NULL);
#endif
 {
  vid::IGPUProgram* tolua_ret = (vid::IGPUProgram*)  self->getGPUProgram(vertex_type,hash,lightcnt);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IGPUProgram");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGPUProgram of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram02
static int tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* file_name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGPUProgram'",NULL);
#endif
 {
  vid::IGPUProgram* tolua_ret = (vid::IGPUProgram*)  self->getGPUProgram(file_name);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IGPUProgram");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGPUProgram of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram03
static int tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* file_name = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* tag = ((const char*)  tolua_tostring(tolua_S,3,0));
  bool reload_if_exists = ((bool)  tolua_toboolean(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGPUProgram'",NULL);
#endif
 {
  vid::IGPUProgram* tolua_ret = (vid::IGPUProgram*)  self->getGPUProgram(file_name,tag,reload_if_exists);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IGPUProgram");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadGPUProgramsFromDir of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_loadGPUProgramsFromDir00
static int tolua_MyLuaBind_vid_IVideoDriver_loadGPUProgramsFromDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* dir = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadGPUProgramsFromDir'",NULL);
#endif
 {
  self->loadGPUProgramsFromDir(dir);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadGPUProgramsFromDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadGPUProgramsFromDir of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_loadGPUProgramsFromDir01
static int tolua_MyLuaBind_vid_IVideoDriver_loadGPUProgramsFromDir01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* dir = ((const char*)  tolua_tostring(tolua_S,2,0));
  const char* tag = ((const char*)  tolua_tostring(tolua_S,3,0));
  bool reload_if_exists = ((bool)  tolua_toboolean(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadGPUProgramsFromDir'",NULL);
#endif
 {
  self->loadGPUProgramsFromDir(dir,tag,reload_if_exists);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_loadGPUProgramsFromDir00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: compileGPUSources of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_compileGPUSources00
static int tolua_MyLuaBind_vid_IVideoDriver_compileGPUSources00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isstring(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isstring(tolua_S,7,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  unsigned uniforms = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned lights_count = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  vid::E_VERTEX_SHADER_VERSION vertex_shader_ver = ((vid::E_VERTEX_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,4,0));
  const char* vertex_shader = ((const char*)  tolua_tostring(tolua_S,5,0));
  vid::E_PIXEL_SHADER_VERSION pixel_shader_ver = ((vid::E_PIXEL_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,6,0));
  const char* pixel_shader = ((const char*)  tolua_tostring(tolua_S,7,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'compileGPUSources'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->compileGPUSources(uniforms,lights_count,vertex_shader_ver,vertex_shader,pixel_shader_ver,pixel_shader);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'compileGPUSources'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPolygonFillMode of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setPolygonFillMode00
static int tolua_MyLuaBind_vid_IVideoDriver_setPolygonFillMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::E_POLYGON_FILL_MODE mode = ((vid::E_POLYGON_FILL_MODE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPolygonFillMode'",NULL);
#endif
 {
  self->setPolygonFillMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPolygonFillMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPolygonFillMode of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getPolygonFillMode00
static int tolua_MyLuaBind_vid_IVideoDriver_getPolygonFillMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPolygonFillMode'",NULL);
#endif
 {
  vid::E_POLYGON_FILL_MODE tolua_ret = (vid::E_POLYGON_FILL_MODE)  self->getPolygonFillMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPolygonFillMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addRenderTarget of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget00
static int tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addRenderTarget'",NULL);
#endif
 {
  vid::IRenderTarget* tolua_ret = (vid::IRenderTarget*)  self->addRenderTarget();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IRenderTarget");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addRenderTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addRenderTarget of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget01
static int tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  unsigned width = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned height = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  img::E_COLOR_FORMAT colorFormat = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,4,0));
  img::E_COLOR_FORMAT depthFormat = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addRenderTarget'",NULL);
#endif
 {
  vid::IRenderTarget* tolua_ret = (vid::IRenderTarget*)  self->addRenderTarget(width,height,colorFormat,depthFormat);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IRenderTarget");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: addRenderTarget of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget02
static int tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::dimension2di",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  const core::dimension2di* size = ((const core::dimension2di*)  tolua_tousertype(tolua_S,2,0));
  img::E_COLOR_FORMAT colorFormat = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,3,0));
  img::E_COLOR_FORMAT depthFormat = ((img::E_COLOR_FORMAT) (int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addRenderTarget'",NULL);
#endif
 {
  vid::IRenderTarget* tolua_ret = (vid::IRenderTarget*)  self->addRenderTarget(*size,colorFormat,depthFormat);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IRenderTarget");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: addRenderTarget of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget03
static int tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* colorTexture = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
  vid::ITexture* depthTexture = ((vid::ITexture*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addRenderTarget'",NULL);
#endif
 {
  vid::IRenderTarget* tolua_ret = (vid::IRenderTarget*)  self->addRenderTarget(colorTexture,depthTexture);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IRenderTarget");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeRenderTarget of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_removeRenderTarget00
static int tolua_MyLuaBind_vid_IVideoDriver_removeRenderTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::IRenderTarget",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::IRenderTarget* renderTarget = ((vid::IRenderTarget*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeRenderTarget'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removeRenderTarget(renderTarget);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeRenderTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRenderTarget of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_setRenderTarget00
static int tolua_MyLuaBind_vid_IVideoDriver_setRenderTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::IRenderTarget",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::IRenderTarget* rt = ((vid::IRenderTarget*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRenderTarget'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setRenderTarget(rt);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRenderTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRenderTarget of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_getRenderTarget00
static int tolua_MyLuaBind_vid_IVideoDriver_getRenderTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRenderTarget'",NULL);
#endif
 {
  vid::IRenderTarget* tolua_ret = (vid::IRenderTarget*)  self->getRenderTarget();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IRenderTarget");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRenderTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: queryFeature of class  vid::IVideoDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoDriver_queryFeature00
static int tolua_MyLuaBind_vid_IVideoDriver_queryFeature00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoDriver",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoDriver* self = (vid::IVideoDriver*)  tolua_tousertype(tolua_S,1,0);
  vid::E_VIDEO_DRIVER_FEATURE feature = ((vid::E_VIDEO_DRIVER_FEATURE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'queryFeature'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->queryFeature(feature);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'queryFeature'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVideoModeCount of class  vid::IVideoModeList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoModeList_getVideoModeCount00
static int tolua_MyLuaBind_vid_IVideoModeList_getVideoModeCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoModeList",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoModeList* self = (vid::IVideoModeList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVideoModeCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getVideoModeCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVideoModeCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVideoModeResolution of class  vid::IVideoModeList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoModeList_getVideoModeResolution00
static int tolua_MyLuaBind_vid_IVideoModeList_getVideoModeResolution00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoModeList",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoModeList* self = (vid::IVideoModeList*)  tolua_tousertype(tolua_S,1,0);
  int modeNumber = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVideoModeResolution'",NULL);
#endif
 {
  core::dimension2di tolua_ret = (core::dimension2di)  self->getVideoModeResolution(modeNumber);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::dimension2di(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::dimension2di");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::dimension2di));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::dimension2di");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVideoModeResolution'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVideoModeDepth of class  vid::IVideoModeList */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVideoModeList_getVideoModeDepth00
static int tolua_MyLuaBind_vid_IVideoModeList_getVideoModeDepth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVideoModeList",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVideoModeList* self = (vid::IVideoModeList*)  tolua_tousertype(tolua_S,1,0);
  int modeNumber = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVideoModeDepth'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getVideoModeDepth(modeNumber);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVideoModeDepth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_new00
static int tolua_MyLuaBind_vid_STexCoordModifier_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  vid::STexCoordModifier* tolua_ret = (vid::STexCoordModifier*)  new vid::STexCoordModifier();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::STexCoordModifier");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_new00_local
static int tolua_MyLuaBind_vid_STexCoordModifier_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  vid::STexCoordModifier* tolua_ret = (vid::STexCoordModifier*)  new vid::STexCoordModifier();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"vid::STexCoordModifier");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_new01
static int tolua_MyLuaBind_vid_STexCoordModifier_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const vid::STexCoordModifier* other = ((const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,2,0));
 {
  vid::STexCoordModifier* tolua_ret = (vid::STexCoordModifier*)  new vid::STexCoordModifier(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::STexCoordModifier");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_STexCoordModifier_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_new01_local
static int tolua_MyLuaBind_vid_STexCoordModifier_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const vid::STexCoordModifier* other = ((const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,2,0));
 {
  vid::STexCoordModifier* tolua_ret = (vid::STexCoordModifier*)  new vid::STexCoordModifier(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"vid::STexCoordModifier");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_STexCoordModifier_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_delete00
static int tolua_MyLuaBind_vid_STexCoordModifier_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STexCoordModifier* self = (vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_set00
static int tolua_MyLuaBind_vid_STexCoordModifier_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STexCoordModifier* self = (vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
  const vid::STexCoordModifier* m = ((const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*m);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getType00
static int tolua_MyLuaBind_vid_STexCoordModifier_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'",NULL);
#endif
 {
  vid::E_TEXCOORD_MOD_TYPE tolua_ret = (vid::E_TEXCOORD_MOD_TYPE)  self->getType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setType of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_setType00
static int tolua_MyLuaBind_vid_STexCoordModifier_setType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STexCoordModifier* self = (vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
  vid::E_TEXCOORD_MOD_TYPE type = ((vid::E_TEXCOORD_MOD_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setType'",NULL);
#endif
 {
  self->setType(type);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTurbulent of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getTurbulent00
static int tolua_MyLuaBind_vid_STexCoordModifier_getTurbulent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTurbulent'",NULL);
#endif
 {
  const core::wave& tolua_ret = (const core::wave&)  self->getTurbulent();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::wave");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTurbulent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTurbulent of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_setTurbulent00
static int tolua_MyLuaBind_vid_STexCoordModifier_setTurbulent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::wave",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STexCoordModifier* self = (vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
  const core::wave* turb = ((const core::wave*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTurbulent'",NULL);
#endif
 {
  self->setTurbulent(*turb);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTurbulent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMatrix00 of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getMatrix0000
static int tolua_MyLuaBind_vid_STexCoordModifier_getMatrix0000(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMatrix00'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getMatrix00();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMatrix00'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMatrix01 of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getMatrix0100
static int tolua_MyLuaBind_vid_STexCoordModifier_getMatrix0100(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMatrix01'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getMatrix01();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMatrix01'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMatrix10 of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getMatrix1000
static int tolua_MyLuaBind_vid_STexCoordModifier_getMatrix1000(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMatrix10'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getMatrix10();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMatrix10'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMatrix11 of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getMatrix1100
static int tolua_MyLuaBind_vid_STexCoordModifier_getMatrix1100(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMatrix11'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getMatrix11();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMatrix11'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMatrix of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_setMatrix00
static int tolua_MyLuaBind_vid_STexCoordModifier_setMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STexCoordModifier* self = (vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
  float m00 = ((float)  tolua_tonumber(tolua_S,2,0));
  float m01 = ((float)  tolua_tonumber(tolua_S,3,0));
  float m10 = ((float)  tolua_tonumber(tolua_S,4,0));
  float m11 = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMatrix'",NULL);
#endif
 {
  self->setMatrix(m00,m01,m10,m11);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTranslate0 of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getTranslate000
static int tolua_MyLuaBind_vid_STexCoordModifier_getTranslate000(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTranslate0'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getTranslate0();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTranslate0'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTranslate1 of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getTranslate100
static int tolua_MyLuaBind_vid_STexCoordModifier_getTranslate100(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTranslate1'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getTranslate1();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTranslate1'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTranslate of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_setTranslate00
static int tolua_MyLuaBind_vid_STexCoordModifier_setTranslate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STexCoordModifier* self = (vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
  float t0 = ((float)  tolua_tonumber(tolua_S,2,0));
  float t1 = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTranslate'",NULL);
#endif
 {
  self->setTranslate(t0,t1);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTranslate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScale0 of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getScale000
static int tolua_MyLuaBind_vid_STexCoordModifier_getScale000(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScale0'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getScale0();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScale0'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScale1 of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getScale100
static int tolua_MyLuaBind_vid_STexCoordModifier_getScale100(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScale1'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getScale1();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScale1'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScale of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_setScale00
static int tolua_MyLuaBind_vid_STexCoordModifier_setScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STexCoordModifier* self = (vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
  float scale0 = ((float)  tolua_tonumber(tolua_S,2,0));
  float scale1 = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScale'",NULL);
#endif
 {
  self->setScale(scale0,scale1);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScroll0 of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getScroll000
static int tolua_MyLuaBind_vid_STexCoordModifier_getScroll000(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScroll0'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getScroll0();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScroll0'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScroll1 of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getScroll100
static int tolua_MyLuaBind_vid_STexCoordModifier_getScroll100(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScroll1'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getScroll1();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScroll1'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScroll of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_setScroll00
static int tolua_MyLuaBind_vid_STexCoordModifier_setScroll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STexCoordModifier* self = (vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
  float scroll0 = ((float)  tolua_tonumber(tolua_S,2,0));
  float scroll1 = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScroll'",NULL);
#endif
 {
  self->setScroll(scroll0,scroll1);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScroll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRotateSpeed of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_getRotateSpeed00
static int tolua_MyLuaBind_vid_STexCoordModifier_getRotateSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STexCoordModifier* self = (const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRotateSpeed'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getRotateSpeed();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRotateSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotateSpeed of class  vid::STexCoordModifier */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STexCoordModifier_setRotateSpeed00
static int tolua_MyLuaBind_vid_STexCoordModifier_setRotateSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STexCoordModifier* self = (vid::STexCoordModifier*)  tolua_tousertype(tolua_S,1,0);
  float rot = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotateSpeed'",NULL);
#endif
 {
  self->setRotateSpeed(rot);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotateSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_set00
static int tolua_MyLuaBind_vid_STextureLayer_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  const vid::STextureLayer* ml = ((const vid::STextureLayer*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*ml);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTexture of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getTexture00
static int tolua_MyLuaBind_vid_STextureLayer_getTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTexture of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_setTexture00
static int tolua_MyLuaBind_vid_STextureLayer_setTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* t = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
  vid::E_TEXTURE_LAYER_TYPE type = ((vid::E_TEXTURE_LAYER_TYPE) (int)  tolua_tonumber(tolua_S,3,0));
  int tc_channel = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTexture'",NULL);
#endif
 {
  self->setTexture(t,type,tc_channel);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTexture of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_setTexture01
static int tolua_MyLuaBind_vid_STextureLayer_setTexture01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* t = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTexture'",NULL);
#endif
 {
  self->setTexture(t);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_vid_STextureLayer_setTexture00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setType of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_setType00
static int tolua_MyLuaBind_vid_STextureLayer_setType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  vid::E_TEXTURE_LAYER_TYPE type = ((vid::E_TEXTURE_LAYER_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setType'",NULL);
#endif
 {
  self->setType(type);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getType00
static int tolua_MyLuaBind_vid_STextureLayer_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'",NULL);
#endif
 {
  vid::E_TEXTURE_LAYER_TYPE tolua_ret = (vid::E_TEXTURE_LAYER_TYPE)  self->getType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: update of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_update00
static int tolua_MyLuaBind_vid_STextureLayer_update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  int curr_time_ms = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'update'",NULL);
#endif
 {
  self->update(curr_time_ms);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setProjectionParams of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_setProjectionParams00
static int tolua_MyLuaBind_vid_STextureLayer_setProjectionParams00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,5,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,6,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  float width_area = ((float)  tolua_tonumber(tolua_S,2,0));
  float height_area = ((float)  tolua_tonumber(tolua_S,3,0));
  const core::vector3df* pos = ((const core::vector3df*)  tolua_tousertype(tolua_S,4,0));
  const core::vector3df* dir = ((const core::vector3df*)  tolua_tousertype(tolua_S,5,0));
  const core::vector3df* up = ((const core::vector3df*)  tolua_tousertype(tolua_S,6,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setProjectionParams'",NULL);
#endif
 {
  self->setProjectionParams(width_area,height_area,*pos,*dir,*up);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setProjectionParams'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProjectionWidth of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getProjectionWidth00
static int tolua_MyLuaBind_vid_STextureLayer_getProjectionWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProjectionWidth'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getProjectionWidth();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProjectionWidth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProjectionHeight of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getProjectionHeight00
static int tolua_MyLuaBind_vid_STextureLayer_getProjectionHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProjectionHeight'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getProjectionHeight();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProjectionHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProjectionPos of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getProjectionPos00
static int tolua_MyLuaBind_vid_STextureLayer_getProjectionPos00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProjectionPos'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getProjectionPos();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProjectionPos'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProjectionDir of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getProjectionDir00
static int tolua_MyLuaBind_vid_STextureLayer_getProjectionDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProjectionDir'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getProjectionDir();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProjectionDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProjectionUp of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getProjectionUp00
static int tolua_MyLuaBind_vid_STextureLayer_getProjectionUp00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProjectionUp'",NULL);
#endif
 {
  const core::vector3df& tolua_ret = (const core::vector3df&)  self->getProjectionUp();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::vector3df");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProjectionUp'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTexMatrix of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_setTexMatrix00
static int tolua_MyLuaBind_vid_STextureLayer_setTexMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::matrix4",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  const core::matrix4* m = ((const core::matrix4*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTexMatrix'",NULL);
#endif
 {
  self->setTexMatrix(*m);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTexMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTexMatrix of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getTexMatrix00
static int tolua_MyLuaBind_vid_STextureLayer_getTexMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTexMatrix'",NULL);
#endif
 {
  const core::matrix4& tolua_ret = (const core::matrix4&)  self->getTexMatrix();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::matrix4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTexCoordGen of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getTexCoordGen00
static int tolua_MyLuaBind_vid_STextureLayer_getTexCoordGen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTexCoordGen'",NULL);
#endif
 {
  vid::E_TEXCOORD_GEN_TYPE tolua_ret = (vid::E_TEXCOORD_GEN_TYPE)  self->getTexCoordGen();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexCoordGen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTexCoordGen of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_setTexCoordGen00
static int tolua_MyLuaBind_vid_STextureLayer_setTexCoordGen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  vid::E_TEXCOORD_GEN_TYPE tgt = ((vid::E_TEXCOORD_GEN_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTexCoordGen'",NULL);
#endif
 {
  self->setTexCoordGen(tgt);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTexCoordGen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTexCoordModifiersCount of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getTexCoordModifiersCount00
static int tolua_MyLuaBind_vid_STextureLayer_getTexCoordModifiersCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTexCoordModifiersCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getTexCoordModifiersCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexCoordModifiersCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTexCoordModifier of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getTexCoordModifier00
static int tolua_MyLuaBind_vid_STextureLayer_getTexCoordModifier00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTexCoordModifier'",NULL);
#endif
 {
  vid::STexCoordModifier& tolua_ret = (vid::STexCoordModifier&)  self->getTexCoordModifier(idx);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"vid::STexCoordModifier");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexCoordModifier'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addTexCoordModifier of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_addTexCoordModifier00
static int tolua_MyLuaBind_vid_STextureLayer_addTexCoordModifier00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  vid::E_TEXCOORD_MOD_TYPE type = ((vid::E_TEXCOORD_MOD_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addTexCoordModifier'",NULL);
#endif
 {
  self->addTexCoordModifier(type);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addTexCoordModifier'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeTexCoordModifier of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_removeTexCoordModifier00
static int tolua_MyLuaBind_vid_STextureLayer_removeTexCoordModifier00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeTexCoordModifier'",NULL);
#endif
 {
  self->removeTexCoordModifier(idx);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeTexCoordModifier'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTexCoordModifier of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_setTexCoordModifier00
static int tolua_MyLuaBind_vid_STextureLayer_setTexCoordModifier00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const vid::STexCoordModifier",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const vid::STexCoordModifier* tcm = ((const vid::STexCoordModifier*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTexCoordModifier'",NULL);
#endif
 {
  self->setTexCoordModifier(idx,*tcm);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTexCoordModifier'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: swapTexCoordModifiers of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_swapTexCoordModifiers00
static int tolua_MyLuaBind_vid_STextureLayer_swapTexCoordModifiers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  unsigned idx1 = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned idx2 = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'swapTexCoordModifiers'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->swapTexCoordModifiers(idx1,idx2);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'swapTexCoordModifiers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isTexCoordAnimated of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_isTexCoordAnimated00
static int tolua_MyLuaBind_vid_STextureLayer_isTexCoordAnimated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isTexCoordAnimated'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isTexCoordAnimated();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isTexCoordAnimated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTexRGBScale of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getTexRGBScale00
static int tolua_MyLuaBind_vid_STextureLayer_getTexRGBScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTexRGBScale'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getTexRGBScale();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexRGBScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTexRGBScale of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_setTexRGBScale00
static int tolua_MyLuaBind_vid_STextureLayer_setTexRGBScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  int scl = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTexRGBScale'",NULL);
#endif
 {
  self->setTexRGBScale(scl);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTexRGBScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTexCoordAddr of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getTexCoordAddr00
static int tolua_MyLuaBind_vid_STextureLayer_getTexCoordAddr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTexCoordAddr'",NULL);
#endif
 {
  vid::E_TEXCOORD_ADDRESS_MODE tolua_ret = (vid::E_TEXCOORD_ADDRESS_MODE)  self->getTexCoordAddr();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexCoordAddr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTexCoordAddr of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_setTexCoordAddr00
static int tolua_MyLuaBind_vid_STextureLayer_setTexCoordAddr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  vid::E_TEXCOORD_ADDRESS_MODE am = ((vid::E_TEXCOORD_ADDRESS_MODE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTexCoordAddr'",NULL);
#endif
 {
  self->setTexCoordAddr(am);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTexCoordAddr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTexCoordChannel of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_getTexCoordChannel00
static int tolua_MyLuaBind_vid_STextureLayer_getTexCoordChannel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTexCoordChannel'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getTexCoordChannel();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTexCoordChannel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTexCoordChannel of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_setTexCoordChannel00
static int tolua_MyLuaBind_vid_STextureLayer_setTexCoordChannel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  int tch = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTexCoordChannel'",NULL);
#endif
 {
  self->setTexCoordChannel(tch);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTexCoordChannel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: enableFilter of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_enableFilter00
static int tolua_MyLuaBind_vid_STextureLayer_enableFilter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::STextureLayer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::STextureLayer* self = (vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'enableFilter'",NULL);
#endif
 {
  self->enableFilter(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'enableFilter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isFilterEnabled of class  vid::STextureLayer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_STextureLayer_isFilterEnabled00
static int tolua_MyLuaBind_vid_STextureLayer_isFilterEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::STextureLayer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::STextureLayer* self = (const vid::STextureLayer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isFilterEnabled'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isFilterEnabled();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isFilterEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_set00
static int tolua_MyLuaBind_vid_SRenderPass_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  const vid::SRenderPass* p = ((const vid::SRenderPass*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*p);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: update of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_update00
static int tolua_MyLuaBind_vid_SRenderPass_update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  int curr_time_ms = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'update'",NULL);
#endif
 {
  self->update(curr_time_ms);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNumber of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getNumber00
static int tolua_MyLuaBind_vid_SRenderPass_getNumber00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNumber'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getNumber();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNumber'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Layers of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_get_MyLuaBind_vid_SRenderPass_Layers
static int tolua_get_MyLuaBind_vid_SRenderPass_Layers(lua_State* tolua_S)
{
 int tolua_index;
  vid::SRenderPass* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (vid::SRenderPass*)  lua_touserdata(tolua_S,-1);
#ifndef TOLUA_RELEASE
 {
 tolua_Error tolua_err;
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in array indexing.",&tolua_err);
 }
#endif
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
#ifndef TOLUA_RELEASE
 if (tolua_index<0 || tolua_index>=vid::MY_MATERIAL_MAX_LAYERS)
 tolua_error(tolua_S,"array indexing out of range.",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Layers[tolua_index],"vid::STextureLayer");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Layers of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_set_MyLuaBind_vid_SRenderPass_Layers
static int tolua_set_MyLuaBind_vid_SRenderPass_Layers(lua_State* tolua_S)
{
 int tolua_index;
  vid::SRenderPass* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (vid::SRenderPass*)  lua_touserdata(tolua_S,-1);
#ifndef TOLUA_RELEASE
 {
 tolua_Error tolua_err;
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in array indexing.",&tolua_err);
 }
#endif
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
#ifndef TOLUA_RELEASE
 if (tolua_index<0 || tolua_index>=vid::MY_MATERIAL_MAX_LAYERS)
 tolua_error(tolua_S,"array indexing out of range.",NULL);
#endif
  self->Layers[tolua_index] = *((vid::STextureLayer*)  tolua_tousertype(tolua_S,3,0));
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAmbientColor of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getAmbientColor00
static int tolua_MyLuaBind_vid_SRenderPass_getAmbientColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAmbientColor'",NULL);
#endif
 {
  const img::SColor& tolua_ret = (const img::SColor&)  self->getAmbientColor();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const img::SColor");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAmbientColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAmbientColor of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setAmbientColor00
static int tolua_MyLuaBind_vid_SRenderPass_setAmbientColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* col = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAmbientColor'",NULL);
#endif
 {
  self->setAmbientColor(*col);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAmbientColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDiffuseColor of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getDiffuseColor00
static int tolua_MyLuaBind_vid_SRenderPass_getDiffuseColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDiffuseColor'",NULL);
#endif
 {
  const img::SColor& tolua_ret = (const img::SColor&)  self->getDiffuseColor();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const img::SColor");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDiffuseColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDiffuseColor of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setDiffuseColor00
static int tolua_MyLuaBind_vid_SRenderPass_setDiffuseColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* col = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDiffuseColor'",NULL);
#endif
 {
  self->setDiffuseColor(*col);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDiffuseColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEmissiveColor of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getEmissiveColor00
static int tolua_MyLuaBind_vid_SRenderPass_getEmissiveColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEmissiveColor'",NULL);
#endif
 {
  const img::SColor& tolua_ret = (const img::SColor&)  self->getEmissiveColor();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const img::SColor");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEmissiveColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEmissiveColor of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setEmissiveColor00
static int tolua_MyLuaBind_vid_SRenderPass_setEmissiveColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* col = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEmissiveColor'",NULL);
#endif
 {
  self->setEmissiveColor(*col);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEmissiveColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSpecularColor of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getSpecularColor00
static int tolua_MyLuaBind_vid_SRenderPass_getSpecularColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSpecularColor'",NULL);
#endif
 {
  const img::SColor& tolua_ret = (const img::SColor&)  self->getSpecularColor();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const img::SColor");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSpecularColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSpecularColor of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setSpecularColor00
static int tolua_MyLuaBind_vid_SRenderPass_setSpecularColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const img::SColor",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  const img::SColor* col = ((const img::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSpecularColor'",NULL);
#endif
 {
  self->setSpecularColor(*col);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSpecularColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getShininess of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getShininess00
static int tolua_MyLuaBind_vid_SRenderPass_getShininess00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getShininess'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getShininess();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getShininess'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setShininess of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setShininess00
static int tolua_MyLuaBind_vid_SRenderPass_setShininess00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  float sh = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setShininess'",NULL);
#endif
 {
  self->setShininess(sh);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setShininess'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFlag of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getFlag00
static int tolua_MyLuaBind_vid_SRenderPass_getFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  vid::E_MATERIAL_FLAG flag = ((vid::E_MATERIAL_FLAG) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFlag'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->getFlag(flag);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFlag of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setFlag00
static int tolua_MyLuaBind_vid_SRenderPass_setFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  vid::E_MATERIAL_FLAG flag = ((vid::E_MATERIAL_FLAG) (int)  tolua_tonumber(tolua_S,2,0));
  bool value = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFlag'",NULL);
#endif
 {
  self->setFlag(flag,value);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getColorFunc of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getColorFunc00
static int tolua_MyLuaBind_vid_SRenderPass_getColorFunc00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getColorFunc'",NULL);
#endif
 {
  const core::wave& tolua_ret = (const core::wave&)  self->getColorFunc();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::wave");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColorFunc'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAlphaFunc of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getAlphaFunc00
static int tolua_MyLuaBind_vid_SRenderPass_getAlphaFunc00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAlphaFunc'",NULL);
#endif
 {
  const core::wave& tolua_ret = (const core::wave&)  self->getAlphaFunc();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const core::wave");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlphaFunc'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColorFunc of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setColorFunc00
static int tolua_MyLuaBind_vid_SRenderPass_setColorFunc00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::wave",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  const core::wave* func = ((const core::wave*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColorFunc'",NULL);
#endif
 {
  self->setColorFunc(*func);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setColorFunc'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAlphaFunc of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setAlphaFunc00
static int tolua_MyLuaBind_vid_SRenderPass_setAlphaFunc00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::wave",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  const core::wave* func = ((const core::wave*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAlphaFunc'",NULL);
#endif
 {
  self->setAlphaFunc(*func);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAlphaFunc'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getColorGen of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getColorGen00
static int tolua_MyLuaBind_vid_SRenderPass_getColorGen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getColorGen'",NULL);
#endif
 {
  vid::E_COLOR_GEN_TYPE tolua_ret = (vid::E_COLOR_GEN_TYPE)  self->getColorGen();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColorGen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAlphaGen of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getAlphaGen00
static int tolua_MyLuaBind_vid_SRenderPass_getAlphaGen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAlphaGen'",NULL);
#endif
 {
  vid::E_ALPHA_GEN_TYPE tolua_ret = (vid::E_ALPHA_GEN_TYPE)  self->getAlphaGen();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlphaGen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColorGen of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setColorGen00
static int tolua_MyLuaBind_vid_SRenderPass_setColorGen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  vid::E_COLOR_GEN_TYPE gen = ((vid::E_COLOR_GEN_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColorGen'",NULL);
#endif
 {
  self->setColorGen(gen);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setColorGen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAlphaGen of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setAlphaGen00
static int tolua_MyLuaBind_vid_SRenderPass_setAlphaGen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  vid::E_ALPHA_GEN_TYPE gen = ((vid::E_ALPHA_GEN_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAlphaGen'",NULL);
#endif
 {
  self->setAlphaGen(gen);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAlphaGen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDepthTest of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getDepthTest00
static int tolua_MyLuaBind_vid_SRenderPass_getDepthTest00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDepthTest'",NULL);
#endif
 {
  vid::E_COMPARE_TEST tolua_ret = (vid::E_COMPARE_TEST)  self->getDepthTest();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDepthTest'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAlphaTest of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getAlphaTest00
static int tolua_MyLuaBind_vid_SRenderPass_getAlphaTest00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAlphaTest'",NULL);
#endif
 {
  vid::E_ALPHA_TEST tolua_ret = (vid::E_ALPHA_TEST)  self->getAlphaTest();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlphaTest'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDepthTest of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setDepthTest00
static int tolua_MyLuaBind_vid_SRenderPass_setDepthTest00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  vid::E_COMPARE_TEST dt = ((vid::E_COMPARE_TEST) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDepthTest'",NULL);
#endif
 {
  self->setDepthTest(dt);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDepthTest'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAlphaTest of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setAlphaTest00
static int tolua_MyLuaBind_vid_SRenderPass_setAlphaTest00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  vid::E_ALPHA_TEST at = ((vid::E_ALPHA_TEST) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAlphaTest'",NULL);
#endif
 {
  self->setAlphaTest(at);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAlphaTest'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSrcBlendFunc of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getSrcBlendFunc00
static int tolua_MyLuaBind_vid_SRenderPass_getSrcBlendFunc00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSrcBlendFunc'",NULL);
#endif
 {
  vid::E_SRC_BLEND_FUNCTION tolua_ret = (vid::E_SRC_BLEND_FUNCTION)  self->getSrcBlendFunc();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSrcBlendFunc'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDstBlendFunc of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getDstBlendFunc00
static int tolua_MyLuaBind_vid_SRenderPass_getDstBlendFunc00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDstBlendFunc'",NULL);
#endif
 {
  vid::E_DST_BLEND_FUNCTION tolua_ret = (vid::E_DST_BLEND_FUNCTION)  self->getDstBlendFunc();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDstBlendFunc'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBlendFuncs of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setBlendFuncs00
static int tolua_MyLuaBind_vid_SRenderPass_setBlendFuncs00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  vid::E_SRC_BLEND_FUNCTION srcblend = ((vid::E_SRC_BLEND_FUNCTION) (int)  tolua_tonumber(tolua_S,2,0));
  vid::E_DST_BLEND_FUNCTION dstblend = ((vid::E_DST_BLEND_FUNCTION) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBlendFuncs'",NULL);
#endif
 {
  self->setBlendFuncs(srcblend,dstblend);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBlendFuncs'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBlendEquation of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getBlendEquation00
static int tolua_MyLuaBind_vid_SRenderPass_getBlendEquation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBlendEquation'",NULL);
#endif
 {
  vid::E_BLEND_EQUATION tolua_ret = (vid::E_BLEND_EQUATION)  self->getBlendEquation();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBlendEquation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBlendEquation of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setBlendEquation00
static int tolua_MyLuaBind_vid_SRenderPass_setBlendEquation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  vid::E_BLEND_EQUATION eq = ((vid::E_BLEND_EQUATION) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBlendEquation'",NULL);
#endif
 {
  self->setBlendEquation(eq);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBlendEquation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isTransparent of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_isTransparent00
static int tolua_MyLuaBind_vid_SRenderPass_isTransparent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isTransparent'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isTransparent();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isTransparent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isLighting of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_isLighting00
static int tolua_MyLuaBind_vid_SRenderPass_isLighting00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isLighting'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isLighting();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isLighting'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLightingMode of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getLightingMode00
static int tolua_MyLuaBind_vid_SRenderPass_getLightingMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLightingMode'",NULL);
#endif
 {
  vid::E_LIGHTING_MODE tolua_ret = (vid::E_LIGHTING_MODE)  self->getLightingMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLightingMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLightingMode of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setLightingMode00
static int tolua_MyLuaBind_vid_SRenderPass_setLightingMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  vid::E_LIGHTING_MODE mode = ((vid::E_LIGHTING_MODE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLightingMode'",NULL);
#endif
 {
  self->setLightingMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLightingMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGPUProgram of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_setGPUProgram00
static int tolua_MyLuaBind_vid_SRenderPass_setGPUProgram00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::IGPUProgram",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  vid::IGPUProgram* gpu = ((vid::IGPUProgram*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGPUProgram'",NULL);
#endif
 {
  self->setGPUProgram(gpu);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGPUProgram'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGPUProgram of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_getGPUProgram00
static int tolua_MyLuaBind_vid_SRenderPass_getGPUProgram00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SRenderPass* self = (const vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGPUProgram'",NULL);
#endif
 {
  vid::IGPUProgram* tolua_ret = (vid::IGPUProgram*)  self->getGPUProgram();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IGPUProgram");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGPUProgram'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: swapLayers of class  vid::SRenderPass */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SRenderPass_swapLayers00
static int tolua_MyLuaBind_vid_SRenderPass_swapLayers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SRenderPass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SRenderPass* self = (vid::SRenderPass*)  tolua_tousertype(tolua_S,1,0);
  unsigned l1 = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned l2 = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'swapLayers'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->swapLayers(l1,l2);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'swapLayers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_new00
static int tolua_MyLuaBind_vid_SMaterial_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::SMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  vid::SMaterial* tolua_ret = (vid::SMaterial*)  new vid::SMaterial();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::SMaterial");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_new00_local
static int tolua_MyLuaBind_vid_SMaterial_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::SMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  vid::SMaterial* tolua_ret = (vid::SMaterial*)  new vid::SMaterial();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"vid::SMaterial");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_delete00
static int tolua_MyLuaBind_vid_SMaterial_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SMaterial* self = (vid::SMaterial*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_set00
static int tolua_MyLuaBind_vid_SMaterial_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SMaterial",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SMaterial* self = (vid::SMaterial*)  tolua_tousertype(tolua_S,1,0);
  const vid::SMaterial* other = ((const vid::SMaterial*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*other);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: update of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_update00
static int tolua_MyLuaBind_vid_SMaterial_update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SMaterial",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SMaterial* self = (vid::SMaterial*)  tolua_tousertype(tolua_S,1,0);
  unsigned curr_time_ms = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'update'",NULL);
#endif
 {
  self->update(curr_time_ms);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPass of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_getPass00
static int tolua_MyLuaBind_vid_SMaterial_getPass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SMaterial",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SMaterial* self = (vid::SMaterial*)  tolua_tousertype(tolua_S,1,0);
  unsigned p = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPass'",NULL);
#endif
 {
  vid::SRenderPass& tolua_ret = (vid::SRenderPass&)  self->getPass(p);
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"vid::SRenderPass");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPass'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPassesCount of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_getPassesCount00
static int tolua_MyLuaBind_vid_SMaterial_getPassesCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SMaterial* self = (const vid::SMaterial*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPassesCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getPassesCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPassesCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addPass of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_addPass00
static int tolua_MyLuaBind_vid_SMaterial_addPass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SMaterial* self = (vid::SMaterial*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addPass'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->addPass();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addPass'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removePass of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_removePass00
static int tolua_MyLuaBind_vid_SMaterial_removePass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SMaterial",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SMaterial* self = (vid::SMaterial*)  tolua_tousertype(tolua_S,1,0);
  unsigned p = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removePass'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->removePass(p);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removePass'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHash of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_getHash00
static int tolua_MyLuaBind_vid_SMaterial_getHash00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SMaterial",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SMaterial* self = (const vid::SMaterial*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHash'",NULL);
#endif
 {
  u64 tolua_ret = (u64)  self->getHash();
 {
#ifdef __cplusplus
 void* tolua_obj = new u64(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"u64");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(u64));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"u64");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHash'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadFromFile of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_loadFromFile00
static int tolua_MyLuaBind_vid_SMaterial_loadFromFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SMaterial",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SMaterial* self = (vid::SMaterial*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadFromFile'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->loadFromFile(filename);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadFromFile'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: saveToFile of class  vid::SMaterial */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SMaterial_saveToFile00
static int tolua_MyLuaBind_vid_SMaterial_saveToFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SMaterial",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SMaterial* self = (const vid::SMaterial*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'saveToFile'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->saveToFile(filename);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'saveToFile'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SFog_new00
static int tolua_MyLuaBind_vid_SFog_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::SFog",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  vid::SFog* tolua_ret = (vid::SFog*)  new vid::SFog();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::SFog");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SFog_new00_local
static int tolua_MyLuaBind_vid_SFog_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::SFog",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  vid::SFog* tolua_ret = (vid::SFog*)  new vid::SFog();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"vid::SFog");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SFog_new01
static int tolua_MyLuaBind_vid_SFog_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::SFog",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::E_FOG_TYPE _Type = ((vid::E_FOG_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  img::SColor _Color = *((img::SColor*)  tolua_tousertype(tolua_S,3,0));
  float _Start = ((float)  tolua_tonumber(tolua_S,4,0));
  float _End = ((float)  tolua_tonumber(tolua_S,5,0));
  float _Density = ((float)  tolua_tonumber(tolua_S,6,0));
 {
  vid::SFog* tolua_ret = (vid::SFog*)  new vid::SFog(_Type,_Color,_Start,_End,_Density);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::SFog");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_SFog_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SFog_new01_local
static int tolua_MyLuaBind_vid_SFog_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::SFog",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::E_FOG_TYPE _Type = ((vid::E_FOG_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  img::SColor _Color = *((img::SColor*)  tolua_tousertype(tolua_S,3,0));
  float _Start = ((float)  tolua_tonumber(tolua_S,4,0));
  float _End = ((float)  tolua_tonumber(tolua_S,5,0));
  float _Density = ((float)  tolua_tonumber(tolua_S,6,0));
 {
  vid::SFog* tolua_ret = (vid::SFog*)  new vid::SFog(_Type,_Color,_Start,_End,_Density);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"vid::SFog");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_SFog_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SFog_set00
static int tolua_MyLuaBind_vid_SFog_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SFog",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SFog",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
  const vid::SFog* _FogParams = ((const vid::SFog*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*_FogParams);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SFog_set01
static int tolua_MyLuaBind_vid_SFog_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SFog",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"img::SColor",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
  vid::E_FOG_TYPE _Type = ((vid::E_FOG_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  img::SColor _Color = *((img::SColor*)  tolua_tousertype(tolua_S,3,0));
  float _Start = ((float)  tolua_tonumber(tolua_S,4,0));
  float _End = ((float)  tolua_tonumber(tolua_S,5,0));
  float _Density = ((float)  tolua_tonumber(tolua_S,6,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(_Type,_Color,_Start,_End,_Density);
 }
 }
 return 0;
tolua_lerror:
 return tolua_MyLuaBind_vid_SFog_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Type of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_get_vid__SFog_Type
static int tolua_get_vid__SFog_Type(lua_State* tolua_S)
{
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Type'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Type);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Type of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_set_vid__SFog_Type
static int tolua_set_vid__SFog_Type(lua_State* tolua_S)
{
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Type'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Type = ((vid::E_FOG_TYPE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Color of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_get_vid__SFog_Color
static int tolua_get_vid__SFog_Color(lua_State* tolua_S)
{
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Color,"img::SColor");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Color of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_set_vid__SFog_Color
static int tolua_set_vid__SFog_Color(lua_State* tolua_S)
{
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
 if (!tolua_isusertype(tolua_S,2,"img::SColor",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = *((img::SColor*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Start of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_get_vid__SFog_Start
static int tolua_get_vid__SFog_Start(lua_State* tolua_S)
{
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Start'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Start);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Start of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_set_vid__SFog_Start
static int tolua_set_vid__SFog_Start(lua_State* tolua_S)
{
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Start'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Start = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: End of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_get_vid__SFog_End
static int tolua_get_vid__SFog_End(lua_State* tolua_S)
{
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'End'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->End);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: End of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_set_vid__SFog_End
static int tolua_set_vid__SFog_End(lua_State* tolua_S)
{
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'End'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->End = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Density of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_get_vid__SFog_Density
static int tolua_get_vid__SFog_Density(lua_State* tolua_S)
{
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Density'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Density);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Density of class  vid::SFog */
#ifndef TOLUA_DISABLE_tolua_set_vid__SFog_Density
static int tolua_set_vid__SFog_Density(lua_State* tolua_S)
{
  vid::SFog* self = (vid::SFog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Density'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Density = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SLight_new00
static int tolua_MyLuaBind_vid_SLight_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::SLight",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  vid::SLight* tolua_ret = (vid::SLight*)  new vid::SLight();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::SLight");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SLight_new00_local
static int tolua_MyLuaBind_vid_SLight_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::SLight",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  vid::SLight* tolua_ret = (vid::SLight*)  new vid::SLight();
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"vid::SLight");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SLight_new01
static int tolua_MyLuaBind_vid_SLight_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::SLight",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SLight",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const vid::SLight* other = ((const vid::SLight*)  tolua_tousertype(tolua_S,2,0));
 {
  vid::SLight* tolua_ret = (vid::SLight*)  new vid::SLight(*other);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::SLight");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_SLight_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SLight_new01_local
static int tolua_MyLuaBind_vid_SLight_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"vid::SLight",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SLight",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const vid::SLight* other = ((const vid::SLight*)  tolua_tousertype(tolua_S,2,0));
 {
  vid::SLight* tolua_ret = (vid::SLight*)  new vid::SLight(*other);
 tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"vid::SLight");
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_SLight_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SLight_delete00
static int tolua_MyLuaBind_vid_SLight_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SLight",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
 delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SLight_set00
static int tolua_MyLuaBind_vid_SLight_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::SLight",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SLight",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
  const vid::SLight* other = ((const vid::SLight*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'",NULL);
#endif
 {
  self->set(*other);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: AmbientColor of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_get_vid__SLight_AmbientColor
static int tolua_get_vid__SLight_AmbientColor(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AmbientColor'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->AmbientColor,"img::SColorf");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: AmbientColor of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_set_vid__SLight_AmbientColor
static int tolua_set_vid__SLight_AmbientColor(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AmbientColor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"img::SColorf",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AmbientColor = *((img::SColorf*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DiffuseColor of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_get_vid__SLight_DiffuseColor
static int tolua_get_vid__SLight_DiffuseColor(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DiffuseColor'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->DiffuseColor,"img::SColorf");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: DiffuseColor of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_set_vid__SLight_DiffuseColor
static int tolua_set_vid__SLight_DiffuseColor(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DiffuseColor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"img::SColorf",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DiffuseColor = *((img::SColorf*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: SpecularColor of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_get_vid__SLight_SpecularColor
static int tolua_get_vid__SLight_SpecularColor(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SpecularColor'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->SpecularColor,"img::SColorf");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: SpecularColor of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_set_vid__SLight_SpecularColor
static int tolua_set_vid__SLight_SpecularColor(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SpecularColor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"img::SColorf",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SpecularColor = *((img::SColorf*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Position of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_get_vid__SLight_Position
static int tolua_get_vid__SLight_Position(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Position,"core::vector3df");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Position of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_set_vid__SLight_Position
static int tolua_set_vid__SLight_Position(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::vector3df",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Position = *((core::vector3df*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Radius of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_get_vid__SLight_Radius
static int tolua_get_vid__SLight_Radius(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Radius'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Radius);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Radius of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_set_vid__SLight_Radius
static int tolua_set_vid__SLight_Radius(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Radius'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Radius = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: CastShadows of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_get_vid__SLight_CastShadows
static int tolua_get_vid__SLight_CastShadows(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CastShadows'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->CastShadows);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: CastShadows of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_set_vid__SLight_CastShadows
static int tolua_set_vid__SLight_CastShadows(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CastShadows'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->CastShadows = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Type of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_get_vid__SLight_Type
static int tolua_get_vid__SLight_Type(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Type'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Type);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Type of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_set_vid__SLight_Type
static int tolua_set_vid__SLight_Type(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Type'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Type = ((vid::E_LIGHT_TYPE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Enabled of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_get_vid__SLight_Enabled
static int tolua_get_vid__SLight_Enabled(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Enabled of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_set_vid__SLight_Enabled
static int tolua_set_vid__SLight_Enabled(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Dynamic of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_get_vid__SLight_Dynamic
static int tolua_get_vid__SLight_Dynamic(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Dynamic'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->Dynamic);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Dynamic of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_set_vid__SLight_Dynamic
static int tolua_set_vid__SLight_Dynamic(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Dynamic'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Dynamic = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: IntensityWave of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_get_vid__SLight_IntensityWave
static int tolua_get_vid__SLight_IntensityWave(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'IntensityWave'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->IntensityWave,"core::wave");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: IntensityWave of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_set_vid__SLight_IntensityWave
static int tolua_set_vid__SLight_IntensityWave(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'IntensityWave'",NULL);
 if (!tolua_isusertype(tolua_S,2,"core::wave",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->IntensityWave = *((core::wave*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: IntensityWaveEnabled of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_get_vid__SLight_IntensityWaveEnabled
static int tolua_get_vid__SLight_IntensityWaveEnabled(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'IntensityWaveEnabled'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IntensityWaveEnabled);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: IntensityWaveEnabled of class  vid::SLight */
#ifndef TOLUA_DISABLE_tolua_set_vid__SLight_IntensityWaveEnabled
static int tolua_set_vid__SLight_IntensityWaveEnabled(lua_State* tolua_S)
{
  vid::SLight* self = (vid::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'IntensityWaveEnabled'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->IntensityWaveEnabled = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSize of class  vid::IFont */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IFont_setSize00
static int tolua_MyLuaBind_vid_IFont_setSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IFont",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IFont* self = (vid::IFont*)  tolua_tousertype(tolua_S,1,0);
  unsigned size = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSize'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setSize(size);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSize of class  vid::IFont */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IFont_getSize00
static int tolua_MyLuaBind_vid_IFont_getSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IFont",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IFont* self = (vid::IFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSize'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getSize();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: registerForRendering of class  vid::IFont */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IFont_registerForRendering00
static int tolua_MyLuaBind_vid_IFont_registerForRendering00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IFont",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"const core::recti",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,5,"img::SColor",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,7,1,&tolua_err) ||
 !tolua_isusertype(tolua_S,8,"const core::recti",1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,9,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IFont* self = (vid::IFont*)  tolua_tousertype(tolua_S,1,0);
  const char* text = ((const char*)  tolua_tostring(tolua_S,2,0));
  unsigned text_len = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  const core::recti* position = ((const core::recti*)  tolua_tousertype(tolua_S,4,0));
  img::SColor color = *((img::SColor*)  tolua_tousertype(tolua_S,5,0));
  bool hcenter = ((bool)  tolua_toboolean(tolua_S,6,false));
  bool vcenter = ((bool)  tolua_toboolean(tolua_S,7,false));
  const core::recti* clipRect = ((const core::recti*)  tolua_tousertype(tolua_S,8,NULL));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'registerForRendering'",NULL);
#endif
 {
  self->registerForRendering(text,text_len,*position,color,hcenter,vcenter,clipRect);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'registerForRendering'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDimension of class  vid::IFont */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IFont_getDimension00
static int tolua_MyLuaBind_vid_IFont_getDimension00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IFont",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IFont* self = (vid::IFont*)  tolua_tousertype(tolua_S,1,0);
  const char* text = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDimension'",NULL);
#endif
 {
  core::dimension2di tolua_ret = (core::dimension2di)  self->getDimension(text);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::dimension2di(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::dimension2di");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::dimension2di));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::dimension2di");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDimension'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDimension of class  vid::IFont */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IFont_getDimension01
static int tolua_MyLuaBind_vid_IFont_getDimension01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IFont",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IFont* self = (vid::IFont*)  tolua_tousertype(tolua_S,1,0);
  unsigned text_len = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDimension'",NULL);
#endif
 {
  core::dimension2di tolua_ret = (core::dimension2di)  self->getDimension(text_len);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::dimension2di(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::dimension2di");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::dimension2di));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::dimension2di");
#endif
 }
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IFont_getDimension00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCharacterFromPos of class  vid::IFont */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IFont_getCharacterFromPos00
static int tolua_MyLuaBind_vid_IFont_getCharacterFromPos00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IFont",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IFont* self = (vid::IFont*)  tolua_tousertype(tolua_S,1,0);
  const char* text = ((const char*)  tolua_tostring(tolua_S,2,0));
  int pixel_x = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCharacterFromPos'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getCharacterFromPos(text,pixel_x);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCharacterFromPos'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileName of class  vid::IFont */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IFont_getFileName00
static int tolua_MyLuaBind_vid_IFont_getFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IFont",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IFont* self = (vid::IFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getFileName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMonospaceMode of class  vid::IFont */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IFont_setMonospaceMode00
static int tolua_MyLuaBind_vid_IFont_setMonospaceMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IFont",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IFont* self = (vid::IFont*)  tolua_tousertype(tolua_S,1,0);
  bool on = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMonospaceMode'",NULL);
#endif
 {
  self->setMonospaceMode(on);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMonospaceMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isMonospaceMode of class  vid::IFont */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IFont_isMonospaceMode00
static int tolua_MyLuaBind_vid_IFont_isMonospaceMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IFont",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IFont* self = (vid::IFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isMonospaceMode'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isMonospaceMode();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isMonospaceMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Uniforms of class  vid::SGPUProgramShaderInfo */
#ifndef TOLUA_DISABLE_tolua_get_vid__SGPUProgramShaderInfo_Uniforms
static int tolua_get_vid__SGPUProgramShaderInfo_Uniforms(lua_State* tolua_S)
{
  vid::SGPUProgramShaderInfo* self = (vid::SGPUProgramShaderInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Uniforms'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Uniforms);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Uniforms of class  vid::SGPUProgramShaderInfo */
#ifndef TOLUA_DISABLE_tolua_set_vid__SGPUProgramShaderInfo_Uniforms
static int tolua_set_vid__SGPUProgramShaderInfo_Uniforms(lua_State* tolua_S)
{
  vid::SGPUProgramShaderInfo* self = (vid::SGPUProgramShaderInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Uniforms'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Uniforms = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Driver of class  vid::SGPUProgramShaderInfo */
#ifndef TOLUA_DISABLE_tolua_get_vid__SGPUProgramShaderInfo_Driver
static int tolua_get_vid__SGPUProgramShaderInfo_Driver(lua_State* tolua_S)
{
  vid::SGPUProgramShaderInfo* self = (vid::SGPUProgramShaderInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Driver'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Driver);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Driver of class  vid::SGPUProgramShaderInfo */
#ifndef TOLUA_DISABLE_tolua_set_vid__SGPUProgramShaderInfo_Driver
static int tolua_set_vid__SGPUProgramShaderInfo_Driver(lua_State* tolua_S)
{
  vid::SGPUProgramShaderInfo* self = (vid::SGPUProgramShaderInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Driver'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Driver = ((vid::E_DRIVER_TYPE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: VertexVer of class  vid::SGPUProgramShaderInfo */
#ifndef TOLUA_DISABLE_tolua_get_vid__SGPUProgramShaderInfo_VertexVer
static int tolua_get_vid__SGPUProgramShaderInfo_VertexVer(lua_State* tolua_S)
{
  vid::SGPUProgramShaderInfo* self = (vid::SGPUProgramShaderInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'VertexVer'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->VertexVer);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: VertexVer of class  vid::SGPUProgramShaderInfo */
#ifndef TOLUA_DISABLE_tolua_set_vid__SGPUProgramShaderInfo_VertexVer
static int tolua_set_vid__SGPUProgramShaderInfo_VertexVer(lua_State* tolua_S)
{
  vid::SGPUProgramShaderInfo* self = (vid::SGPUProgramShaderInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'VertexVer'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->VertexVer = ((vid::E_VERTEX_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: PixelVer of class  vid::SGPUProgramShaderInfo */
#ifndef TOLUA_DISABLE_tolua_get_vid__SGPUProgramShaderInfo_PixelVer
static int tolua_get_vid__SGPUProgramShaderInfo_PixelVer(lua_State* tolua_S)
{
  vid::SGPUProgramShaderInfo* self = (vid::SGPUProgramShaderInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PixelVer'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->PixelVer);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: PixelVer of class  vid::SGPUProgramShaderInfo */
#ifndef TOLUA_DISABLE_tolua_set_vid__SGPUProgramShaderInfo_PixelVer
static int tolua_set_vid__SGPUProgramShaderInfo_PixelVer(lua_State* tolua_S)
{
  vid::SGPUProgramShaderInfo* self = (vid::SGPUProgramShaderInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PixelVer'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PixelVer = ((vid::E_PIXEL_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTag of class  vid::SGPUProgramShaderInfo */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SGPUProgramShaderInfo_getTag00
static int tolua_MyLuaBind_vid_SGPUProgramShaderInfo_getTag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SGPUProgramShaderInfo",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SGPUProgramShaderInfo* self = (const vid::SGPUProgramShaderInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTag'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getTag();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVertexFileName of class  vid::SGPUProgramShaderInfo */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SGPUProgramShaderInfo_getVertexFileName00
static int tolua_MyLuaBind_vid_SGPUProgramShaderInfo_getVertexFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SGPUProgramShaderInfo",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SGPUProgramShaderInfo* self = (const vid::SGPUProgramShaderInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVertexFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getVertexFileName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVertexFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPixelFileName of class  vid::SGPUProgramShaderInfo */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SGPUProgramShaderInfo_getPixelFileName00
static int tolua_MyLuaBind_vid_SGPUProgramShaderInfo_getPixelFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SGPUProgramShaderInfo",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SGPUProgramShaderInfo* self = (const vid::SGPUProgramShaderInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPixelFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getPixelFileName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPixelFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: VertexType of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_get_vid__SGPUProgramInfo_VertexType
static int tolua_get_vid__SGPUProgramInfo_VertexType(lua_State* tolua_S)
{
  vid::SGPUProgramInfo* self = (vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'VertexType'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->VertexType);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: VertexType of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_set_vid__SGPUProgramInfo_VertexType
static int tolua_set_vid__SGPUProgramInfo_VertexType(lua_State* tolua_S)
{
  vid::SGPUProgramInfo* self = (vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'VertexType'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->VertexType = ((vid::E_VERTEX_TYPE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: LightsCount of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_get_vid__SGPUProgramInfo_LightsCount
static int tolua_get_vid__SGPUProgramInfo_LightsCount(lua_State* tolua_S)
{
  vid::SGPUProgramInfo* self = (vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LightsCount'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->LightsCount);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: LightsCount of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_set_vid__SGPUProgramInfo_LightsCount
static int tolua_set_vid__SGPUProgramInfo_LightsCount(lua_State* tolua_S)
{
  vid::SGPUProgramInfo* self = (vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LightsCount'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->LightsCount = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Hash of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_get_vid__SGPUProgramInfo_Hash
static int tolua_get_vid__SGPUProgramInfo_Hash(lua_State* tolua_S)
{
  vid::SGPUProgramInfo* self = (vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Hash'",NULL);
#endif
 tolua_pushusertype(tolua_S,(void*)&self->Hash,"u64");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Hash of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_set_vid__SGPUProgramInfo_Hash
static int tolua_set_vid__SGPUProgramInfo_Hash(lua_State* tolua_S)
{
  vid::SGPUProgramInfo* self = (vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Hash'",NULL);
 if (!tolua_isusertype(tolua_S,2,"u64",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Hash = *((u64*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: TaggedShadersCount of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_get_vid__SGPUProgramInfo_TaggedShadersCount
static int tolua_get_vid__SGPUProgramInfo_TaggedShadersCount(lua_State* tolua_S)
{
  vid::SGPUProgramInfo* self = (vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TaggedShadersCount'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->TaggedShadersCount);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: TaggedShadersCount of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_set_vid__SGPUProgramInfo_TaggedShadersCount
static int tolua_set_vid__SGPUProgramInfo_TaggedShadersCount(lua_State* tolua_S)
{
  vid::SGPUProgramInfo* self = (vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TaggedShadersCount'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TaggedShadersCount = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: OtherShadersCount of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_get_vid__SGPUProgramInfo_OtherShadersCount
static int tolua_get_vid__SGPUProgramInfo_OtherShadersCount(lua_State* tolua_S)
{
  vid::SGPUProgramInfo* self = (vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OtherShadersCount'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->OtherShadersCount);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: OtherShadersCount of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_set_vid__SGPUProgramInfo_OtherShadersCount
static int tolua_set_vid__SGPUProgramInfo_OtherShadersCount(lua_State* tolua_S)
{
  vid::SGPUProgramInfo* self = (vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OtherShadersCount'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->OtherShadersCount = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTaggedShaderInfo of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SGPUProgramInfo_getTaggedShaderInfo00
static int tolua_MyLuaBind_vid_SGPUProgramInfo_getTaggedShaderInfo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SGPUProgramInfo",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SGPUProgramInfo* self = (const vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
  unsigned i = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTaggedShaderInfo'",NULL);
#endif
 {
  const vid::SGPUProgramShaderInfo* tolua_ret = (const vid::SGPUProgramShaderInfo*)  self->getTaggedShaderInfo(i);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"const vid::SGPUProgramShaderInfo");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTaggedShaderInfo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOtherShaderInfo of class  vid::SGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_SGPUProgramInfo_getOtherShaderInfo00
static int tolua_MyLuaBind_vid_SGPUProgramInfo_getOtherShaderInfo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SGPUProgramInfo",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SGPUProgramInfo* self = (const vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0);
  unsigned i = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOtherShaderInfo'",NULL);
#endif
 {
  const vid::SGPUProgramShaderInfo* tolua_ret = (const vid::SGPUProgramShaderInfo*)  self->getOtherShaderInfo(i);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"const vid::SGPUProgramShaderInfo");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOtherShaderInfo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformfv of class  vid::IGPUProgram */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IGPUProgram_setUniformfv00
static int tolua_MyLuaBind_vid_IGPUProgram_setUniformfv00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IGPUProgram",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IGPUProgram* self = (vid::IGPUProgram*)  tolua_tousertype(tolua_S,1,0);
  vid::E_UNIFORM_TYPE uniform = ((vid::E_UNIFORM_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  const float floats = ((const float)  tolua_tonumber(tolua_S,3,0));
  unsigned size_bytes = ((unsigned)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformfv'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setUniformfv(uniform,&floats,size_bytes);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 tolua_pushnumber(tolua_S,(lua_Number)floats);
 }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformfv'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniformiv of class  vid::IGPUProgram */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IGPUProgram_setUniformiv00
static int tolua_MyLuaBind_vid_IGPUProgram_setUniformiv00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IGPUProgram",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IGPUProgram* self = (vid::IGPUProgram*)  tolua_tousertype(tolua_S,1,0);
  vid::E_UNIFORM_TYPE uniform = ((vid::E_UNIFORM_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  const int integers = ((const int)  tolua_tonumber(tolua_S,3,0));
  unsigned size_bytes = ((unsigned)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniformiv'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setUniformiv(uniform,&integers,size_bytes);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 tolua_pushnumber(tolua_S,(lua_Number)integers);
 }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniformiv'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniform1f of class  vid::IGPUProgram */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IGPUProgram_setUniform1f00
static int tolua_MyLuaBind_vid_IGPUProgram_setUniform1f00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IGPUProgram",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IGPUProgram* self = (vid::IGPUProgram*)  tolua_tousertype(tolua_S,1,0);
  vid::E_UNIFORM_TYPE uniform = ((vid::E_UNIFORM_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  float float_val = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniform1f'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setUniform1f(uniform,float_val);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniform1f'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUniform1i of class  vid::IGPUProgram */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IGPUProgram_setUniform1i00
static int tolua_MyLuaBind_vid_IGPUProgram_setUniform1i00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IGPUProgram",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IGPUProgram* self = (vid::IGPUProgram*)  tolua_tousertype(tolua_S,1,0);
  vid::E_UNIFORM_TYPE uniform = ((vid::E_UNIFORM_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  int int_val = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUniform1i'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->setUniform1i(uniform,int_val);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUniform1i'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getUniformMask of class  vid::IGPUProgram */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IGPUProgram_getUniformMask00
static int tolua_MyLuaBind_vid_IGPUProgram_getUniformMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IGPUProgram",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IGPUProgram* self = (vid::IGPUProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getUniformMask'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getUniformMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUniformMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isOK of class  vid::IGPUProgram */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IGPUProgram_isOK00
static int tolua_MyLuaBind_vid_IGPUProgram_isOK00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IGPUProgram",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IGPUProgram* self = (vid::IGPUProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isOK'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isOK();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isOK'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: recreate of class  vid::IGPUProgram */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IGPUProgram_recreate00
static int tolua_MyLuaBind_vid_IGPUProgram_recreate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IGPUProgram",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isstring(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isstring(tolua_S,7,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IGPUProgram* self = (vid::IGPUProgram*)  tolua_tousertype(tolua_S,1,0);
  unsigned uniforms = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned lights_count = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  vid::E_VERTEX_SHADER_VERSION vertex_shader_ver = ((vid::E_VERTEX_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,4,0));
  const char* vertex_shader = ((const char*)  tolua_tostring(tolua_S,5,0));
  vid::E_PIXEL_SHADER_VERSION pixel_shader_ver = ((vid::E_PIXEL_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,6,0));
  const char* pixel_shader = ((const char*)  tolua_tostring(tolua_S,7,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'recreate'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->recreate(uniforms,lights_count,vertex_shader_ver,vertex_shader,pixel_shader_ver,pixel_shader);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'recreate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLightsCount of class  vid::IGPUProgram */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IGPUProgram_getLightsCount00
static int tolua_MyLuaBind_vid_IGPUProgram_getLightsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IGPUProgram",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IGPUProgram* self = (vid::IGPUProgram*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLightsCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getLightsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLightsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::loadGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_loadGPUProgramInfo00
static int tolua_MyLuaBind_vid_loadGPUProgramInfo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const char* file_name = ((const char*)  tolua_tostring(tolua_S,1,0));
  const char* tag = ((const char*)  tolua_tostring(tolua_S,2,0));
 {
  const vid::SGPUProgramInfo* tolua_ret = (const vid::SGPUProgramInfo*)  vid::loadGPUProgramInfo(file_name,tag);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"const vid::SGPUProgramInfo");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadGPUProgramInfo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::initIdentityGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_initIdentityGPUProgramInfo00
static int tolua_MyLuaBind_vid_initIdentityGPUProgramInfo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  unsigned lights_count = ((unsigned)  tolua_tonumber(tolua_S,1,0));
 {
  const vid::SGPUProgramInfo* tolua_ret = (const vid::SGPUProgramInfo*)  vid::initIdentityGPUProgramInfo(lights_count);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"const vid::SGPUProgramInfo");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'initIdentityGPUProgramInfo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::setGPUProgramInfoLightsCount */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_setGPUProgramInfoLightsCount00
static int tolua_MyLuaBind_vid_setGPUProgramInfoLightsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SGPUProgramInfo",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SGPUProgramInfo* prog_info = ((const vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0));
  unsigned lights_count = ((unsigned)  tolua_tonumber(tolua_S,2,0));
 {
  bool tolua_ret = (bool)  vid::setGPUProgramInfoLightsCount(prog_info,lights_count);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGPUProgramInfoLightsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::appendGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_appendGPUProgramInfo00
static int tolua_MyLuaBind_vid_appendGPUProgramInfo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const vid::SGPUProgramInfo",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isstring(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isstring(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 !tolua_isstring(tolua_S,8,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,9,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const vid::SGPUProgramInfo* prog_info = ((const vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,1,0));
  unsigned uniforms = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  vid::E_DRIVER_TYPE driver = ((vid::E_DRIVER_TYPE) (int)  tolua_tonumber(tolua_S,3,0));
  const char* tag = ((const char*)  tolua_tostring(tolua_S,4,0));
  vid::E_VERTEX_SHADER_VERSION vertex_ver = ((vid::E_VERTEX_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,5,0));
  const char* vertex_file_name = ((const char*)  tolua_tostring(tolua_S,6,0));
  vid::E_PIXEL_SHADER_VERSION pixel_ver = ((vid::E_PIXEL_SHADER_VERSION) (int)  tolua_tonumber(tolua_S,7,0));
  const char* pixel_file_name = ((const char*)  tolua_tostring(tolua_S,8,0));
 {
  bool tolua_ret = (bool)  vid::appendGPUProgramInfo(prog_info,uniforms,driver,tag,vertex_ver,vertex_file_name,pixel_ver,pixel_file_name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'appendGPUProgramInfo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: vid::writeGPUProgramInfo */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_writeGPUProgramInfo00
static int tolua_MyLuaBind_vid_writeGPUProgramInfo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const vid::SGPUProgramInfo",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const char* file_name = ((const char*)  tolua_tostring(tolua_S,1,0));
  const vid::SGPUProgramInfo* prog_info = ((const vid::SGPUProgramInfo*)  tolua_tousertype(tolua_S,2,0));
 {
  bool tolua_ret = (bool)  vid::writeGPUProgramInfo(file_name,prog_info);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'writeGPUProgramInfo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  vid::IVertexBuffer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IVertexBuffer_getType00
static int tolua_MyLuaBind_vid_IVertexBuffer_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IVertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IVertexBuffer* self = (vid::IVertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'",NULL);
#endif
 {
  vid::E_VERTEX_TYPE tolua_ret = (vid::E_VERTEX_TYPE)  self->getType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  vid::IIndexBuffer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IIndexBuffer_getType00
static int tolua_MyLuaBind_vid_IIndexBuffer_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IIndexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IIndexBuffer* self = (vid::IIndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'",NULL);
#endif
 {
  E_INDEX_TYPE tolua_ret = (E_INDEX_TYPE)  self->getType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  vid::IRenderBuffer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IRenderBuffer_getType00
static int tolua_MyLuaBind_vid_IRenderBuffer_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IRenderBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IRenderBuffer* self = (vid::IRenderBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'",NULL);
#endif
 {
  vid::E_RENDER_BUFFER_TYPE tolua_ret = (vid::E_RENDER_BUFFER_TYPE)  self->getType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDrawPrimitiveType of class  vid::IRenderBuffer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IRenderBuffer_getDrawPrimitiveType00
static int tolua_MyLuaBind_vid_IRenderBuffer_getDrawPrimitiveType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IRenderBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IRenderBuffer* self = (vid::IRenderBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDrawPrimitiveType'",NULL);
#endif
 {
  vid::E_DRAW_PRIMITIVE_TYPE tolua_ret = (vid::E_DRAW_PRIMITIVE_TYPE)  self->getDrawPrimitiveType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDrawPrimitiveType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getIndices of class  vid::IRenderBuffer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IRenderBuffer_getIndices00
static int tolua_MyLuaBind_vid_IRenderBuffer_getIndices00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IRenderBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IRenderBuffer* self = (vid::IRenderBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getIndices'",NULL);
#endif
 {
  vid::IIndexBuffer* tolua_ret = (vid::IIndexBuffer*)  self->getIndices();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IIndexBuffer");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getIndices'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVertices of class  vid::IRenderBuffer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IRenderBuffer_getVertices00
static int tolua_MyLuaBind_vid_IRenderBuffer_getVertices00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IRenderBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IRenderBuffer* self = (vid::IRenderBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVertices'",NULL);
#endif
 {
  vid::IVertexBuffer* tolua_ret = (vid::IVertexBuffer*)  self->getVertices();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::IVertexBuffer");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVertices'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: bindColorTexture of class  vid::IRenderTarget */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IRenderTarget_bindColorTexture00
static int tolua_MyLuaBind_vid_IRenderTarget_bindColorTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IRenderTarget",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"vid::ITexture",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IRenderTarget* self = (vid::IRenderTarget*)  tolua_tousertype(tolua_S,1,0);
  unsigned no = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  vid::ITexture* colorTexture = ((vid::ITexture*)  tolua_tousertype(tolua_S,3,0));
  bool doRebuild = ((bool)  tolua_toboolean(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'bindColorTexture'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->bindColorTexture(no,colorTexture,doRebuild);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'bindColorTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: bindColorTexture of class  vid::IRenderTarget */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IRenderTarget_bindColorTexture01
static int tolua_MyLuaBind_vid_IRenderTarget_bindColorTexture01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IRenderTarget",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  vid::IRenderTarget* self = (vid::IRenderTarget*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* colorTexture = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
  bool doRebuild = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'bindColorTexture'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->bindColorTexture(colorTexture,doRebuild);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_MyLuaBind_vid_IRenderTarget_bindColorTexture00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: bindDepthTexture of class  vid::IRenderTarget */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IRenderTarget_bindDepthTexture00
static int tolua_MyLuaBind_vid_IRenderTarget_bindDepthTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IRenderTarget",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"vid::ITexture",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IRenderTarget* self = (vid::IRenderTarget*)  tolua_tousertype(tolua_S,1,0);
  vid::ITexture* depthTexture = ((vid::ITexture*)  tolua_tousertype(tolua_S,2,0));
  bool doRebuild = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'bindDepthTexture'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->bindDepthTexture(depthTexture,doRebuild);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'bindDepthTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rebuild of class  vid::IRenderTarget */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IRenderTarget_rebuild00
static int tolua_MyLuaBind_vid_IRenderTarget_rebuild00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IRenderTarget",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IRenderTarget* self = (vid::IRenderTarget*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rebuild'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->rebuild();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rebuild'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getColorTexture of class  vid::IRenderTarget */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IRenderTarget_getColorTexture00
static int tolua_MyLuaBind_vid_IRenderTarget_getColorTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IRenderTarget",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IRenderTarget* self = (vid::IRenderTarget*)  tolua_tousertype(tolua_S,1,0);
  unsigned no = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getColorTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getColorTexture(no);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColorTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDepthTexture of class  vid::IRenderTarget */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_vid_IRenderTarget_getDepthTexture00
static int tolua_MyLuaBind_vid_IRenderTarget_getDepthTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"vid::IRenderTarget",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  vid::IRenderTarget* self = (vid::IRenderTarget*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDepthTexture'",NULL);
#endif
 {
  vid::ITexture* tolua_ret = (vid::ITexture*)  self->getDepthTexture();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"vid::ITexture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDepthTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Year of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_get_os__STimeValue_Year
static int tolua_get_os__STimeValue_Year(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Year'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Year);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Year of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_set_os__STimeValue_Year
static int tolua_set_os__STimeValue_Year(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Year'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Year = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Month of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_get_os__STimeValue_Month
static int tolua_get_os__STimeValue_Month(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Month'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Month);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Month of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_set_os__STimeValue_Month
static int tolua_set_os__STimeValue_Month(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Month'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Month = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MonthDay of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_get_os__STimeValue_MonthDay
static int tolua_get_os__STimeValue_MonthDay(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MonthDay'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->MonthDay);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MonthDay of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_set_os__STimeValue_MonthDay
static int tolua_set_os__STimeValue_MonthDay(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MonthDay'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MonthDay = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: WeekDay of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_get_os__STimeValue_WeekDay
static int tolua_get_os__STimeValue_WeekDay(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WeekDay'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->WeekDay);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: WeekDay of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_set_os__STimeValue_WeekDay
static int tolua_set_os__STimeValue_WeekDay(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WeekDay'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->WeekDay = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Hour of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_get_os__STimeValue_Hour
static int tolua_get_os__STimeValue_Hour(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Hour'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Hour);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Hour of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_set_os__STimeValue_Hour
static int tolua_set_os__STimeValue_Hour(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Hour'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Hour = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Minute of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_get_os__STimeValue_Minute
static int tolua_get_os__STimeValue_Minute(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Minute'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Minute);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Minute of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_set_os__STimeValue_Minute
static int tolua_set_os__STimeValue_Minute(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Minute'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Minute = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Second of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_get_os__STimeValue_Second
static int tolua_get_os__STimeValue_Second(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Second'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Second);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Second of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_set_os__STimeValue_Second
static int tolua_set_os__STimeValue_Second(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Second'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Second = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Milisecond of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_get_os__STimeValue_Milisecond
static int tolua_get_os__STimeValue_Milisecond(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Milisecond'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->Milisecond);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Milisecond of class  os::STimeValue */
#ifndef TOLUA_DISABLE_tolua_set_os__STimeValue_Milisecond
static int tolua_set_os__STimeValue_Milisecond(lua_State* tolua_S)
{
  os::STimeValue* self = (os::STimeValue*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Milisecond'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Milisecond = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* function: os::getOperationSystemVersion */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_getOperationSystemVersion00
static int tolua_MyLuaBind_os_getOperationSystemVersion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  os::E_OS_VERSION tolua_ret = (os::E_OS_VERSION)  os::getOperationSystemVersion();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOperationSystemVersion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: os::copyToClipboard */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_copyToClipboard00
static int tolua_MyLuaBind_os_copyToClipboard00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isstring(tolua_S,1,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const char* text = ((const char*)  tolua_tostring(tolua_S,1,0));
 {
  os::copyToClipboard(text);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'copyToClipboard'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: os::getTextFromClipboard */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_getTextFromClipboard00
static int tolua_MyLuaBind_os_getTextFromClipboard00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  const char* tolua_ret = (const char*)  os::getTextFromClipboard();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTextFromClipboard'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: os::getMonitorBrightness */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_getMonitorBrightness00
static int tolua_MyLuaBind_os_getMonitorBrightness00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  float tolua_ret = (float)  os::getMonitorBrightness();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMonitorBrightness'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: os::setMonitorBrightness */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_setMonitorBrightness00
static int tolua_MyLuaBind_os_setMonitorBrightness00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  float r_gamma = ((float)  tolua_tonumber(tolua_S,1,0));
  unsigned bits = ((unsigned)  tolua_tonumber(tolua_S,2,0));
 {
  bool tolua_ret = (bool)  os::setMonitorBrightness(r_gamma,bits);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMonitorBrightness'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: os::switchMonitorToFullScreen */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_switchMonitorToFullScreen00
static int tolua_MyLuaBind_os_switchMonitorToFullScreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  unsigned width = ((unsigned)  tolua_tonumber(tolua_S,1,0));
  unsigned height = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned bits = ((unsigned)  tolua_tonumber(tolua_S,3,0));
 {
  bool tolua_ret = (bool)  os::switchMonitorToFullScreen(width,height,bits);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'switchMonitorToFullScreen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: os::restoreMonitorSettings */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_restoreMonitorSettings00
static int tolua_MyLuaBind_os_restoreMonitorSettings00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  os::restoreMonitorSettings();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'restoreMonitorSettings'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: os::getCurrentProcessName */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_getCurrentProcessName00
static int tolua_MyLuaBind_os_getCurrentProcessName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isboolean(tolua_S,1,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  bool file_name_only = ((bool)  tolua_toboolean(tolua_S,1,true));
 {
  const char* tolua_ret = (const char*)  os::getCurrentProcessName(file_name_only);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentProcessName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: os::getCurrentTime */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_getCurrentTime00
static int tolua_MyLuaBind_os_getCurrentTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  const os::STimeValue& tolua_ret = (const os::STimeValue&)  os::getCurrentTime();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const os::STimeValue");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: os::getCurrentTimeString */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_getCurrentTimeString00
static int tolua_MyLuaBind_os_getCurrentTimeString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnumber(tolua_S,1,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::E_TIME_STRING_FORMAT format = ((os::E_TIME_STRING_FORMAT) (int)  tolua_tonumber(tolua_S,1,os::ETSF_STANDARD));
 {
  const char* tolua_ret = (const char*)  os::getCurrentTimeString(format);
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCurrentTimeString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSystemTime of class  os::ITimer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_ITimer_getSystemTime00
static int tolua_MyLuaBind_os_ITimer_getSystemTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::ITimer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::ITimer* self = (os::ITimer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSystemTime'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getSystemTime();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSystemTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTime of class  os::ITimer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_ITimer_getTime00
static int tolua_MyLuaBind_os_ITimer_getTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::ITimer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::ITimer* self = (os::ITimer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTime'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getTime();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSystemTimeSec of class  os::ITimer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_ITimer_getSystemTimeSec00
static int tolua_MyLuaBind_os_ITimer_getSystemTimeSec00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::ITimer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::ITimer* self = (os::ITimer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSystemTimeSec'",NULL);
#endif
 {
  double tolua_ret = (double)  self->getSystemTimeSec();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSystemTimeSec'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTimeSec of class  os::ITimer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_ITimer_getTimeSec00
static int tolua_MyLuaBind_os_ITimer_getTimeSec00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::ITimer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::ITimer* self = (os::ITimer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTimeSec'",NULL);
#endif
 {
  double tolua_ret = (double)  self->getTimeSec();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTimeSec'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: suspend of class  os::ITimer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_ITimer_suspend00
static int tolua_MyLuaBind_os_ITimer_suspend00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::ITimer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::ITimer* self = (os::ITimer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'suspend'",NULL);
#endif
 {
  self->suspend();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'suspend'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: resume of class  os::ITimer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_ITimer_resume00
static int tolua_MyLuaBind_os_ITimer_resume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::ITimer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::ITimer* self = (os::ITimer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'resume'",NULL);
#endif
 {
  self->resume();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'resume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isSuspended of class  os::ITimer */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_ITimer_isSuspended00
static int tolua_MyLuaBind_os_ITimer_isSuspended00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::ITimer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::ITimer* self = (os::ITimer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isSuspended'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isSuspended();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isSuspended'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  os::ITimerMain */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_ITimerMain_getSingleton00
static int tolua_MyLuaBind_os_ITimerMain_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"os::ITimerMain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  os::ITimerMain& tolua_ret = (os::ITimerMain&)  os::ITimerMain::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"os::ITimerMain");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  os::ITimerSecond */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_ITimerSecond_getSingleton00
static int tolua_MyLuaBind_os_ITimerSecond_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"os::ITimerSecond",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  os::ITimerSecond& tolua_ret = (os::ITimerSecond&)  os::ITimerSecond::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"os::ITimerSecond");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  os::IMemStatus */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_IMemStatus_getSingleton00
static int tolua_MyLuaBind_os_IMemStatus_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"os::IMemStatus",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  os::IMemStatus& tolua_ret = (os::IMemStatus&)  os::IMemStatus::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"os::IMemStatus");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAllocatedBytes of class  os::IMemStatus */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_IMemStatus_getAllocatedBytes00
static int tolua_MyLuaBind_os_IMemStatus_getAllocatedBytes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::IMemStatus",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::IMemStatus* self = (os::IMemStatus*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAllocatedBytes'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAllocatedBytes();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAllocatedBytes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAllocsPerSec of class  os::IMemStatus */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_IMemStatus_getAllocsPerSec00
static int tolua_MyLuaBind_os_IMemStatus_getAllocsPerSec00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::IMemStatus",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::IMemStatus* self = (os::IMemStatus*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAllocsPerSec'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAllocsPerSec();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAllocsPerSec'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDeallocsPerSec of class  os::IMemStatus */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_IMemStatus_getDeallocsPerSec00
static int tolua_MyLuaBind_os_IMemStatus_getDeallocsPerSec00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::IMemStatus",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::IMemStatus* self = (os::IMemStatus*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDeallocsPerSec'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getDeallocsPerSec();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDeallocsPerSec'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAllocBytesPerSec of class  os::IMemStatus */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_IMemStatus_getAllocBytesPerSec00
static int tolua_MyLuaBind_os_IMemStatus_getAllocBytesPerSec00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::IMemStatus",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::IMemStatus* self = (os::IMemStatus*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAllocBytesPerSec'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getAllocBytesPerSec();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAllocBytesPerSec'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDeallocBytesPerSec of class  os::IMemStatus */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_os_IMemStatus_getDeallocBytesPerSec00
static int tolua_MyLuaBind_os_IMemStatus_getDeallocBytesPerSec00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"os::IMemStatus",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  os::IMemStatus* self = (os::IMemStatus*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDeallocBytesPerSec'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getDeallocBytesPerSec();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDeallocBytesPerSec'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  scr::IScriptManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scr_IScriptManager_getSingleton00
static int tolua_MyLuaBind_scr_IScriptManager_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scr::IScriptManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scr::IScriptManager& tolua_ret = (scr::IScriptManager&)  scr::IScriptManager::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"scr::IScriptManager");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: runScriptText of class  scr::IScriptManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scr_IScriptManager_runScriptText00
static int tolua_MyLuaBind_scr_IScriptManager_runScriptText00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scr::IScriptManager",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scr::IScriptManager* self = (scr::IScriptManager*)  tolua_tousertype(tolua_S,1,0);
  const char* script_text = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'runScriptText'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->runScriptText(script_text);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'runScriptText'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScriptCallback of class  scr::IScriptManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scr_IScriptManager_setScriptCallback00
static int tolua_MyLuaBind_scr_IScriptManager_setScriptCallback00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scr::IScriptManager",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scr::IScriptManager* self = (scr::IScriptManager*)  tolua_tousertype(tolua_S,1,0);
  scr::E_SCRIPT_CALLBACK_TYPE type = ((scr::E_SCRIPT_CALLBACK_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
  const char* func = ((const char*)  tolua_tostring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScriptCallback'",NULL);
#endif
 {
  self->setScriptCallback(type,func);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScriptCallback'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: runScript of class  scr::ICoreScriptManagerInterface */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scr_ICoreScriptManagerInterface_runScript00
static int tolua_MyLuaBind_scr_ICoreScriptManagerInterface_runScript00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scr::ICoreScriptManagerInterface",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scr::ICoreScriptManagerInterface* self = (scr::ICoreScriptManagerInterface*)  tolua_tousertype(tolua_S,1,0);
  const char* filename = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'runScript'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->runScript(filename);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'runScript'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearScriptMemory of class  scr::ICoreScriptManagerInterface */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scr_ICoreScriptManagerInterface_clearScriptMemory00
static int tolua_MyLuaBind_scr_ICoreScriptManagerInterface_clearScriptMemory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scr::ICoreScriptManagerInterface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scr::ICoreScriptManagerInterface* self = (scr::ICoreScriptManagerInterface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearScriptMemory'",NULL);
#endif
 {
  self->clearScriptMemory();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearScriptMemory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScriptMemoryKBytes of class  scr::ICoreScriptManagerInterface */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scr_ICoreScriptManagerInterface_getScriptMemoryKBytes00
static int tolua_MyLuaBind_scr_ICoreScriptManagerInterface_getScriptMemoryKBytes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scr::ICoreScriptManagerInterface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scr::ICoreScriptManagerInterface* self = (scr::ICoreScriptManagerInterface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScriptMemoryKBytes'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getScriptMemoryKBytes();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScriptMemoryKBytes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScriptMaxMemoryKBytes of class  scr::ICoreScriptManagerInterface */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scr_ICoreScriptManagerInterface_setScriptMaxMemoryKBytes00
static int tolua_MyLuaBind_scr_ICoreScriptManagerInterface_setScriptMaxMemoryKBytes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scr::ICoreScriptManagerInterface",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scr::ICoreScriptManagerInterface* self = (scr::ICoreScriptManagerInterface*)  tolua_tousertype(tolua_S,1,0);
  unsigned max_kbytes = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScriptMaxMemoryKBytes'",NULL);
#endif
 {
  self->setScriptMaxMemoryKBytes(max_kbytes);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScriptMaxMemoryKBytes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCoreScripterPtr of class  scr::ICoreScriptManagerInterface */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scr_ICoreScriptManagerInterface_getCoreScripterPtr00
static int tolua_MyLuaBind_scr_ICoreScriptManagerInterface_getCoreScripterPtr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scr::ICoreScriptManagerInterface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scr::ICoreScriptManagerInterface* self = (scr::ICoreScriptManagerInterface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCoreScripterPtr'",NULL);
#endif
 {
  void* tolua_ret = (void*)  self->getCoreScripterPtr();
 tolua_pushuserdata(tolua_S,(void*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCoreScripterPtr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScriptsFullDir of class  scr::ICoreScriptManagerInterface */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scr_ICoreScriptManagerInterface_setScriptsFullDir00
static int tolua_MyLuaBind_scr_ICoreScriptManagerInterface_setScriptsFullDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scr::ICoreScriptManagerInterface",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scr::ICoreScriptManagerInterface* self = (scr::ICoreScriptManagerInterface*)  tolua_tousertype(tolua_S,1,0);
  const char* dir = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScriptsFullDir'",NULL);
#endif
 {
  self->setScriptsFullDir(dir);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScriptsFullDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScriptsFullDir of class  scr::ICoreScriptManagerInterface */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scr_ICoreScriptManagerInterface_getScriptsFullDir00
static int tolua_MyLuaBind_scr_ICoreScriptManagerInterface_getScriptsFullDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"scr::ICoreScriptManagerInterface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  scr::ICoreScriptManagerInterface* self = (scr::ICoreScriptManagerInterface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScriptsFullDir'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getScriptsFullDir();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScriptsFullDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  scr::ICoreScriptManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_scr_ICoreScriptManager_getSingleton00
static int tolua_MyLuaBind_scr_ICoreScriptManager_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"scr::ICoreScriptManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  scr::ICoreScriptManager& tolua_ret = (scr::ICoreScriptManager&)  scr::ICoreScriptManager::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"scr::ICoreScriptManager");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_getSingleton00
static int tolua_MyLuaBind_mm_ISoundDriver_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  mm::ISoundDriver& tolua_ret = (mm::ISoundDriver&)  mm::ISoundDriver::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"mm::ISoundDriver");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPos of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_getPos00
static int tolua_MyLuaBind_mm_ISoundDriver_getPos00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISoundDriver* self = (const mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPos'",NULL);
#endif
 {
  const core::vector3df tolua_ret = (const core::vector3df)  self->getPos();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"const core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(const core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"const core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPos'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVelocity of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_getVelocity00
static int tolua_MyLuaBind_mm_ISoundDriver_getVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISoundDriver* self = (const mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVelocity'",NULL);
#endif
 {
  const core::vector3df tolua_ret = (const core::vector3df)  self->getVelocity();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"const core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(const core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"const core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewDir of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_getViewDir00
static int tolua_MyLuaBind_mm_ISoundDriver_getViewDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISoundDriver* self = (const mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewDir'",NULL);
#endif
 {
  const core::vector3df tolua_ret = (const core::vector3df)  self->getViewDir();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"const core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(const core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"const core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getUpDir of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_getUpDir00
static int tolua_MyLuaBind_mm_ISoundDriver_getUpDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISoundDriver* self = (const mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getUpDir'",NULL);
#endif
 {
  const core::vector3df tolua_ret = (const core::vector3df)  self->getUpDir();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"const core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(const core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"const core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUpDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: moveTo of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_moveTo00
static int tolua_MyLuaBind_mm_ISoundDriver_moveTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* newPos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'moveTo'",NULL);
#endif
 {
  self->moveTo(*newPos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'moveTo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: moveBy of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_moveBy00
static int tolua_MyLuaBind_mm_ISoundDriver_moveBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* delta = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'moveBy'",NULL);
#endif
 {
  self->moveBy(*delta);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'moveBy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVelocity of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_setVelocity00
static int tolua_MyLuaBind_mm_ISoundDriver_setVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* newVel = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVelocity'",NULL);
#endif
 {
  self->setVelocity(*newVel);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOrientation of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_setOrientation00
static int tolua_MyLuaBind_mm_ISoundDriver_setOrientation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* view = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  const core::vector3df* up = ((const core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOrientation'",NULL);
#endif
 {
  self->setOrientation(*view,*up);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOrientation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: cloneSound of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_cloneSound00
static int tolua_MyLuaBind_mm_ISoundDriver_cloneSound00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
  mm::ISound* snd = ((mm::ISound*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'cloneSound'",NULL);
#endif
 {
  mm::ISound* tolua_ret = (mm::ISound*)  self->cloneSound(snd);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"mm::ISound");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'cloneSound'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSound of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_getSound00
static int tolua_MyLuaBind_mm_ISoundDriver_getSound00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
  const char* fileName = ((const char*)  tolua_tostring(tolua_S,2,0));
  bool loop = ((bool)  tolua_toboolean(tolua_S,3,0));
  bool auto_delete = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSound'",NULL);
#endif
 {
  mm::ISound* tolua_ret = (mm::ISound*)  self->getSound(fileName,loop,auto_delete);
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"mm::ISound");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSound'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findSoundFileName of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_findSoundFileName00
static int tolua_MyLuaBind_mm_ISoundDriver_findSoundFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
  mm::ISound* snd_ptr = ((mm::ISound*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findSoundFileName'",NULL);
#endif
 {
  core::stringc tolua_ret = (core::stringc)  self->findSoundFileName(snd_ptr);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::stringc(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::stringc");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::stringc));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::stringc");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findSoundFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: findSoundFullFileName of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_findSoundFullFileName00
static int tolua_MyLuaBind_mm_ISoundDriver_findSoundFullFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
  mm::ISound* snd_ptr = ((mm::ISound*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'findSoundFullFileName'",NULL);
#endif
 {
  core::stringc tolua_ret = (core::stringc)  self->findSoundFullFileName(snd_ptr);
 {
#ifdef __cplusplus
 void* tolua_obj = new core::stringc(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::stringc");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::stringc));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::stringc");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'findSoundFullFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearUnusedSoundCache of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_clearUnusedSoundCache00
static int tolua_MyLuaBind_mm_ISoundDriver_clearUnusedSoundCache00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearUnusedSoundCache'",NULL);
#endif
 {
  self->clearUnusedSoundCache();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearUnusedSoundCache'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateSounds of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_updateSounds00
static int tolua_MyLuaBind_mm_ISoundDriver_updateSounds00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateSounds'",NULL);
#endif
 {
  self->updateSounds();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateSounds'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPlayingSoundsCount of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_getPlayingSoundsCount00
static int tolua_MyLuaBind_mm_ISoundDriver_getPlayingSoundsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPlayingSoundsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getPlayingSoundsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPlayingSoundsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSoundsCount of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_getSoundsCount00
static int tolua_MyLuaBind_mm_ISoundDriver_getSoundsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSoundsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getSoundsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSoundsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSoundDriverType of class  mm::ISoundDriver */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundDriver_getSoundDriverType00
static int tolua_MyLuaBind_mm_ISoundDriver_getSoundDriverType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundDriver",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundDriver* self = (mm::ISoundDriver*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSoundDriverType'",NULL);
#endif
 {
  mm::E_SOUND_DRIVER_TYPE tolua_ret = (mm::E_SOUND_DRIVER_TYPE)  self->getSoundDriverType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSoundDriverType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNumChannels of class  mm::ISoundData */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundData_getNumChannels00
static int tolua_MyLuaBind_mm_ISoundData_getNumChannels00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISoundData",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISoundData* self = (const mm::ISoundData*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNumChannels'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getNumChannels();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNumChannels'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFrequency of class  mm::ISoundData */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundData_getFrequency00
static int tolua_MyLuaBind_mm_ISoundData_getFrequency00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISoundData",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISoundData* self = (const mm::ISoundData*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFrequency'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getFrequency();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFrequency'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBitsPerSample of class  mm::ISoundData */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundData_getBitsPerSample00
static int tolua_MyLuaBind_mm_ISoundData_getBitsPerSample00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISoundData",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISoundData* self = (const mm::ISoundData*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBitsPerSample'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getBitsPerSample();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBitsPerSample'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSize of class  mm::ISoundData */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundData_getSize00
static int tolua_MyLuaBind_mm_ISoundData_getSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISoundData",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISoundData* self = (const mm::ISoundData*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSize'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getSize();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: read of class  mm::ISoundData */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundData_read00
static int tolua_MyLuaBind_mm_ISoundData_read00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundData",0,&tolua_err) ||
 !tolua_isstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundData* self = (mm::ISoundData*)  tolua_tousertype(tolua_S,1,0);
  char* buf = ((char*)  tolua_tostring(tolua_S,2,0));
  int size = ((int)  tolua_tonumber(tolua_S,3,-1));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'read'",NULL);
#endif
 {
  int tolua_ret = (int)  self->read(buf,size);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'read'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: seek of class  mm::ISoundData */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundData_seek00
static int tolua_MyLuaBind_mm_ISoundData_seek00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundData",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundData* self = (mm::ISoundData*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'seek'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->seek(time);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'seek'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTime of class  mm::ISoundData */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundData_getTime00
static int tolua_MyLuaBind_mm_ISoundData_getTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundData",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundData* self = (mm::ISoundData*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTime'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getTime();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: atEnd of class  mm::ISoundData */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundData_atEnd00
static int tolua_MyLuaBind_mm_ISoundData_atEnd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISoundData",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISoundData* self = (const mm::ISoundData*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'atEnd'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->atEnd();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'atEnd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFileName of class  mm::ISoundData */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundData_getFileName00
static int tolua_MyLuaBind_mm_ISoundData_getFileName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISoundData",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISoundData* self = (const mm::ISoundData*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFileName'",NULL);
#endif
 {
  const char* tolua_ret = (const char*)  self->getFileName();
 tolua_pushstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFileName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  mm::ISoundData */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISoundData_getType00
static int tolua_MyLuaBind_mm_ISoundData_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISoundData",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISoundData* self = (mm::ISoundData*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'",NULL);
#endif
 {
  mm::E_SOUND_DATA_TYPE tolua_ret = (mm::E_SOUND_DATA_TYPE)  self->getType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPos of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_getPos00
static int tolua_MyLuaBind_mm_ISound_getPos00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISound* self = (const mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPos'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getPos();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPos'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVelocity of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_getVelocity00
static int tolua_MyLuaBind_mm_ISound_getVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISound* self = (const mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVelocity'",NULL);
#endif
 {
  core::vector3df tolua_ret = (core::vector3df)  self->getVelocity();
 {
#ifdef __cplusplus
 void* tolua_obj = new core::vector3df(tolua_ret);
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(core::vector3df));
 tolua_pushusertype_and_takeownership(tolua_S,tolua_obj,"core::vector3df");
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGain of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_getGain00
static int tolua_MyLuaBind_mm_ISound_getGain00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISound* self = (const mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGain'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getGain();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGain'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVolume of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_getVolume00
static int tolua_MyLuaBind_mm_ISound_getVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISound* self = (const mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVolume'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getVolume();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPitch of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_getPitch00
static int tolua_MyLuaBind_mm_ISound_getPitch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISound* self = (const mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPitch'",NULL);
#endif
 {
  float tolua_ret = (float)  self->getPitch();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPitch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isLooping of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_isLooping00
static int tolua_MyLuaBind_mm_ISound_isLooping00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISound* self = (const mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isLooping'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isLooping();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isLooping'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isPlaying of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_isPlaying00
static int tolua_MyLuaBind_mm_ISound_isPlaying00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISound* self = (const mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isPlaying'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isPlaying();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isPlaying'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: atEnd of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_atEnd00
static int tolua_MyLuaBind_mm_ISound_atEnd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISound* self = (const mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'atEnd'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->atEnd();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'atEnd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isAutoDelete of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_isAutoDelete00
static int tolua_MyLuaBind_mm_ISound_isAutoDelete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const mm::ISound* self = (const mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isAutoDelete'",NULL);
#endif
 {
  bool tolua_ret = (bool)  self->isAutoDelete();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isAutoDelete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: moveTo of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_moveTo00
static int tolua_MyLuaBind_mm_ISound_moveTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* newPos = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'moveTo'",NULL);
#endif
 {
  self->moveTo(*newPos);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'moveTo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: moveBy of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_moveBy00
static int tolua_MyLuaBind_mm_ISound_moveBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* delta = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'moveBy'",NULL);
#endif
 {
  self->moveBy(*delta);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'moveBy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVelocity of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_setVelocity00
static int tolua_MyLuaBind_mm_ISound_setVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const core::vector3df",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
  const core::vector3df* newVel = ((const core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVelocity'",NULL);
#endif
 {
  self->setVelocity(*newVel);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPitch of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_setPitch00
static int tolua_MyLuaBind_mm_ISound_setPitch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
  float newPitch = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPitch'",NULL);
#endif
 {
  self->setPitch(newPitch);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPitch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGain of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_setGain00
static int tolua_MyLuaBind_mm_ISound_setGain00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
  float newGain = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGain'",NULL);
#endif
 {
  self->setGain(newGain);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGain'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVolume of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_setVolume00
static int tolua_MyLuaBind_mm_ISound_setVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
  float newVolume = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVolume'",NULL);
#endif
 {
  self->setVolume(newVolume);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLooping of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_setLooping00
static int tolua_MyLuaBind_mm_ISound_setLooping00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
  bool flag = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLooping'",NULL);
#endif
 {
  self->setLooping(flag);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLooping'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: play of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_play00
static int tolua_MyLuaBind_mm_ISound_play00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'play'",NULL);
#endif
 {
  self->play();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'play'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: pause of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_pause00
static int tolua_MyLuaBind_mm_ISound_pause00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'pause'",NULL);
#endif
 {
  self->pause();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'pause'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: stop of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_stop00
static int tolua_MyLuaBind_mm_ISound_stop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'stop'",NULL);
#endif
 {
  self->stop();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'stop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rewind of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_rewind00
static int tolua_MyLuaBind_mm_ISound_rewind00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rewind'",NULL);
#endif
 {
  self->rewind();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rewind'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSoundData of class  mm::ISound */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_mm_ISound_getSoundData00
static int tolua_MyLuaBind_mm_ISound_getSoundData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"mm::ISound",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  mm::ISound* self = (mm::ISound*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSoundData'",NULL);
#endif
 {
  mm::ISoundData* tolua_ret = (mm::ISoundData*)  self->getSoundData();
 tolua_pushusertype(tolua_S,(void*)tolua_ret,"mm::ISoundData");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSoundData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSingleton of class  dyn::IDynamicManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dyn_IDynamicManager_getSingleton00
static int tolua_MyLuaBind_dyn_IDynamicManager_getSingleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"dyn::IDynamicManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  dyn::IDynamicManager& tolua_ret = (dyn::IDynamicManager&)  dyn::IDynamicManager::getSingleton();
 tolua_pushusertype(tolua_S,(void*)&tolua_ret,"dyn::IDynamicManager");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSingleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEnabledDynamicObjectsCount of class  dyn::IDynamicManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dyn_IDynamicManager_getEnabledDynamicObjectsCount00
static int tolua_MyLuaBind_dyn_IDynamicManager_getEnabledDynamicObjectsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dyn::IDynamicManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dyn::IDynamicManager* self = (dyn::IDynamicManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEnabledDynamicObjectsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getEnabledDynamicObjectsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEnabledDynamicObjectsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDynamicObjectsCount of class  dyn::IDynamicManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dyn_IDynamicManager_getDynamicObjectsCount00
static int tolua_MyLuaBind_dyn_IDynamicManager_getDynamicObjectsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dyn::IDynamicManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dyn::IDynamicManager* self = (dyn::IDynamicManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDynamicObjectsCount'",NULL);
#endif
 {
  int tolua_ret = (int)  self->getDynamicObjectsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDynamicObjectsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCustomCollisionPointsCount of class  dyn::IDynamicManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dyn_IDynamicManager_getCustomCollisionPointsCount00
static int tolua_MyLuaBind_dyn_IDynamicManager_getCustomCollisionPointsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dyn::IDynamicManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dyn::IDynamicManager* self = (dyn::IDynamicManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCustomCollisionPointsCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getCustomCollisionPointsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCustomCollisionPointsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDynamicCollisionPointsCount of class  dyn::IDynamicManager */
#ifndef TOLUA_DISABLE_tolua_MyLuaBind_dyn_IDynamicManager_getDynamicCollisionPointsCount00
static int tolua_MyLuaBind_dyn_IDynamicManager_getDynamicCollisionPointsCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"dyn::IDynamicManager",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  dyn::IDynamicManager* self = (dyn::IDynamicManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDynamicCollisionPointsCount'",NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->getDynamicCollisionPointsCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDynamicCollisionPointsCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* Open function */
int tolua_MyLuaBind_open (lua_State* tolua_S)
{
 tolua_open(tolua_S);
 tolua_reg_types(tolua_S);
 tolua_module(tolua_S,NULL,0);
 tolua_beginmodule(tolua_S,NULL);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  tolua_function(tolua_S,"isPtrsEq",tolua_MyLuaBind_core_isPtrsEq00);
 tolua_endmodule(tolua_S);
 tolua_constant(tolua_S,"EIT_16_BIT",EIT_16_BIT);
 tolua_constant(tolua_S,"EIT_32_BIT",EIT_32_BIT);
 tolua_constant(tolua_S,"E_INDEX_TYPE_COUNT",E_INDEX_TYPE_COUNT);
 tolua_cclass(tolua_S,"IUnknown","IUnknown","",NULL);
 tolua_beginmodule(tolua_S,"IUnknown");
  tolua_function(tolua_S,"isLocked",tolua_MyLuaBind_IUnknown_isLocked00);
  tolua_function(tolua_S,"lockObject",tolua_MyLuaBind_IUnknown_lockObject00);
  tolua_function(tolua_S,"unlockObject",tolua_MyLuaBind_IUnknown_unlockObject00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"io",0);
 tolua_beginmodule(tolua_S,"io");
  tolua_constant(tolua_S,"ELL_INFORMATION",io::ELL_INFORMATION);
  tolua_constant(tolua_S,"ELL_WARNING",io::ELL_WARNING);
  tolua_constant(tolua_S,"ELL_ERROR",io::ELL_ERROR);
  tolua_constant(tolua_S,"ELL_NONE",io::ELL_NONE);
  tolua_constant(tolua_S,"E_LOG_LEVEL_COUNT",io::E_LOG_LEVEL_COUNT);
  tolua_constant(tolua_S,"EKC_ESCAPE",io::EKC_ESCAPE);
  tolua_constant(tolua_S,"EKC_1",io::EKC_1);
  tolua_constant(tolua_S,"EKC_2",io::EKC_2);
  tolua_constant(tolua_S,"EKC_3",io::EKC_3);
  tolua_constant(tolua_S,"EKC_4",io::EKC_4);
  tolua_constant(tolua_S,"EKC_5",io::EKC_5);
  tolua_constant(tolua_S,"EKC_6",io::EKC_6);
  tolua_constant(tolua_S,"EKC_7",io::EKC_7);
  tolua_constant(tolua_S,"EKC_8",io::EKC_8);
  tolua_constant(tolua_S,"EKC_9",io::EKC_9);
  tolua_constant(tolua_S,"EKC_0",io::EKC_0);
  tolua_constant(tolua_S,"EKC_MINUS",io::EKC_MINUS);
  tolua_constant(tolua_S,"EKC_EQUALS",io::EKC_EQUALS);
  tolua_constant(tolua_S,"EKC_BACKSPACE",io::EKC_BACKSPACE);
  tolua_constant(tolua_S,"EKC_TAB",io::EKC_TAB);
  tolua_constant(tolua_S,"EKC_Q",io::EKC_Q);
  tolua_constant(tolua_S,"EKC_W",io::EKC_W);
  tolua_constant(tolua_S,"EKC_E",io::EKC_E);
  tolua_constant(tolua_S,"EKC_R",io::EKC_R);
  tolua_constant(tolua_S,"EKC_T",io::EKC_T);
  tolua_constant(tolua_S,"EKC_Y",io::EKC_Y);
  tolua_constant(tolua_S,"EKC_U",io::EKC_U);
  tolua_constant(tolua_S,"EKC_I",io::EKC_I);
  tolua_constant(tolua_S,"EKC_O",io::EKC_O);
  tolua_constant(tolua_S,"EKC_P",io::EKC_P);
  tolua_constant(tolua_S,"EKC_LBRACKET",io::EKC_LBRACKET);
  tolua_constant(tolua_S,"EKC_RBRACKET",io::EKC_RBRACKET);
  tolua_constant(tolua_S,"EKC_RETURN",io::EKC_RETURN);
  tolua_constant(tolua_S,"EKC_LCONTROL",io::EKC_LCONTROL);
  tolua_constant(tolua_S,"EKC_A",io::EKC_A);
  tolua_constant(tolua_S,"EKC_S",io::EKC_S);
  tolua_constant(tolua_S,"EKC_D",io::EKC_D);
  tolua_constant(tolua_S,"EKC_F",io::EKC_F);
  tolua_constant(tolua_S,"EKC_G",io::EKC_G);
  tolua_constant(tolua_S,"EKC_H",io::EKC_H);
  tolua_constant(tolua_S,"EKC_J",io::EKC_J);
  tolua_constant(tolua_S,"EKC_K",io::EKC_K);
  tolua_constant(tolua_S,"EKC_L",io::EKC_L);
  tolua_constant(tolua_S,"EKC_SEMICOLON",io::EKC_SEMICOLON);
  tolua_constant(tolua_S,"EKC_APOSTROPHE",io::EKC_APOSTROPHE);
  tolua_constant(tolua_S,"EKC_GRAVE",io::EKC_GRAVE);
  tolua_constant(tolua_S,"EKC_LSHIFT",io::EKC_LSHIFT);
  tolua_constant(tolua_S,"EKC_BACKSLASH",io::EKC_BACKSLASH);
  tolua_constant(tolua_S,"EKC_Z",io::EKC_Z);
  tolua_constant(tolua_S,"EKC_X",io::EKC_X);
  tolua_constant(tolua_S,"EKC_C",io::EKC_C);
  tolua_constant(tolua_S,"EKC_V",io::EKC_V);
  tolua_constant(tolua_S,"EKC_B",io::EKC_B);
  tolua_constant(tolua_S,"EKC_N",io::EKC_N);
  tolua_constant(tolua_S,"EKC_M",io::EKC_M);
  tolua_constant(tolua_S,"EKC_COMMA",io::EKC_COMMA);
  tolua_constant(tolua_S,"EKC_PERIOD",io::EKC_PERIOD);
  tolua_constant(tolua_S,"EKC_SLASH",io::EKC_SLASH);
  tolua_constant(tolua_S,"EKC_RSHIFT",io::EKC_RSHIFT);
  tolua_constant(tolua_S,"EKC_MULTIPLY",io::EKC_MULTIPLY);
  tolua_constant(tolua_S,"EKC_LALT",io::EKC_LALT);
  tolua_constant(tolua_S,"EKC_SPACE",io::EKC_SPACE);
  tolua_constant(tolua_S,"EKC_CAPITAL",io::EKC_CAPITAL);
  tolua_constant(tolua_S,"EKC_F1",io::EKC_F1);
  tolua_constant(tolua_S,"EKC_F2",io::EKC_F2);
  tolua_constant(tolua_S,"EKC_F3",io::EKC_F3);
  tolua_constant(tolua_S,"EKC_F4",io::EKC_F4);
  tolua_constant(tolua_S,"EKC_F5",io::EKC_F5);
  tolua_constant(tolua_S,"EKC_F6",io::EKC_F6);
  tolua_constant(tolua_S,"EKC_F7",io::EKC_F7);
  tolua_constant(tolua_S,"EKC_F8",io::EKC_F8);
  tolua_constant(tolua_S,"EKC_F9",io::EKC_F9);
  tolua_constant(tolua_S,"EKC_F10",io::EKC_F10);
  tolua_constant(tolua_S,"EKC_NUMLOCK",io::EKC_NUMLOCK);
  tolua_constant(tolua_S,"EKC_SCROLL",io::EKC_SCROLL);
  tolua_constant(tolua_S,"EKC_NUMPAD7",io::EKC_NUMPAD7);
  tolua_constant(tolua_S,"EKC_NUMPAD8",io::EKC_NUMPAD8);
  tolua_constant(tolua_S,"EKC_NUMPAD9",io::EKC_NUMPAD9);
  tolua_constant(tolua_S,"EKC_SUBSTRACT",io::EKC_SUBSTRACT);
  tolua_constant(tolua_S,"EKC_NUMPAD4",io::EKC_NUMPAD4);
  tolua_constant(tolua_S,"EKC_NUMPAD5",io::EKC_NUMPAD5);
  tolua_constant(tolua_S,"EKC_NUMPAD6",io::EKC_NUMPAD6);
  tolua_constant(tolua_S,"EKC_ADD",io::EKC_ADD);
  tolua_constant(tolua_S,"EKC_NUMPAD1",io::EKC_NUMPAD1);
  tolua_constant(tolua_S,"EKC_NUMPAD2",io::EKC_NUMPAD2);
  tolua_constant(tolua_S,"EKC_NUMPAD3",io::EKC_NUMPAD3);
  tolua_constant(tolua_S,"EKC_NUMPAD0",io::EKC_NUMPAD0);
  tolua_constant(tolua_S,"EKC_DECIMAL",io::EKC_DECIMAL);
  tolua_constant(tolua_S,"EKC_OEM_102",io::EKC_OEM_102);
  tolua_constant(tolua_S,"EKC_F11",io::EKC_F11);
  tolua_constant(tolua_S,"EKC_F12",io::EKC_F12);
  tolua_constant(tolua_S,"EKC_F13",io::EKC_F13);
  tolua_constant(tolua_S,"EKC_F14",io::EKC_F14);
  tolua_constant(tolua_S,"EKC_F15",io::EKC_F15);
  tolua_constant(tolua_S,"EKC_KANA",io::EKC_KANA);
  tolua_constant(tolua_S,"EKC_ABNT_C1",io::EKC_ABNT_C1);
  tolua_constant(tolua_S,"EKC_CONVERT",io::EKC_CONVERT);
  tolua_constant(tolua_S,"EKC_NONCONVERT",io::EKC_NONCONVERT);
  tolua_constant(tolua_S,"EKC_YEN",io::EKC_YEN);
  tolua_constant(tolua_S,"EKC_ABNT_C2",io::EKC_ABNT_C2);
  tolua_constant(tolua_S,"EKC_NUMPAD_EQUALS",io::EKC_NUMPAD_EQUALS);
  tolua_constant(tolua_S,"EKC_PREV_TRACK",io::EKC_PREV_TRACK);
  tolua_constant(tolua_S,"EKC_AT",io::EKC_AT);
  tolua_constant(tolua_S,"EKC_COLON",io::EKC_COLON);
  tolua_constant(tolua_S,"EKC_UNDERLINE",io::EKC_UNDERLINE);
  tolua_constant(tolua_S,"EKC_KANJI",io::EKC_KANJI);
  tolua_constant(tolua_S,"EKC_STOP",io::EKC_STOP);
  tolua_constant(tolua_S,"EKC_AX",io::EKC_AX);
  tolua_constant(tolua_S,"EKC_UNLABELED",io::EKC_UNLABELED);
  tolua_constant(tolua_S,"EKC_NEXT_TRACK",io::EKC_NEXT_TRACK);
  tolua_constant(tolua_S,"EKC_NUMPAD_ENTER",io::EKC_NUMPAD_ENTER);
  tolua_constant(tolua_S,"EKC_RCONTROL",io::EKC_RCONTROL);
  tolua_constant(tolua_S,"EKC_MUTE",io::EKC_MUTE);
  tolua_constant(tolua_S,"EKC_CALCULATOR",io::EKC_CALCULATOR);
  tolua_constant(tolua_S,"EKC_PLAY_PAUSE",io::EKC_PLAY_PAUSE);
  tolua_constant(tolua_S,"EKC_MEDIA_STOP",io::EKC_MEDIA_STOP);
  tolua_constant(tolua_S,"EKC_VOLUME_DOWN",io::EKC_VOLUME_DOWN);
  tolua_constant(tolua_S,"EKC_VOLUME_UP",io::EKC_VOLUME_UP);
  tolua_constant(tolua_S,"EKC_WEB_HOME",io::EKC_WEB_HOME);
  tolua_constant(tolua_S,"EKC_NUMPAD_COMMA",io::EKC_NUMPAD_COMMA);
  tolua_constant(tolua_S,"EKC_DIVIDE",io::EKC_DIVIDE);
  tolua_constant(tolua_S,"EKC_SYS_RQ",io::EKC_SYS_RQ);
  tolua_constant(tolua_S,"EKC_RALT",io::EKC_RALT);
  tolua_constant(tolua_S,"EKC_PAUSE",io::EKC_PAUSE);
  tolua_constant(tolua_S,"EKC_HOME",io::EKC_HOME);
  tolua_constant(tolua_S,"EKC_UP",io::EKC_UP);
  tolua_constant(tolua_S,"EKC_PAGE_UP",io::EKC_PAGE_UP);
  tolua_constant(tolua_S,"EKC_LEFT",io::EKC_LEFT);
  tolua_constant(tolua_S,"EKC_RIGHT",io::EKC_RIGHT);
  tolua_constant(tolua_S,"EKC_END",io::EKC_END);
  tolua_constant(tolua_S,"EKC_DOWN",io::EKC_DOWN);
  tolua_constant(tolua_S,"EKC_PAGE_DOWN",io::EKC_PAGE_DOWN);
  tolua_constant(tolua_S,"EKC_INSERT",io::EKC_INSERT);
  tolua_constant(tolua_S,"EKC_DELETE",io::EKC_DELETE);
  tolua_constant(tolua_S,"EKC_LWIN",io::EKC_LWIN);
  tolua_constant(tolua_S,"EKC_RWIN",io::EKC_RWIN);
  tolua_constant(tolua_S,"EKC_APPS",io::EKC_APPS);
  tolua_constant(tolua_S,"EKC_POWER",io::EKC_POWER);
  tolua_constant(tolua_S,"EKC_SLEEP",io::EKC_SLEEP);
  tolua_constant(tolua_S,"EKC_WAKE",io::EKC_WAKE);
  tolua_constant(tolua_S,"EKC_WEB_SEARCH",io::EKC_WEB_SEARCH);
  tolua_constant(tolua_S,"EKC_WEB_FAVORITES",io::EKC_WEB_FAVORITES);
  tolua_constant(tolua_S,"EKC_WEB_REFRESH",io::EKC_WEB_REFRESH);
  tolua_constant(tolua_S,"EKC_WEB_STOP",io::EKC_WEB_STOP);
  tolua_constant(tolua_S,"EKC_WEB_FORWARD",io::EKC_WEB_FORWARD);
  tolua_constant(tolua_S,"EKC_WEB_BACK",io::EKC_WEB_BACK);
  tolua_constant(tolua_S,"EKC_MY_COMPUTER",io::EKC_MY_COMPUTER);
  tolua_constant(tolua_S,"EKC_MAIL",io::EKC_MAIL);
  tolua_constant(tolua_S,"EKC_MEDIA_SELECT",io::EKC_MEDIA_SELECT);
  tolua_constant(tolua_S,"E_KEY_CODE_COUNT",io::E_KEY_CODE_COUNT);
  tolua_constant(tolua_S,"E_KEY_CODE_FORCE_32_BIT",io::E_KEY_CODE_FORCE_32_BIT);
  tolua_constant(tolua_S,"EMC_LMOUSE",io::EMC_LMOUSE);
  tolua_constant(tolua_S,"EMC_MMOUSE",io::EMC_MMOUSE);
  tolua_constant(tolua_S,"EMC_RMOUSE",io::EMC_RMOUSE);
  tolua_constant(tolua_S,"EMC_MWHEEL_UP",io::EMC_MWHEEL_UP);
  tolua_constant(tolua_S,"EMC_MWHEEL_DOWN",io::EMC_MWHEEL_DOWN);
  tolua_constant(tolua_S,"E_MOUSE_CODE_COUNT",io::E_MOUSE_CODE_COUNT);
  tolua_constant(tolua_S,"EET_MOUSE_INPUT_EVENT",io::EET_MOUSE_INPUT_EVENT);
  tolua_constant(tolua_S,"EET_KEY_INPUT_EVENT",io::EET_KEY_INPUT_EVENT);
  tolua_constant(tolua_S,"EET_PAINT_EVENT",io::EET_PAINT_EVENT);
  tolua_constant(tolua_S,"EET_LOG_TEXT_EVENT",io::EET_LOG_TEXT_EVENT);
  tolua_constant(tolua_S,"EEVENT_TYPE_COUNT",io::EEVENT_TYPE_COUNT);
  tolua_constant(tolua_S,"EKIE_KEY_PRESSED_UP",io::EKIE_KEY_PRESSED_UP);
  tolua_constant(tolua_S,"EKIE_KEY_PRESSED_DOWN",io::EKIE_KEY_PRESSED_DOWN);
  tolua_constant(tolua_S,"E_KEY_INPUT_EVENT_COUNT",io::E_KEY_INPUT_EVENT_COUNT);
  tolua_constant(tolua_S,"EMIE_LMOUSE_PRESSED_DOWN",io::EMIE_LMOUSE_PRESSED_DOWN);
  tolua_constant(tolua_S,"EMIE_RMOUSE_PRESSED_DOWN",io::EMIE_RMOUSE_PRESSED_DOWN);
  tolua_constant(tolua_S,"EMIE_MMOUSE_PRESSED_DOWN",io::EMIE_MMOUSE_PRESSED_DOWN);
  tolua_constant(tolua_S,"EMIE_LMOUSE_LEFT_UP",io::EMIE_LMOUSE_LEFT_UP);
  tolua_constant(tolua_S,"EMIE_RMOUSE_LEFT_UP",io::EMIE_RMOUSE_LEFT_UP);
  tolua_constant(tolua_S,"EMIE_MMOUSE_LEFT_UP",io::EMIE_MMOUSE_LEFT_UP);
  tolua_constant(tolua_S,"EMIE_MOUSE_MOVED",io::EMIE_MOUSE_MOVED);
  tolua_constant(tolua_S,"EMIE_MOUSE_WHEEL",io::EMIE_MOUSE_WHEEL);
  tolua_constant(tolua_S,"E_MOUSE_INPUT_EVENT_COUNT",io::E_MOUSE_INPUT_EVENT_COUNT);
  tolua_constant(tolua_S,"ECT_APPSTARTING",io::ECT_APPSTARTING);
  tolua_constant(tolua_S,"ECT_ARROW",io::ECT_ARROW);
  tolua_constant(tolua_S,"ECT_CROSS",io::ECT_CROSS);
  tolua_constant(tolua_S,"ECT_HAND",io::ECT_HAND);
  tolua_constant(tolua_S,"ECT_HELP",io::ECT_HELP);
  tolua_constant(tolua_S,"ECT_IBEAM",io::ECT_IBEAM);
  tolua_constant(tolua_S,"ECT_NO",io::ECT_NO);
  tolua_constant(tolua_S,"ECT_SIZEALL",io::ECT_SIZEALL);
  tolua_constant(tolua_S,"ECT_SIZENESW",io::ECT_SIZENESW);
  tolua_constant(tolua_S,"ECT_SIZENS",io::ECT_SIZENS);
  tolua_constant(tolua_S,"ECT_SIZENWSE",io::ECT_SIZENWSE);
  tolua_constant(tolua_S,"ECT_SIZEWE",io::ECT_SIZEWE);
  tolua_constant(tolua_S,"ECT_UPARROW",io::ECT_UPARROW);
  tolua_constant(tolua_S,"ECT_WAIT",io::ECT_WAIT);
  tolua_constant(tolua_S,"E_CURSOR_TYPE_COUNT",io::E_CURSOR_TYPE_COUNT);
  tolua_constant(tolua_S,"E_CURSOR_TYPE_FORCE_32_BIT",io::E_CURSOR_TYPE_FORCE_32_BIT);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"dev",0);
 tolua_beginmodule(tolua_S,"dev");
  tolua_constant(tolua_S,"EDCF_FULLSCREEN",dev::EDCF_FULLSCREEN);
  tolua_constant(tolua_S,"EDCF_ANTIALIASING",dev::EDCF_ANTIALIASING);
  tolua_constant(tolua_S,"EDCF_USE_FFP",dev::EDCF_USE_FFP);
  tolua_constant(tolua_S,"EDCF_USE_SHADERS",dev::EDCF_USE_SHADERS);
  tolua_constant(tolua_S,"EDCF_SHADERS_HIGH_QUALITY",dev::EDCF_SHADERS_HIGH_QUALITY);
  tolua_constant(tolua_S,"EDCF_CACHE_SHADERS",dev::EDCF_CACHE_SHADERS);
  tolua_constant(tolua_S,"EDCF_VERTICAL_SYNC",dev::EDCF_VERTICAL_SYNC);
  tolua_constant(tolua_S,"EDCF_SHADOWS",dev::EDCF_SHADOWS);
  tolua_constant(tolua_S,"EDCF_LIGHTING_MEDIUM_QUALITY",dev::EDCF_LIGHTING_MEDIUM_QUALITY);
  tolua_constant(tolua_S,"EDCF_LIGHTING_HIGH_QUALITY",dev::EDCF_LIGHTING_HIGH_QUALITY);
  tolua_constant(tolua_S,"EDCF_SOUND_ON",dev::EDCF_SOUND_ON);
  tolua_constant(tolua_S,"EDCF_HI_MAPS_DETAIL",dev::EDCF_HI_MAPS_DETAIL);
  tolua_constant(tolua_S,"EDCF_HI_ANIMATION_QUALITY",dev::EDCF_HI_ANIMATION_QUALITY);
  tolua_constant(tolua_S,"EDCF_DIRT_ON_LEVEL",dev::EDCF_DIRT_ON_LEVEL);
  tolua_constant(tolua_S,"EDCF_NO_SYSTEM_MENU",dev::EDCF_NO_SYSTEM_MENU);
  tolua_constant(tolua_S,"EDCF_NO_TITLE_BAR",dev::EDCF_NO_TITLE_BAR);
  tolua_constant(tolua_S,"EDCF_ALWAYS_ON_TOP",dev::EDCF_ALWAYS_ON_TOP);
  tolua_constant(tolua_S,"EDCF_SOFTWARE_RASTERIZER",dev::EDCF_SOFTWARE_RASTERIZER);
  tolua_constant(tolua_S,"EDCF_ROUNDED_FRAME_RECTANGLE",dev::EDCF_ROUNDED_FRAME_RECTANGLE);
  tolua_constant(tolua_S,"EDCF_DRAG_USING_TOP_AREA",dev::EDCF_DRAG_USING_TOP_AREA);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"res",0);
 tolua_beginmodule(tolua_S,"res");
  tolua_constant(tolua_S,"EMT_ROOT",res::EMT_ROOT);
  tolua_constant(tolua_S,"EMT_MESHES",res::EMT_MESHES);
  tolua_constant(tolua_S,"EMT_TEXTURES",res::EMT_TEXTURES);
  tolua_constant(tolua_S,"EMT_FONTS",res::EMT_FONTS);
  tolua_constant(tolua_S,"EMT_MATERIALS",res::EMT_MATERIALS);
  tolua_constant(tolua_S,"EMT_GPU_PROGRAMS",res::EMT_GPU_PROGRAMS);
  tolua_constant(tolua_S,"EMT_GAME_SCRIPTS",res::EMT_GAME_SCRIPTS);
  tolua_constant(tolua_S,"EMT_XML_SCRIPTS",res::EMT_XML_SCRIPTS);
  tolua_constant(tolua_S,"EMT_SOUND_TRACKS",res::EMT_SOUND_TRACKS);
  tolua_constant(tolua_S,"EMT_SOUND_EFFECTS",res::EMT_SOUND_EFFECTS);
  tolua_constant(tolua_S,"EMT_TEMP_DATA",res::EMT_TEMP_DATA);
  tolua_constant(tolua_S,"E_MEDIA_TYPE_COUNT",res::E_MEDIA_TYPE_COUNT);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_constant(tolua_S,"ESRF_RENDER_SHADOW_DEBUG_DATA",scn::ESRF_RENDER_SHADOW_DEBUG_DATA);
  tolua_constant(tolua_S,"ESRF_RENDER_LIGHTS",scn::ESRF_RENDER_LIGHTS);
  tolua_constant(tolua_S,"ESRF_RENDER_TERRAIN_NORMALS",scn::ESRF_RENDER_TERRAIN_NORMALS);
  tolua_constant(tolua_S,"ESRF_RENDER_COLLISION_POINTS",scn::ESRF_RENDER_COLLISION_POINTS);
  tolua_constant(tolua_S,"ESHT_SHADOW_FAKE",scn::ESHT_SHADOW_FAKE);
  tolua_constant(tolua_S,"ESHT_SHADOW_VOLUME",scn::ESHT_SHADOW_VOLUME);
  tolua_constant(tolua_S,"E_SHADOW_TYPE_COUNT",scn::E_SHADOW_TYPE_COUNT);
  tolua_constant(tolua_S,"ESNT_ANIMATED_MESH_SCENE_NODE",scn::ESNT_ANIMATED_MESH_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_BILLBOARD_SCENE_NODE",scn::ESNT_BILLBOARD_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_LIGHT_SCENE_NODE",scn::ESNT_LIGHT_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_KTREE_SCENE_NODE",scn::ESNT_KTREE_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_PARTICLE_SYSTEM_SCENE_NODE",scn::ESNT_PARTICLE_SYSTEM_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_SKY_BOX_SCENE_NODE",scn::ESNT_SKY_BOX_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_TEST_SCENE_NODE",scn::ESNT_TEST_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_TERRAIN_SCENE_NODE",scn::ESNT_TERRAIN_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_LENS_FLARE_SCENE_NODE",scn::ESNT_LENS_FLARE_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_TEXT_SCENE_NODE",scn::ESNT_TEXT_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_DUMMY_TANSFORMATION_SCENE_NODE",scn::ESNT_DUMMY_TANSFORMATION_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_UNKNOWN_SCENE_NODE",scn::ESNT_UNKNOWN_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_CAMERA_SCENE_NODE",scn::ESNT_CAMERA_SCENE_NODE);
  tolua_constant(tolua_S,"ESNT_PATH_FINDER_SCENE_NODE",scn::ESNT_PATH_FINDER_SCENE_NODE);
  tolua_constant(tolua_S,"E_SCENE_NODE_TYPE_COUNT",scn::E_SCENE_NODE_TYPE_COUNT);
  tolua_function(tolua_S,"getSceneNodeTypeName",tolua_MyLuaBind_scn_getSceneNodeTypeName00);
  tolua_function(tolua_S,"getSceneNodeTypeReadableName",tolua_MyLuaBind_scn_getSceneNodeTypeReadableName00);
  tolua_constant(tolua_S,"EAAT_NONE",scn::EAAT_NONE);
  tolua_constant(tolua_S,"EAAT_SHARP_CAM_TGT",scn::EAAT_SHARP_CAM_TGT);
  tolua_constant(tolua_S,"EAAT_SHARP_CAM_POS",scn::EAAT_SHARP_CAM_POS);
  tolua_constant(tolua_S,"EAAT_BLEND_CAM_TGT",scn::EAAT_BLEND_CAM_TGT);
  tolua_constant(tolua_S,"EAAT_BLEND_CAM_POS",scn::EAAT_BLEND_CAM_POS);
  tolua_constant(tolua_S,"EAAT_STRETCH_CAM_TGT",scn::EAAT_STRETCH_CAM_TGT);
  tolua_constant(tolua_S,"EAAT_STRETCH_CAM_POS",scn::EAAT_STRETCH_CAM_POS);
  tolua_constant(tolua_S,"EAAT_NORMAL_AXIS",scn::EAAT_NORMAL_AXIS);
  tolua_constant(tolua_S,"E_AXIS_ALIGMENT_TYPE_COUNT",scn::E_AXIS_ALIGMENT_TYPE_COUNT);
  tolua_constant(tolua_S,"ECPT_PERSPECTIVE",scn::ECPT_PERSPECTIVE);
  tolua_constant(tolua_S,"ECPT_ORTHOGONAL",scn::ECPT_ORTHOGONAL);
  tolua_constant(tolua_S,"E_CAMERA_PROJECTION_TYPE_COUNT",scn::E_CAMERA_PROJECTION_TYPE_COUNT);
  tolua_constant(tolua_S,"ECT_NO_CULL",scn::ECT_NO_CULL);
  tolua_constant(tolua_S,"ECT_SCREEN_BOUNDS_CULL",scn::ECT_SCREEN_BOUNDS_CULL);
  tolua_constant(tolua_S,"ECT_VIEW_FRUSTRUM_CULL",scn::ECT_VIEW_FRUSTRUM_CULL);
  tolua_constant(tolua_S,"ECT_OCCLUDERS_FRUSTRUM_CULL",scn::ECT_OCCLUDERS_FRUSTRUM_CULL);
  tolua_constant(tolua_S,"ECT_OCCLUDERS_BOTTOM_VOLUME_CULL",scn::ECT_OCCLUDERS_BOTTOM_VOLUME_CULL);
  tolua_constant(tolua_S,"ECT_HARDWARE_OCCLUSION_CULL",scn::ECT_HARDWARE_OCCLUSION_CULL);
  tolua_constant(tolua_S,"ECT_DYNAMIC_MANAGER_CULL",scn::ECT_DYNAMIC_MANAGER_CULL);
  tolua_constant(tolua_S,"EMT_UNKNOWN",scn::EMT_UNKNOWN);
  tolua_constant(tolua_S,"EMT_3DS",scn::EMT_3DS);
  tolua_constant(tolua_S,"EMT_BSP",scn::EMT_BSP);
  tolua_constant(tolua_S,"EMT_MD2",scn::EMT_MD2);
  tolua_constant(tolua_S,"EMT_CAL3D",scn::EMT_CAL3D);
  tolua_constant(tolua_S,"E_MESH_TYPE_COUNT",scn::E_MESH_TYPE_COUNT);
  tolua_constant(tolua_S,"ELL_LOD_NEAREST",scn::ELL_LOD_NEAREST);
  tolua_constant(tolua_S,"ELL_LOD_NEAR",scn::ELL_LOD_NEAR);
  tolua_constant(tolua_S,"ELL_LOD_FAR",scn::ELL_LOD_FAR);
  tolua_constant(tolua_S,"ELL_LOD_FARTHEST",scn::ELL_LOD_FARTHEST);
  tolua_constant(tolua_S,"E_LOD_LEVEL_COUNT",scn::E_LOD_LEVEL_COUNT);
  tolua_constant(tolua_S,"EPAT_FADEOUT",scn::EPAT_FADEOUT);
  tolua_constant(tolua_S,"EPAT_GRAVITY",scn::EPAT_GRAVITY);
  tolua_constant(tolua_S,"E_PARTICLE_AFFECTOR_TYPE_COUNT",scn::E_PARTICLE_AFFECTOR_TYPE_COUNT);
  tolua_function(tolua_S,"getParticleAffectorTypeName",tolua_MyLuaBind_scn_getParticleAffectorTypeName00);
  tolua_function(tolua_S,"getParticleAffectorTypeReadableName",tolua_MyLuaBind_scn_getParticleAffectorTypeReadableName00);
  tolua_constant(tolua_S,"EPET_POINT",scn::EPET_POINT);
  tolua_constant(tolua_S,"EPET_BOX",scn::EPET_BOX);
  tolua_constant(tolua_S,"E_PARTICLE_EMITTER_TYPE_COUNT",scn::E_PARTICLE_EMITTER_TYPE_COUNT);
  tolua_function(tolua_S,"getParticleEmitterTypeName",tolua_MyLuaBind_scn_getParticleEmitterTypeName00);
  tolua_function(tolua_S,"getParticleEmitterTypeReadableName",tolua_MyLuaBind_scn_getParticleEmitterTypeReadableName00);
  tolua_constant(tolua_S,"EPFT_ASTAR",scn::EPFT_ASTAR);
  tolua_constant(tolua_S,"E_PATH_FINDER_TYPE_COUNT",scn::E_PATH_FINDER_TYPE_COUNT);
  tolua_constant(tolua_S,"EBSPET_WORLDSPAWN",scn::EBSPET_WORLDSPAWN);
  tolua_constant(tolua_S,"EBSPET_INFO_PLAYER_START",scn::EBSPET_INFO_PLAYER_START);
  tolua_constant(tolua_S,"EBSPET_INFO_NULL",scn::EBSPET_INFO_NULL);
  tolua_constant(tolua_S,"EBSPET_FUNC_DOOR",scn::EBSPET_FUNC_DOOR);
  tolua_constant(tolua_S,"EBSPET_FUNC_BUTTON",scn::EBSPET_FUNC_BUTTON);
  tolua_constant(tolua_S,"EBSPET_FUNC_TRANSPARENT",scn::EBSPET_FUNC_TRANSPARENT);
  tolua_constant(tolua_S,"EBSPET_LIGHT",scn::EBSPET_LIGHT);
  tolua_constant(tolua_S,"EBSPET_UNKNOWN",scn::EBSPET_UNKNOWN);
  tolua_constant(tolua_S,"E_BSP_ENTITY_TYPE_COUNT",scn::E_BSP_ENTITY_TYPE_COUNT);
  tolua_constant(tolua_S,"EGPT_BOX",scn::EGPT_BOX);
  tolua_constant(tolua_S,"EGPT_SPHERE",scn::EGPT_SPHERE);
  tolua_constant(tolua_S,"EGPT_CYLINDER",scn::EGPT_CYLINDER);
  tolua_constant(tolua_S,"EGPT_CAPPED_CYLINDER",scn::EGPT_CAPPED_CYLINDER);
  tolua_constant(tolua_S,"E_GEOM_PRIMITIVE_TYPE_COUNT",scn::E_GEOM_PRIMITIVE_TYPE_COUNT);
  tolua_constant(tolua_S,"ETFRM_STENCIL",scn::ETFRM_STENCIL);
  tolua_constant(tolua_S,"ETFRM_MIP",scn::ETFRM_MIP);
  tolua_constant(tolua_S,"ETFRM_PCP",scn::ETFRM_PCP);
  tolua_constant(tolua_S,"E_TERRAIN_FOG_RENDERING_MODE_COUNT",scn::E_TERRAIN_FOG_RENDERING_MODE_COUNT);
  tolua_constant(tolua_S,"ESRM_INDOOR",scn::ESRM_INDOOR);
  tolua_constant(tolua_S,"ESRM_OUTDOOR",scn::ESRM_OUTDOOR);
  tolua_constant(tolua_S,"E_SCENE_RENDERING_MODE_COUNT",scn::E_SCENE_RENDERING_MODE_COUNT);
  tolua_constant(tolua_S,"ESNAT_FLY_CIRCLE_ANIMATOR",scn::ESNAT_FLY_CIRCLE_ANIMATOR);
  tolua_constant(tolua_S,"ESNAT_FLY_STRAIGHT_ANIMATOR",scn::ESNAT_FLY_STRAIGHT_ANIMATOR);
  tolua_constant(tolua_S,"ESNAT_FOLLOW_SPLINE_ANIMATOR",scn::ESNAT_FOLLOW_SPLINE_ANIMATOR);
  tolua_constant(tolua_S,"ESNAT_ROTATION_ANIMATOR",scn::ESNAT_ROTATION_ANIMATOR);
  tolua_constant(tolua_S,"ESNAT_TEXTURE_ANIMATOR",scn::ESNAT_TEXTURE_ANIMATOR);
  tolua_constant(tolua_S,"ESNAT_UNKNOWN_ANIMATOR",scn::ESNAT_UNKNOWN_ANIMATOR);
  tolua_constant(tolua_S,"E_SCENE_NODE_ANIMATOR_TYPE_COUNT",scn::E_SCENE_NODE_ANIMATOR_TYPE_COUNT);
  tolua_constant(tolua_S,"ETCS_WATER_GREENLANDS",scn::ETCS_WATER_GREENLANDS);
  tolua_constant(tolua_S,"ETCS_WOODLANDS_MOUNTAINS",scn::ETCS_WOODLANDS_MOUNTAINS);
  tolua_constant(tolua_S,"ETCS_DESERT",scn::ETCS_DESERT);
  tolua_constant(tolua_S,"ETCS_NONE",scn::ETCS_NONE);
  tolua_constant(tolua_S,"E_TERRAIN_COLOR_SCHEMA_COUNT",scn::E_TERRAIN_COLOR_SCHEMA_COUNT);
  tolua_constant(tolua_S,"ETPS_9",scn::ETPS_9);
  tolua_constant(tolua_S,"ETPS_17",scn::ETPS_17);
  tolua_constant(tolua_S,"ETPS_33",scn::ETPS_33);
  tolua_constant(tolua_S,"ETPS_65",scn::ETPS_65);
  tolua_constant(tolua_S,"ETPS_129",scn::ETPS_129);
  tolua_constant(tolua_S,"E_TERRAIN_PATCH_SIZE_COUNT",scn::E_TERRAIN_PATCH_SIZE_COUNT);
  tolua_function(tolua_S,"getSceneNodeCorePropertiesTagValue",tolua_MyLuaBind_scn_getSceneNodeCorePropertiesTagValue00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  tolua_constant(tolua_S,"EGNT_MAIN_PLAYER",game::EGNT_MAIN_PLAYER);
  tolua_constant(tolua_S,"EGNT_PERSON",game::EGNT_PERSON);
  tolua_constant(tolua_S,"EGNT_DECORATION",game::EGNT_DECORATION);
  tolua_constant(tolua_S,"EGNT_LEVEL_MAP",game::EGNT_LEVEL_MAP);
  tolua_constant(tolua_S,"EGNT_TERRAIN",game::EGNT_TERRAIN);
  tolua_constant(tolua_S,"EGNT_SKY_DOME",game::EGNT_SKY_DOME);
  tolua_constant(tolua_S,"EGNT_LIGHT",game::EGNT_LIGHT);
  tolua_constant(tolua_S,"EGNT_TRIGGER",game::EGNT_TRIGGER);
  tolua_constant(tolua_S,"EGNT_DOOR",game::EGNT_DOOR);
  tolua_constant(tolua_S,"EGNT_PLATFORM",game::EGNT_PLATFORM);
  tolua_constant(tolua_S,"EGNT_BUTTON",game::EGNT_BUTTON);
  tolua_constant(tolua_S,"EGNT_ITEM",game::EGNT_ITEM);
  tolua_constant(tolua_S,"EGNT_WEAPON",game::EGNT_WEAPON);
  tolua_constant(tolua_S,"EGNT_UNITS_FORMATION",game::EGNT_UNITS_FORMATION);
  tolua_constant(tolua_S,"EGNT_UNKNOWN",game::EGNT_UNKNOWN);
  tolua_constant(tolua_S,"E_GAME_NODE_TYPE_COUNT",game::E_GAME_NODE_TYPE_COUNT);
  tolua_function(tolua_S,"getGameNodeTypeName",tolua_MyLuaBind_game_getGameNodeTypeName00);
  tolua_function(tolua_S,"getGameNodeTypeReadableName",tolua_MyLuaBind_game_getGameNodeTypeReadableName00);
  tolua_constant(tolua_S,"EGTT_TRAP",game::EGTT_TRAP);
  tolua_constant(tolua_S,"EGTT_PUSH",game::EGTT_PUSH);
  tolua_constant(tolua_S,"E_GAME_TRIGGER_TYPE_COUNT",game::E_GAME_TRIGGER_TYPE_COUNT);
  tolua_constant(tolua_S,"EGAIET_ENEMY_VISUAL_CONTACT",game::EGAIET_ENEMY_VISUAL_CONTACT);
  tolua_constant(tolua_S,"EGAIET_ENEMY_SOUND_CONTACT",game::EGAIET_ENEMY_SOUND_CONTACT);
  tolua_constant(tolua_S,"EGAIET_ENEMY_PHYSIC_CONTACT",game::EGAIET_ENEMY_PHYSIC_CONTACT);
  tolua_constant(tolua_S,"EGAIET_FRIEND_VISUAL_CONTACT",game::EGAIET_FRIEND_VISUAL_CONTACT);
  tolua_constant(tolua_S,"EGAIET_FRIEND_SOUND_CONTACT",game::EGAIET_FRIEND_SOUND_CONTACT);
  tolua_constant(tolua_S,"EGAIET_FRIEND_PHYSIC_CONTACT",game::EGAIET_FRIEND_PHYSIC_CONTACT);
  tolua_constant(tolua_S,"E_GAME_AI_EVENT_TYPE_COUNT",game::E_GAME_AI_EVENT_TYPE_COUNT);
  tolua_constant(tolua_S,"EGET_SOUND",game::EGET_SOUND);
  tolua_constant(tolua_S,"EGET_PHYSIC",game::EGET_PHYSIC);
  tolua_constant(tolua_S,"E_GAME_EVENT_TYPE_COUNT",game::E_GAME_EVENT_TYPE_COUNT);
  tolua_constant(tolua_S,"EGTT_LOAD_SCENE",game::EGTT_LOAD_SCENE);
  tolua_constant(tolua_S,"EGTT_ACTIVATE",game::EGTT_ACTIVATE);
  tolua_constant(tolua_S,"EGTT_ATTACK",game::EGTT_ATTACK);
  tolua_constant(tolua_S,"EGTT_HITED",game::EGTT_HITED);
  tolua_constant(tolua_S,"EGTT_DIE",game::EGTT_DIE);
  tolua_constant(tolua_S,"EGTT_FIND_PATH_AND_MOVE",game::EGTT_FIND_PATH_AND_MOVE);
  tolua_constant(tolua_S,"EGTT_ORIENT",game::EGTT_ORIENT);
  tolua_constant(tolua_S,"E_GAME_TASK_TYPE_COUNT",game::E_GAME_TASK_TYPE_COUNT);
  tolua_constant(tolua_S,"EPS_RUNNING",game::EPS_RUNNING);
  tolua_constant(tolua_S,"EPS_STANDING",game::EPS_STANDING);
  tolua_constant(tolua_S,"EPS_JUMPING",game::EPS_JUMPING);
  tolua_constant(tolua_S,"EPLAYER_STATE_COUNT",game::EPLAYER_STATE_COUNT);
  tolua_constant(tolua_S,"EOAM_AUTOMATIC",game::EOAM_AUTOMATIC);
  tolua_constant(tolua_S,"EOAM_BY_BUTTON",game::EOAM_BY_BUTTON);
  tolua_constant(tolua_S,"EOAM_BY_KEY",game::EOAM_BY_KEY);
  tolua_constant(tolua_S,"E_OBJECT_ACTIVATE_MODE_COUNT",game::E_OBJECT_ACTIVATE_MODE_COUNT);
  tolua_constant(tolua_S,"EAIS_IDLE",game::EAIS_IDLE);
  tolua_constant(tolua_S,"EAIS_SEEKING",game::EAIS_SEEKING);
  tolua_constant(tolua_S,"EAIS_ATTACKING",game::EAIS_ATTACKING);
  tolua_constant(tolua_S,"EAIS_FINISHING_ATTACK",game::EAIS_FINISHING_ATTACK);
  tolua_constant(tolua_S,"EAIS_FINISHED_ATTACK",game::EAIS_FINISHED_ATTACK);
  tolua_constant(tolua_S,"EAIS_WAIT_A_TURN",game::EAIS_WAIT_A_TURN);
  tolua_constant(tolua_S,"EAIS_DYING",game::EAIS_DYING);
  tolua_constant(tolua_S,"EAIS_DEAD",game::EAIS_DEAD);
  tolua_constant(tolua_S,"E_AI_STATE_COUNT",game::E_AI_STATE_COUNT);
  tolua_constant(tolua_S,"EBS_UNPUSHED",game::EBS_UNPUSHED);
  tolua_constant(tolua_S,"EBS_PUSHING",game::EBS_PUSHING);
  tolua_constant(tolua_S,"EBS_WAITING",game::EBS_WAITING);
  tolua_constant(tolua_S,"EBS_UNPUSHING",game::EBS_UNPUSHING);
  tolua_constant(tolua_S,"E_BUTTON_STATE_COUNT",game::E_BUTTON_STATE_COUNT);
  tolua_constant(tolua_S,"EDS_CLOSED",game::EDS_CLOSED);
  tolua_constant(tolua_S,"EDS_OPENING",game::EDS_OPENING);
  tolua_constant(tolua_S,"EDS_WAITING",game::EDS_WAITING);
  tolua_constant(tolua_S,"EDS_CLOSING",game::EDS_CLOSING);
  tolua_constant(tolua_S,"E_DOOR_STATE_COUNT",game::E_DOOR_STATE_COUNT);
  tolua_constant(tolua_S,"EGIT_MEDPACK",game::EGIT_MEDPACK);
  tolua_constant(tolua_S,"EGIT_ARMOR",game::EGIT_ARMOR);
  tolua_constant(tolua_S,"EGIT_KEY",game::EGIT_KEY);
  tolua_constant(tolua_S,"EGIT_WEAPON",game::EGIT_WEAPON);
  tolua_constant(tolua_S,"EGIT_AMMO",game::EGIT_AMMO);
  tolua_constant(tolua_S,"E_GAME_ITEM_TYPE_COUNT",game::E_GAME_ITEM_TYPE_COUNT);
  tolua_constant(tolua_S,"EPS_WAITING_AT_START",game::EPS_WAITING_AT_START);
  tolua_constant(tolua_S,"EPS_MOVING_FORWARD",game::EPS_MOVING_FORWARD);
  tolua_constant(tolua_S,"EPS_MOVING_BACKWARD",game::EPS_MOVING_BACKWARD);
  tolua_constant(tolua_S,"EPS_WAITING_AT_END",game::EPS_WAITING_AT_END);
  tolua_constant(tolua_S,"E_PLATFORM_STATE_COUNT",game::E_PLATFORM_STATE_COUNT);
  tolua_constant(tolua_S,"EFS_BROKEN",game::EFS_BROKEN);
  tolua_constant(tolua_S,"EFS_FORMING",game::EFS_FORMING);
  tolua_constant(tolua_S,"EFS_FORMED",game::EFS_FORMED);
  tolua_constant(tolua_S,"E_FORMATION_STATES_COUNT",game::E_FORMATION_STATES_COUNT);
  tolua_constant(tolua_S,"EGA_MOVE_FORWARD",game::EGA_MOVE_FORWARD);
  tolua_constant(tolua_S,"EGA_MOVE_BACKWARD",game::EGA_MOVE_BACKWARD);
  tolua_constant(tolua_S,"EGA_MOVE_LEFT_STRAFE",game::EGA_MOVE_LEFT_STRAFE);
  tolua_constant(tolua_S,"EGA_MOVE_RIGHT_STRAFE",game::EGA_MOVE_RIGHT_STRAFE);
  tolua_constant(tolua_S,"EGA_VIEW_ZOOM_IN",game::EGA_VIEW_ZOOM_IN);
  tolua_constant(tolua_S,"EGA_VIEW_ZOOM_OUT",game::EGA_VIEW_ZOOM_OUT);
  tolua_constant(tolua_S,"EGA_ATTACK_PRIMARY",game::EGA_ATTACK_PRIMARY);
  tolua_constant(tolua_S,"EGA_SELECT_PREV_WEAPON",game::EGA_SELECT_PREV_WEAPON);
  tolua_constant(tolua_S,"EGA_SELECT_NEXT_WEAPON",game::EGA_SELECT_NEXT_WEAPON);
  tolua_constant(tolua_S,"EGA_SELECT_WEAPON_0",game::EGA_SELECT_WEAPON_0);
  tolua_constant(tolua_S,"EGA_SELECT_WEAPON_1",game::EGA_SELECT_WEAPON_1);
  tolua_constant(tolua_S,"EGA_SELECT_WEAPON_2",game::EGA_SELECT_WEAPON_2);
  tolua_constant(tolua_S,"EGA_ENTER_INVENTORY",game::EGA_ENTER_INVENTORY);
  tolua_constant(tolua_S,"E_GAME_ACTION_COUNT",game::E_GAME_ACTION_COUNT);
  tolua_constant(tolua_S,"EWS_FRIEND",game::EWS_FRIEND);
  tolua_constant(tolua_S,"EWS_ENEMY",game::EWS_ENEMY);
  tolua_constant(tolua_S,"EWS_NEUTRAL",game::EWS_NEUTRAL);
  tolua_function(tolua_S,"getGameNodeCorePropertiesTagValue",tolua_MyLuaBind_game_getGameNodeCorePropertiesTagValue00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"img",0);
 tolua_beginmodule(tolua_S,"img");
  tolua_constant(tolua_S,"ECF_NONE",img::ECF_NONE);
  tolua_constant(tolua_S,"ECF_A1R5G5B5",img::ECF_A1R5G5B5);
  tolua_constant(tolua_S,"ECF_R5G6B5",img::ECF_R5G6B5);
  tolua_constant(tolua_S,"ECF_R8G8B8",img::ECF_R8G8B8);
  tolua_constant(tolua_S,"ECF_A8R8G8B8",img::ECF_A8R8G8B8);
  tolua_constant(tolua_S,"ECF_A8B8G8R8",img::ECF_A8B8G8R8);
  tolua_constant(tolua_S,"ECF_DXT1",img::ECF_DXT1);
  tolua_constant(tolua_S,"ECF_DXT3",img::ECF_DXT3);
  tolua_constant(tolua_S,"ECF_DXT5",img::ECF_DXT5);
  tolua_constant(tolua_S,"ECF_LUMINANCE16",img::ECF_LUMINANCE16);
  tolua_constant(tolua_S,"ECF_DEPTH24_STENCIL8",img::ECF_DEPTH24_STENCIL8);
  tolua_constant(tolua_S,"ECF_LUMINANCE32F",img::ECF_LUMINANCE32F);
  tolua_constant(tolua_S,"E_COLOR_FORMAT_COUNT",img::E_COLOR_FORMAT_COUNT);
  tolua_function(tolua_S,"getColorFormatName",tolua_MyLuaBind_img_getColorFormatName00);
  tolua_function(tolua_S,"getBitsPerPixelFromFormat",tolua_MyLuaBind_img_getBitsPerPixelFromFormat00);
  tolua_constant(tolua_S,"EIO_ADD",img::EIO_ADD);
  tolua_constant(tolua_S,"EIO_MUL",img::EIO_MUL);
  tolua_constant(tolua_S,"EIO_SUB",img::EIO_SUB);
  tolua_constant(tolua_S,"E_IMAGE_OPERATION_COUNT",img::E_IMAGE_OPERATION_COUNT);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"vid",0);
 tolua_beginmodule(tolua_S,"vid");
  tolua_constant(tolua_S,"MY_MATERIAL_MAX_LAYERS",vid::MY_MATERIAL_MAX_LAYERS);
  tolua_constant(tolua_S,"MY_MAX_COLOR_ATTACHMENTS",vid::MY_MAX_COLOR_ATTACHMENTS);
  tolua_constant(tolua_S,"EDF_NULL",vid::EDF_NULL);
  tolua_constant(tolua_S,"EDF_DIRECTX",vid::EDF_DIRECTX);
  tolua_constant(tolua_S,"EDF_OPENGL",vid::EDF_OPENGL);
  tolua_constant(tolua_S,"EDT_NULL",vid::EDT_NULL);
  tolua_constant(tolua_S,"EDT_DIRECTX9",vid::EDT_DIRECTX9);
  tolua_constant(tolua_S,"EDT_OPENGL11",vid::EDT_OPENGL11);
  tolua_constant(tolua_S,"EDT_OPENGL21",vid::EDT_OPENGL21);
  tolua_constant(tolua_S,"EDT_OPENGL32",vid::EDT_OPENGL32);
  tolua_constant(tolua_S,"E_DRIVER_TYPE_COUNT",vid::E_DRIVER_TYPE_COUNT);
  tolua_function(tolua_S,"getDriverTypeName",tolua_MyLuaBind_vid_getDriverTypeName00);
  tolua_function(tolua_S,"getDriverTypeReadableName",tolua_MyLuaBind_vid_getDriverTypeReadableName00);
  tolua_constant(tolua_S,"ETCF_AUTOGEN_MIP_MAPS",vid::ETCF_AUTOGEN_MIP_MAPS);
  tolua_constant(tolua_S,"ETCF_CREATE_COLOR_KEY",vid::ETCF_CREATE_COLOR_KEY);
  tolua_constant(tolua_S,"ETCF_CREATE_NORMAL_MAP",vid::ETCF_CREATE_NORMAL_MAP);
  tolua_constant(tolua_S,"ETCF_CREATE_POWER_OF_TWO",vid::ETCF_CREATE_POWER_OF_TWO);
  tolua_constant(tolua_S,"ETCF_CREATE_DIVISIBLE_BY_FOUR",vid::ETCF_CREATE_DIVISIBLE_BY_FOUR);
  tolua_constant(tolua_S,"ETT_COLOR_MAP",vid::ETT_COLOR_MAP);
  tolua_constant(tolua_S,"ETT_ANIMATED",vid::ETT_ANIMATED);
  tolua_constant(tolua_S,"E_TEXTURE_TYPE_COUNT",vid::E_TEXTURE_TYPE_COUNT);
  tolua_constant(tolua_S,"ETLT_DIFFUSE_MAP",vid::ETLT_DIFFUSE_MAP);
  tolua_constant(tolua_S,"ETLT_ATTENUATION_MAP",vid::ETLT_ATTENUATION_MAP);
  tolua_constant(tolua_S,"ETLT_SPECULAR_MAP",vid::ETLT_SPECULAR_MAP);
  tolua_constant(tolua_S,"ETLT_LIGHT_MAP",vid::ETLT_LIGHT_MAP);
  tolua_constant(tolua_S,"ETLT_NORMAL_MAP",vid::ETLT_NORMAL_MAP);
  tolua_constant(tolua_S,"ETLT_SPLATTING_MAP",vid::ETLT_SPLATTING_MAP);
  tolua_constant(tolua_S,"E_TEXTURE_LAYER_TYPE_COUNT",vid::E_TEXTURE_LAYER_TYPE_COUNT);
  tolua_function(tolua_S,"getTextureLayerTypeName",tolua_MyLuaBind_vid_getTextureLayerTypeName00);
  tolua_function(tolua_S,"getTextureLayerTypeReadableName",tolua_MyLuaBind_vid_getTextureLayerTypeReadableName00);
  tolua_constant(tolua_S,"ETF_TEXTURE_1D",vid::ETF_TEXTURE_1D);
  tolua_constant(tolua_S,"ETF_TEXTURE_2D",vid::ETF_TEXTURE_2D);
  tolua_constant(tolua_S,"ETF_TEXTURE_3D",vid::ETF_TEXTURE_3D);
  tolua_constant(tolua_S,"ETF_CUBE_MAP",vid::ETF_CUBE_MAP);
  tolua_constant(tolua_S,"E_TEXTURE_FORMAT_COUNT",vid::E_TEXTURE_FORMAT_COUNT);
  tolua_constant(tolua_S,"EVT_SIMPLE",vid::EVT_SIMPLE);
  tolua_constant(tolua_S,"EVT_SIMPLE_COLOURED",vid::EVT_SIMPLE_COLOURED);
  tolua_constant(tolua_S,"EVT_1TCOORDS",vid::EVT_1TCOORDS);
  tolua_constant(tolua_S,"EVT_1TCOORDS_COLOURED",vid::EVT_1TCOORDS_COLOURED);
  tolua_constant(tolua_S,"EVT_2TCOORDS",vid::EVT_2TCOORDS);
  tolua_constant(tolua_S,"EVT_2TCOORDS_COLOURED",vid::EVT_2TCOORDS_COLOURED);
  tolua_constant(tolua_S,"EVT_1TCOORDS_TBN",vid::EVT_1TCOORDS_TBN);
  tolua_constant(tolua_S,"EVT_1TCOORDS_TBN_COLOURED",vid::EVT_1TCOORDS_TBN_COLOURED);
  tolua_constant(tolua_S,"EVT_2TCOORDS_TBN",vid::EVT_2TCOORDS_TBN);
  tolua_constant(tolua_S,"EVT_2TCOORDS_TBN_COLOURED",vid::EVT_2TCOORDS_TBN_COLOURED);
  tolua_constant(tolua_S,"EVT_1TCOORDS_RHW_COLOURED",vid::EVT_1TCOORDS_RHW_COLOURED);
  tolua_constant(tolua_S,"E_VERTEX_TYPE_COUNT",vid::E_VERTEX_TYPE_COUNT);
  tolua_function(tolua_S,"getVertexTypeName",tolua_MyLuaBind_vid_getVertexTypeName00);
  tolua_constant(tolua_S,"EVC_POS",vid::EVC_POS);
  tolua_constant(tolua_S,"EVC_COL",vid::EVC_COL);
  tolua_constant(tolua_S,"EVC_TC0",vid::EVC_TC0);
  tolua_constant(tolua_S,"EVC_TC1",vid::EVC_TC1);
  tolua_constant(tolua_S,"EVC_NRM",vid::EVC_NRM);
  tolua_constant(tolua_S,"EVC_TBN",vid::EVC_TBN);
  tolua_constant(tolua_S,"EVC_RHW",vid::EVC_RHW);
  tolua_constant(tolua_S,"EDPT_TRIANGLE_LIST",vid::EDPT_TRIANGLE_LIST);
  tolua_constant(tolua_S,"EDPT_TRIANGLE_STRIP",vid::EDPT_TRIANGLE_STRIP);
  tolua_constant(tolua_S,"EDPT_TRIANGLE_FAN",vid::EDPT_TRIANGLE_FAN);
  tolua_constant(tolua_S,"EDPT_POINT_LIST",vid::EDPT_POINT_LIST);
  tolua_constant(tolua_S,"EDPT_LINE_LIST",vid::EDPT_LINE_LIST);
  tolua_constant(tolua_S,"EDPT_LINE_STRIP",vid::EDPT_LINE_STRIP);
  tolua_constant(tolua_S,"E_DRAW_PRIMITIVE_TYPE_COUNT",vid::E_DRAW_PRIMITIVE_TYPE_COUNT);
  tolua_constant(tolua_S,"ETF_NONE",vid::ETF_NONE);
  tolua_constant(tolua_S,"ETF_BILINEAR",vid::ETF_BILINEAR);
  tolua_constant(tolua_S,"ETF_TRILINEAR",vid::ETF_TRILINEAR);
  tolua_constant(tolua_S,"ETF_ANISOTROPIC",vid::ETF_ANISOTROPIC);
  tolua_constant(tolua_S,"E_TEXTURE_FILTER_COUNT",vid::E_TEXTURE_FILTER_COUNT);
  tolua_constant(tolua_S,"EMRT_STANDARD_RENDERER",vid::EMRT_STANDARD_RENDERER);
  tolua_constant(tolua_S,"E_MATERIAL_RENDERER_TYPE_COUNT",vid::E_MATERIAL_RENDERER_TYPE_COUNT);
  tolua_constant(tolua_S,"EMF_GOURAUD_SHADING",vid::EMF_GOURAUD_SHADING);
  tolua_constant(tolua_S,"EMF_ZWRITE_ENABLE",vid::EMF_ZWRITE_ENABLE);
  tolua_constant(tolua_S,"EMF_BACK_FACE_CULLING",vid::EMF_BACK_FACE_CULLING);
  tolua_constant(tolua_S,"EMF_FRONT_FACE_CCW",vid::EMF_FRONT_FACE_CCW);
  tolua_constant(tolua_S,"EMF_FOG_ENABLE",vid::EMF_FOG_ENABLE);
  tolua_constant(tolua_S,"EMF_MIP_MAP_OFF",vid::EMF_MIP_MAP_OFF);
  tolua_constant(tolua_S,"EMF_BLENDING",vid::EMF_BLENDING);
  tolua_constant(tolua_S,"E_MATERIAL_FLAG_COUNT",vid::E_MATERIAL_FLAG_COUNT);
  tolua_function(tolua_S,"getMaterialFlagName",tolua_MyLuaBind_vid_getMaterialFlagName00);
  tolua_function(tolua_S,"getMaterialFlagReadableName",tolua_MyLuaBind_vid_getMaterialFlagReadableName00);
  tolua_constant(tolua_S,"ESBF_ONE",vid::ESBF_ONE);
  tolua_constant(tolua_S,"ESBF_ZERO",vid::ESBF_ZERO);
  tolua_constant(tolua_S,"ESBF_DST_COLOR",vid::ESBF_DST_COLOR);
  tolua_constant(tolua_S,"ESBF_ONE_MINUS_DST_COLOR",vid::ESBF_ONE_MINUS_DST_COLOR);
  tolua_constant(tolua_S,"ESBF_SRC_ALPHA",vid::ESBF_SRC_ALPHA);
  tolua_constant(tolua_S,"ESBF_ONE_MINUS_SRC_ALPHA",vid::ESBF_ONE_MINUS_SRC_ALPHA);
  tolua_constant(tolua_S,"ESBF_DST_ALPHA",vid::ESBF_DST_ALPHA);
  tolua_constant(tolua_S,"ESBF_ONE_MINUS_DST_ALPHA",vid::ESBF_ONE_MINUS_DST_ALPHA);
  tolua_constant(tolua_S,"ESBF_SRC_ALPHA_SATURATE",vid::ESBF_SRC_ALPHA_SATURATE);
  tolua_constant(tolua_S,"E_SRC_BLEND_FUNCTION_COUNT",vid::E_SRC_BLEND_FUNCTION_COUNT);
  tolua_function(tolua_S,"getSrcBlendFunctionName",tolua_MyLuaBind_vid_getSrcBlendFunctionName00);
  tolua_function(tolua_S,"getSrcBlendFunctionReadableName",tolua_MyLuaBind_vid_getSrcBlendFunctionReadableName00);
  tolua_constant(tolua_S,"EDBF_ONE",vid::EDBF_ONE);
  tolua_constant(tolua_S,"EDBF_ZERO",vid::EDBF_ZERO);
  tolua_constant(tolua_S,"EDBF_SRC_ALPHA",vid::EDBF_SRC_ALPHA);
  tolua_constant(tolua_S,"EDBF_ONE_MINUS_SRC_ALPHA",vid::EDBF_ONE_MINUS_SRC_ALPHA);
  tolua_constant(tolua_S,"EDBF_DST_ALPHA",vid::EDBF_DST_ALPHA);
  tolua_constant(tolua_S,"EDBF_ONE_MINUS_DST_ALPHA",vid::EDBF_ONE_MINUS_DST_ALPHA);
  tolua_constant(tolua_S,"EDBF_SRC_COLOR",vid::EDBF_SRC_COLOR);
  tolua_constant(tolua_S,"EDBF_ONE_MINUS_SRC_COLOR",vid::EDBF_ONE_MINUS_SRC_COLOR);
  tolua_constant(tolua_S,"E_DST_BLEND_FUNCTION_COUNT",vid::E_DST_BLEND_FUNCTION_COUNT);
  tolua_function(tolua_S,"getDstBlendFunctionName",tolua_MyLuaBind_vid_getDstBlendFunctionName00);
  tolua_function(tolua_S,"getDstBlendFunctionReadableName",tolua_MyLuaBind_vid_getDstBlendFunctionReadableName00);
  tolua_constant(tolua_S,"EBE_ADD",vid::EBE_ADD);
  tolua_constant(tolua_S,"EBE_REVERSE_SUBTRACT",vid::EBE_REVERSE_SUBTRACT);
  tolua_constant(tolua_S,"EBE_SUBTRACT",vid::EBE_SUBTRACT);
  tolua_constant(tolua_S,"EBE_MIN",vid::EBE_MIN);
  tolua_constant(tolua_S,"EBE_MAX",vid::EBE_MAX);
  tolua_constant(tolua_S,"E_BLEND_EQUATION_COUNT",vid::E_BLEND_EQUATION_COUNT);
  tolua_function(tolua_S,"getBlendEquationName",tolua_MyLuaBind_vid_getBlendEquationName00);
  tolua_function(tolua_S,"getBlendEquationReadableName",tolua_MyLuaBind_vid_getBlendEquationReadableName00);
  tolua_constant(tolua_S,"ETCGT_MANUAL_MAPPING",vid::ETCGT_MANUAL_MAPPING);
  tolua_constant(tolua_S,"ETCGT_ENVIRONMENT_MAPPING",vid::ETCGT_ENVIRONMENT_MAPPING);
  tolua_constant(tolua_S,"ETCGT_PROJECTED_MAPPING",vid::ETCGT_PROJECTED_MAPPING);
  tolua_constant(tolua_S,"E_TEXCOORD_GEN_TYPE_COUNT",vid::E_TEXCOORD_GEN_TYPE_COUNT);
  tolua_function(tolua_S,"getTexCoordGenTypeName",tolua_MyLuaBind_vid_getTexCoordGenTypeName00);
  tolua_function(tolua_S,"getTexCoordGenTypeReadableName",tolua_MyLuaBind_vid_getTexCoordGenTypeReadableName00);
  tolua_constant(tolua_S,"ETCMT_TRANSFORM",vid::ETCMT_TRANSFORM);
  tolua_constant(tolua_S,"ETCMT_TURBULENT",vid::ETCMT_TURBULENT);
  tolua_constant(tolua_S,"ETCMT_SCROLL",vid::ETCMT_SCROLL);
  tolua_constant(tolua_S,"ETCMT_SCALE",vid::ETCMT_SCALE);
  tolua_constant(tolua_S,"ETCMT_ROTATE",vid::ETCMT_ROTATE);
  tolua_constant(tolua_S,"E_TEXCOORD_MOD_TYPE_COUNT",vid::E_TEXCOORD_MOD_TYPE_COUNT);
  tolua_function(tolua_S,"getTexCoordModTypeName",tolua_MyLuaBind_vid_getTexCoordModTypeName00);
  tolua_function(tolua_S,"getTexCoordModTypeReadableName",tolua_MyLuaBind_vid_getTexCoordModTypeReadableName00);
  tolua_constant(tolua_S,"ECGT_VERTEX",vid::ECGT_VERTEX);
  tolua_constant(tolua_S,"ECGT_FUNCTION",vid::ECGT_FUNCTION);
  tolua_constant(tolua_S,"ECGT_CUSTOM",vid::ECGT_CUSTOM);
  tolua_constant(tolua_S,"E_COLOR_GEN_TYPE_COUNT",vid::E_COLOR_GEN_TYPE_COUNT);
  tolua_function(tolua_S,"getColorGenTypeName",tolua_MyLuaBind_vid_getColorGenTypeName00);
  tolua_function(tolua_S,"getColorGenTypeReadableName",tolua_MyLuaBind_vid_getColorGenTypeReadableName00);
  tolua_constant(tolua_S,"EAGT_VERTEX",vid::EAGT_VERTEX);
  tolua_constant(tolua_S,"EAGT_FUNCTION",vid::EAGT_FUNCTION);
  tolua_constant(tolua_S,"EAGT_CUSTOM",vid::EAGT_CUSTOM);
  tolua_constant(tolua_S,"E_ALPHA_GEN_TYPE_COUNT",vid::E_ALPHA_GEN_TYPE_COUNT);
  tolua_function(tolua_S,"getAlphaGenTypeName",tolua_MyLuaBind_vid_getAlphaGenTypeName00);
  tolua_function(tolua_S,"getAlphaGenTypeReadableName",tolua_MyLuaBind_vid_getAlphaGenTypeReadableName00);
  tolua_constant(tolua_S,"ETCAM_WRAP",vid::ETCAM_WRAP);
  tolua_constant(tolua_S,"ETCAM_MIRROR",vid::ETCAM_MIRROR);
  tolua_constant(tolua_S,"ETCAM_CLAMP",vid::ETCAM_CLAMP);
  tolua_constant(tolua_S,"ETCAM_BORDER",vid::ETCAM_BORDER);
  tolua_constant(tolua_S,"E_TEXCOORD_ADDRESS_MODE_COUNT",vid::E_TEXCOORD_ADDRESS_MODE_COUNT);
  tolua_function(tolua_S,"getTexCoordAddrModeName",tolua_MyLuaBind_vid_getTexCoordAddrModeName00);
  tolua_function(tolua_S,"getTexCoordAddrModeReadableName",tolua_MyLuaBind_vid_getTexCoordAddrModeReadableName00);
  tolua_constant(tolua_S,"ELT_POINT",vid::ELT_POINT);
  tolua_constant(tolua_S,"ELT_DIRECTIONAL",vid::ELT_DIRECTIONAL);
  tolua_constant(tolua_S,"E_LIGHT_TYPE_COUNT",vid::E_LIGHT_TYPE_COUNT);
  tolua_function(tolua_S,"getLightTypeName",tolua_MyLuaBind_vid_getLightTypeName00);
  tolua_function(tolua_S,"getLightTypeReadableName",tolua_MyLuaBind_vid_getLightTypeReadableName00);
  tolua_constant(tolua_S,"EVDF_MULITEXTURE",vid::EVDF_MULITEXTURE);
  tolua_constant(tolua_S,"EVDF_RENDER_TO_TARGET",vid::EVDF_RENDER_TO_TARGET);
  tolua_constant(tolua_S,"EVDF_BILINEAR_FILTER",vid::EVDF_BILINEAR_FILTER);
  tolua_constant(tolua_S,"EVDF_TRILINEAR_FILTER",vid::EVDF_TRILINEAR_FILTER);
  tolua_constant(tolua_S,"EVDF_ANISOTROPIC_FILTER",vid::EVDF_ANISOTROPIC_FILTER);
  tolua_constant(tolua_S,"EVDF_MIP_MAP",vid::EVDF_MIP_MAP);
  tolua_constant(tolua_S,"EVDF_STENCIL_BUFFER",vid::EVDF_STENCIL_BUFFER);
  tolua_constant(tolua_S,"EVDF_SHADER_LANGUAGE",vid::EVDF_SHADER_LANGUAGE);
  tolua_constant(tolua_S,"EVDF_OCCLUSION_QUERY",vid::EVDF_OCCLUSION_QUERY);
  tolua_constant(tolua_S,"EVDF_COMPRESSED_TEXTURES",vid::EVDF_COMPRESSED_TEXTURES);
  tolua_constant(tolua_S,"EVDF_DEPTH_STENCIL_TEXTURES",vid::EVDF_DEPTH_STENCIL_TEXTURES);
  tolua_constant(tolua_S,"EVDF_NON_POWER_OF_TWO_TEXTURES",vid::EVDF_NON_POWER_OF_TWO_TEXTURES);
  tolua_constant(tolua_S,"EVDF_MULTIPLE_RENDER_TARGETS",vid::EVDF_MULTIPLE_RENDER_TARGETS);
  tolua_constant(tolua_S,"E_VIDEO_DRIVER_FEATURE_COUNT",vid::E_VIDEO_DRIVER_FEATURE_COUNT);
  tolua_constant(tolua_S,"ETS_VIEW",vid::ETS_VIEW);
  tolua_constant(tolua_S,"ETS_MODEL",vid::ETS_MODEL);
  tolua_constant(tolua_S,"ETS_PROJ",vid::ETS_PROJ);
  tolua_constant(tolua_S,"E_TRANSFORMATION_STATE_COUNT",vid::E_TRANSFORMATION_STATE_COUNT);
  tolua_constant(tolua_S,"EFT_LINEAR",vid::EFT_LINEAR);
  tolua_constant(tolua_S,"EFT_EXP",vid::EFT_EXP);
  tolua_constant(tolua_S,"EFT_EXP2",vid::EFT_EXP2);
  tolua_constant(tolua_S,"E_FOG_TYPE_COUNT",vid::E_FOG_TYPE_COUNT);
  tolua_function(tolua_S,"getFogTypeName",tolua_MyLuaBind_vid_getFogTypeName00);
  tolua_function(tolua_S,"getFogTypeReadableName",tolua_MyLuaBind_vid_getFogTypeReadableName00);
  tolua_constant(tolua_S,"EUT_NONE",vid::EUT_NONE);
  tolua_constant(tolua_S,"EUT_MODEL_VIEW_PROJ_MATRIX",vid::EUT_MODEL_VIEW_PROJ_MATRIX);
  tolua_constant(tolua_S,"EUT_MODEL_VIEW_MATRIX",vid::EUT_MODEL_VIEW_MATRIX);
  tolua_constant(tolua_S,"EUT_MODEL_MATRIX",vid::EUT_MODEL_MATRIX);
  tolua_constant(tolua_S,"EUT_NORMAL_MATRIX",vid::EUT_NORMAL_MATRIX);
  tolua_constant(tolua_S,"EUT_GLOBAL_AMBIENT_COLOR",vid::EUT_GLOBAL_AMBIENT_COLOR);
  tolua_constant(tolua_S,"EUT_MATERIAL_COLORS",vid::EUT_MATERIAL_COLORS);
  tolua_constant(tolua_S,"EUT_MATERIAL_SHININESS",vid::EUT_MATERIAL_SHININESS);
  tolua_constant(tolua_S,"EUT_LIGHTING",vid::EUT_LIGHTING);
  tolua_constant(tolua_S,"EUT_EYE_POS",vid::EUT_EYE_POS);
  tolua_constant(tolua_S,"EUT_TEXTURE0",vid::EUT_TEXTURE0);
  tolua_constant(tolua_S,"EUT_TEXTURE1",vid::EUT_TEXTURE1);
  tolua_constant(tolua_S,"EUT_TEXTURE2",vid::EUT_TEXTURE2);
  tolua_constant(tolua_S,"EUT_TEXTURE3",vid::EUT_TEXTURE3);
  tolua_constant(tolua_S,"EUT_TEXTURE_MATRIX0",vid::EUT_TEXTURE_MATRIX0);
  tolua_constant(tolua_S,"EUT_TEXTURE_MATRIX1",vid::EUT_TEXTURE_MATRIX1);
  tolua_constant(tolua_S,"EUT_TEXTURE_MATRIX2",vid::EUT_TEXTURE_MATRIX2);
  tolua_constant(tolua_S,"EUT_TEXTURE_MATRIX3",vid::EUT_TEXTURE_MATRIX3);
  tolua_constant(tolua_S,"EUT_FOG_PARAMS",vid::EUT_FOG_PARAMS);
  tolua_constant(tolua_S,"EUT_FOG_COLOR",vid::EUT_FOG_COLOR);
  tolua_constant(tolua_S,"E_UNIFORM_TYPE_COUNT",vid::E_UNIFORM_TYPE_COUNT);
  tolua_constant(tolua_S,"EUF_NONE",vid::EUF_NONE);
  tolua_constant(tolua_S,"EUF_MODEL_VIEW_PROJ_MATRIX",vid::EUF_MODEL_VIEW_PROJ_MATRIX);
  tolua_constant(tolua_S,"EUF_MODEL_VIEW_MATRIX",vid::EUF_MODEL_VIEW_MATRIX);
  tolua_constant(tolua_S,"EUF_MODEL_MATRIX",vid::EUF_MODEL_MATRIX);
  tolua_constant(tolua_S,"EUF_NORMAL_MATRIX",vid::EUF_NORMAL_MATRIX);
  tolua_constant(tolua_S,"EUF_GLOBAL_AMBIENT_COLOR",vid::EUF_GLOBAL_AMBIENT_COLOR);
  tolua_constant(tolua_S,"EUF_MATERIAL_COLORS",vid::EUF_MATERIAL_COLORS);
  tolua_constant(tolua_S,"EUF_MATERIAL_SHININESS",vid::EUF_MATERIAL_SHININESS);
  tolua_constant(tolua_S,"EUF_LIGHTING",vid::EUF_LIGHTING);
  tolua_constant(tolua_S,"EUF_EYE_POS",vid::EUF_EYE_POS);
  tolua_constant(tolua_S,"EUF_TEXTURE0",vid::EUF_TEXTURE0);
  tolua_constant(tolua_S,"EUF_TEXTURE1",vid::EUF_TEXTURE1);
  tolua_constant(tolua_S,"EUF_TEXTURE2",vid::EUF_TEXTURE2);
  tolua_constant(tolua_S,"EUF_TEXTURE3",vid::EUF_TEXTURE3);
  tolua_constant(tolua_S,"EUF_TEXTURE_MATRIX0",vid::EUF_TEXTURE_MATRIX0);
  tolua_constant(tolua_S,"EUF_TEXTURE_MATRIX1",vid::EUF_TEXTURE_MATRIX1);
  tolua_constant(tolua_S,"EUF_TEXTURE_MATRIX2",vid::EUF_TEXTURE_MATRIX2);
  tolua_constant(tolua_S,"EUF_TEXTURE_MATRIX3",vid::EUF_TEXTURE_MATRIX3);
  tolua_constant(tolua_S,"EUF_FOG_PARAMS",vid::EUF_FOG_PARAMS);
  tolua_constant(tolua_S,"EUF_FOG_COLOR",vid::EUF_FOG_COLOR);
  tolua_constant(tolua_S,"E_UNIFORM_FLAG_FORCE_32_BIT",vid::E_UNIFORM_FLAG_FORCE_32_BIT);
  tolua_function(tolua_S,"getUniformFlag",tolua_MyLuaBind_vid_getUniformFlag00);
  tolua_function(tolua_S,"getUniformName",tolua_MyLuaBind_vid_getUniformName00);
  tolua_function(tolua_S,"getUniformReadableName",tolua_MyLuaBind_vid_getUniformReadableName00);
  tolua_constant(tolua_S,"EPFM_SOLID",vid::EPFM_SOLID);
  tolua_constant(tolua_S,"EPFM_WIREFRAME",vid::EPFM_WIREFRAME);
  tolua_constant(tolua_S,"EPFM_POINT",vid::EPFM_POINT);
  tolua_constant(tolua_S,"E_POLYGON_FILL_MODE_COUNT",vid::E_POLYGON_FILL_MODE_COUNT);
  tolua_function(tolua_S,"getPolygonFillModeName",tolua_MyLuaBind_vid_getPolygonFillModeName00);
  tolua_function(tolua_S,"getPolygonFillModeReadableName",tolua_MyLuaBind_vid_getPolygonFillModeReadableName00);
  tolua_constant(tolua_S,"ECT_NEVER",vid::ECT_NEVER);
  tolua_constant(tolua_S,"ECT_ALWAYS",vid::ECT_ALWAYS);
  tolua_constant(tolua_S,"ECT_LESS",vid::ECT_LESS);
  tolua_constant(tolua_S,"ECT_LEQUAL",vid::ECT_LEQUAL);
  tolua_constant(tolua_S,"ECT_EQUAL",vid::ECT_EQUAL);
  tolua_constant(tolua_S,"ECT_NOTEQUAL",vid::ECT_NOTEQUAL);
  tolua_constant(tolua_S,"ECT_GEQUAL",vid::ECT_GEQUAL);
  tolua_constant(tolua_S,"ECT_GREATER",vid::ECT_GREATER);
  tolua_constant(tolua_S,"E_COMPARE_TEST_COUNT",vid::E_COMPARE_TEST_COUNT);
  tolua_function(tolua_S,"getCompareTestName",tolua_MyLuaBind_vid_getCompareTestName00);
  tolua_function(tolua_S,"getCompareTestReadableName",tolua_MyLuaBind_vid_getCompareTestReadableName00);
  tolua_constant(tolua_S,"ERP_3D_SKY_PASS",vid::ERP_3D_SKY_PASS);
  tolua_constant(tolua_S,"ERP_3D_SOLID_PASS",vid::ERP_3D_SOLID_PASS);
  tolua_constant(tolua_S,"ERP_3D_LIGHTING_PASS",vid::ERP_3D_LIGHTING_PASS);
  tolua_constant(tolua_S,"ERP_3D_TRANSP_1ST_PASS",vid::ERP_3D_TRANSP_1ST_PASS);
  tolua_constant(tolua_S,"ERP_3D_TRANSP_2ND_PASS",vid::ERP_3D_TRANSP_2ND_PASS);
  tolua_constant(tolua_S,"ERP_3D_TRANSP_3RD_PASS",vid::ERP_3D_TRANSP_3RD_PASS);
  tolua_constant(tolua_S,"ERP_2D_PASS",vid::ERP_2D_PASS);
  tolua_constant(tolua_S,"ERP_GUI_3D_SOLID_PASS",vid::ERP_GUI_3D_SOLID_PASS);
  tolua_constant(tolua_S,"ERP_GUI_3D_TRANSP_PASS",vid::ERP_GUI_3D_TRANSP_PASS);
  tolua_constant(tolua_S,"ERP_GUI_2D_PASS",vid::ERP_GUI_2D_PASS);
  tolua_constant(tolua_S,"E_RENDER_PASS_COUNT",vid::E_RENDER_PASS_COUNT);
  tolua_function(tolua_S,"getRenderPassName",tolua_MyLuaBind_vid_getRenderPassName00);
  tolua_function(tolua_S,"getRenderPassReadableName",tolua_MyLuaBind_vid_getRenderPassReadableName00);
  tolua_constant(tolua_S,"ELM_NONE",vid::ELM_NONE);
  tolua_constant(tolua_S,"ELM_8_LIGHTS",vid::ELM_8_LIGHTS);
  tolua_constant(tolua_S,"E_LIGHTING_MODE_COUNT",vid::E_LIGHTING_MODE_COUNT);
  tolua_constant(tolua_S,"EDT_LIGHT_SPHERE",vid::EDT_LIGHT_SPHERE);
  tolua_constant(tolua_S,"EDT_LIGHT_GRADIENT",vid::EDT_LIGHT_GRADIENT);
  tolua_constant(tolua_S,"EDT_LIGHT_SPHERE_WHITE",vid::EDT_LIGHT_SPHERE_WHITE);
  tolua_constant(tolua_S,"EDT_LIGHT_WHITE_GRADIENT",vid::EDT_LIGHT_WHITE_GRADIENT);
  tolua_constant(tolua_S,"EDT_WHITE_WITH_BORDER",vid::EDT_WHITE_WITH_BORDER);
  tolua_constant(tolua_S,"EDT_ENVIRONMENT_MAP",vid::EDT_ENVIRONMENT_MAP);
  tolua_constant(tolua_S,"EDT_DEFAULT_TEXTURE",vid::EDT_DEFAULT_TEXTURE);
  tolua_constant(tolua_S,"E_DEFAULT_TEXTURE_COUNT",vid::E_DEFAULT_TEXTURE_COUNT);
  tolua_function(tolua_S,"getDefaultTextureName",tolua_MyLuaBind_vid_getDefaultTextureName00);
  tolua_function(tolua_S,"getDefaultTextureReadableName",tolua_MyLuaBind_vid_getDefaultTextureReadableName00);
  tolua_constant(tolua_S,"EVSV_HLSL_1_1",vid::EVSV_HLSL_1_1);
  tolua_constant(tolua_S,"EVSV_HLSL_2_0",vid::EVSV_HLSL_2_0);
  tolua_constant(tolua_S,"EVSV_HLSL_2_a",vid::EVSV_HLSL_2_a);
  tolua_constant(tolua_S,"EVSV_HLSL_3_0",vid::EVSV_HLSL_3_0);
  tolua_constant(tolua_S,"EVSV_HLSL_4_0",vid::EVSV_HLSL_4_0);
  tolua_constant(tolua_S,"EVSV_HLSL_4_1",vid::EVSV_HLSL_4_1);
  tolua_constant(tolua_S,"EVSV_HLSL_5_0",vid::EVSV_HLSL_5_0);
  tolua_constant(tolua_S,"EVSV_GLSL_1_0",vid::EVSV_GLSL_1_0);
  tolua_constant(tolua_S,"EVSV_GLSL_1_1",vid::EVSV_GLSL_1_1);
  tolua_constant(tolua_S,"EVSV_GLSL_1_2",vid::EVSV_GLSL_1_2);
  tolua_constant(tolua_S,"EVSV_GLSL_1_3",vid::EVSV_GLSL_1_3);
  tolua_constant(tolua_S,"EVSV_GLSL_1_4",vid::EVSV_GLSL_1_4);
  tolua_constant(tolua_S,"EVSV_GLSL_1_5",vid::EVSV_GLSL_1_5);
  tolua_constant(tolua_S,"EVSV_GLSL_3_3",vid::EVSV_GLSL_3_3);
  tolua_constant(tolua_S,"EVSV_GLSL_4_0",vid::EVSV_GLSL_4_0);
  tolua_constant(tolua_S,"EVSV_GLSL_4_1",vid::EVSV_GLSL_4_1);
  tolua_constant(tolua_S,"E_VERTEX_SHADER_VERSION_COUNT",vid::E_VERTEX_SHADER_VERSION_COUNT);
  tolua_function(tolua_S,"getVertexShaderVersionName",tolua_MyLuaBind_vid_getVertexShaderVersionName00);
  tolua_function(tolua_S,"getVertexShaderVersionReadableName",tolua_MyLuaBind_vid_getVertexShaderVersionReadableName00);
  tolua_constant(tolua_S,"EAT_ALWAYS",vid::EAT_ALWAYS);
  tolua_constant(tolua_S,"EAT_GT_0",vid::EAT_GT_0);
  tolua_constant(tolua_S,"EAT_LT_80",vid::EAT_LT_80);
  tolua_constant(tolua_S,"EAT_GE_80",vid::EAT_GE_80);
  tolua_constant(tolua_S,"E_ALPHA_TEST_COUNT",vid::E_ALPHA_TEST_COUNT);
  tolua_function(tolua_S,"getAlphaTestName",tolua_MyLuaBind_vid_getAlphaTestName00);
  tolua_function(tolua_S,"getAlphaTestReadableName",tolua_MyLuaBind_vid_getAlphaTestReadableName00);
  tolua_constant(tolua_S,"EPSV_HLSL_1_1",vid::EPSV_HLSL_1_1);
  tolua_constant(tolua_S,"EPSV_HLSL_1_2",vid::EPSV_HLSL_1_2);
  tolua_constant(tolua_S,"EPSV_HLSL_1_3",vid::EPSV_HLSL_1_3);
  tolua_constant(tolua_S,"EPSV_HLSL_1_4",vid::EPSV_HLSL_1_4);
  tolua_constant(tolua_S,"EPSV_HLSL_2_0",vid::EPSV_HLSL_2_0);
  tolua_constant(tolua_S,"EPSV_HLSL_2_a",vid::EPSV_HLSL_2_a);
  tolua_constant(tolua_S,"EPSV_HLSL_2_b",vid::EPSV_HLSL_2_b);
  tolua_constant(tolua_S,"EPSV_HLSL_3_0",vid::EPSV_HLSL_3_0);
  tolua_constant(tolua_S,"EPSV_HLSL_4_0",vid::EPSV_HLSL_4_0);
  tolua_constant(tolua_S,"EPSV_HLSL_4_1",vid::EPSV_HLSL_4_1);
  tolua_constant(tolua_S,"EPSV_HLSL_5_0",vid::EPSV_HLSL_5_0);
  tolua_constant(tolua_S,"EPSV_GLSL_1_0",vid::EPSV_GLSL_1_0);
  tolua_constant(tolua_S,"EPSV_GLSL_1_1",vid::EPSV_GLSL_1_1);
  tolua_constant(tolua_S,"EPSV_GLSL_1_2",vid::EPSV_GLSL_1_2);
  tolua_constant(tolua_S,"EPSV_GLSL_1_3",vid::EPSV_GLSL_1_3);
  tolua_constant(tolua_S,"EPSV_GLSL_1_4",vid::EPSV_GLSL_1_4);
  tolua_constant(tolua_S,"EPSV_GLSL_1_5",vid::EPSV_GLSL_1_5);
  tolua_constant(tolua_S,"EPSV_GLSL_3_3",vid::EPSV_GLSL_3_3);
  tolua_constant(tolua_S,"EPSV_GLSL_4_0",vid::EPSV_GLSL_4_0);
  tolua_constant(tolua_S,"EPSV_GLSL_4_1",vid::EPSV_GLSL_4_1);
  tolua_constant(tolua_S,"E_PIXEL_SHADER_VERSION_COUNT",vid::E_PIXEL_SHADER_VERSION_COUNT);
  tolua_function(tolua_S,"getPixelShaderVersionName",tolua_MyLuaBind_vid_getPixelShaderVersionName00);
  tolua_function(tolua_S,"getPixelShaderVersionReadableName",tolua_MyLuaBind_vid_getPixelShaderVersionReadableName00);
  tolua_function(tolua_S,"getVertexSize",tolua_MyLuaBind_vid_getVertexSize00);
  tolua_function(tolua_S,"getVertexComponents",tolua_MyLuaBind_vid_getVertexComponents00);
  tolua_function(tolua_S,"getVertexTypeFromComponents",tolua_MyLuaBind_vid_getVertexTypeFromComponents00);
  tolua_function(tolua_S,"getIndexSize",tolua_MyLuaBind_vid_getIndexSize00);
  tolua_constant(tolua_S,"ERBT_DYNAMIC",vid::ERBT_DYNAMIC);
  tolua_constant(tolua_S,"ERBT_STATIC",vid::ERBT_STATIC);
  tolua_constant(tolua_S,"E_RENDER_BUFFER_TYPE_COUNT",vid::E_RENDER_BUFFER_TYPE_COUNT);
  tolua_constant(tolua_S,"ECM_RED",vid::ECM_RED);
  tolua_constant(tolua_S,"ECM_GREEN",vid::ECM_GREEN);
  tolua_constant(tolua_S,"ECM_BLUE",vid::ECM_BLUE);
  tolua_constant(tolua_S,"ECM_ALPHA",vid::ECM_ALPHA);
  tolua_constant(tolua_S,"ERP_FORWARD_RENDERING",vid::ERP_FORWARD_RENDERING);
  tolua_constant(tolua_S,"ERP_DEFERRED_SHADING",vid::ERP_DEFERRED_SHADING);
  tolua_constant(tolua_S,"E_RENDER_PATH_COUNT",vid::E_RENDER_PATH_COUNT);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"os",0);
 tolua_beginmodule(tolua_S,"os");
  tolua_constant(tolua_S,"EOV_MICROSOFT_WINDOWS_NT",os::EOV_MICROSOFT_WINDOWS_NT);
  tolua_constant(tolua_S,"EOV_MICROSOFT_WINDOWS_2K",os::EOV_MICROSOFT_WINDOWS_2K);
  tolua_constant(tolua_S,"EOV_MICROSOFT_WINDOWS_XP",os::EOV_MICROSOFT_WINDOWS_XP);
  tolua_constant(tolua_S,"EOV_MICROSOFT_WINDOWS_VISTA",os::EOV_MICROSOFT_WINDOWS_VISTA);
  tolua_constant(tolua_S,"EOV_MICROSOFT_WINDOWS_7",os::EOV_MICROSOFT_WINDOWS_7);
  tolua_constant(tolua_S,"EOV_MICROSOFT_WINDOWS_95",os::EOV_MICROSOFT_WINDOWS_95);
  tolua_constant(tolua_S,"EOV_MICROSOFT_WINDOWS_98",os::EOV_MICROSOFT_WINDOWS_98);
  tolua_constant(tolua_S,"EOV_MICROSOFT_WINDOWS_ME",os::EOV_MICROSOFT_WINDOWS_ME);
  tolua_constant(tolua_S,"EOV_MICROSOFT_WIN32S",os::EOV_MICROSOFT_WIN32S);
  tolua_constant(tolua_S,"EOV_MICROSOFT_WINDOWS_UNKNOWN",os::EOV_MICROSOFT_WINDOWS_UNKNOWN);
  tolua_constant(tolua_S,"EOV_UNKNOWN_OS",os::EOV_UNKNOWN_OS);
  tolua_constant(tolua_S,"E_OS_VERSION_COUNT",os::E_OS_VERSION_COUNT);
  tolua_constant(tolua_S,"ETRDS_STOPPED",os::ETRDS_STOPPED);
  tolua_constant(tolua_S,"ETRDS_STOPPING",os::ETRDS_STOPPING);
  tolua_constant(tolua_S,"ETRDS_RUNNING",os::ETRDS_RUNNING);
  tolua_constant(tolua_S,"E_THREAD_STATUS_COUNT",os::E_THREAD_STATUS_COUNT);
  tolua_constant(tolua_S,"ETRDP_HIGH",os::ETRDP_HIGH);
  tolua_constant(tolua_S,"ETRDP_NORMAL",os::ETRDP_NORMAL);
  tolua_constant(tolua_S,"ETRDP_LOW",os::ETRDP_LOW);
  tolua_constant(tolua_S,"E_THREAD_PRIORITY_COUNT",os::E_THREAD_PRIORITY_COUNT);
  tolua_constant(tolua_S,"ETRT_TIMER",os::ETRT_TIMER);
  tolua_constant(tolua_S,"ETRT_COMPUTATION",os::ETRT_COMPUTATION);
  tolua_constant(tolua_S,"E_THREAD_TYPE_COUNT",os::E_THREAD_TYPE_COUNT);
  tolua_constant(tolua_S,"ETSF_STANDARD",os::ETSF_STANDARD);
  tolua_constant(tolua_S,"ETSF_YYYY_MM_DD_HH_MM_SS",os::ETSF_YYYY_MM_DD_HH_MM_SS);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scr",0);
 tolua_beginmodule(tolua_S,"scr");
  tolua_constant(tolua_S,"ESCT_ON_IO_EVENT",scr::ESCT_ON_IO_EVENT);
  tolua_constant(tolua_S,"ESCT_ON_BEFORE_LOAD_SCENE",scr::ESCT_ON_BEFORE_LOAD_SCENE);
  tolua_constant(tolua_S,"ESCT_ON_AFTER_LOAD_SCENE",scr::ESCT_ON_AFTER_LOAD_SCENE);
  tolua_constant(tolua_S,"ESCT_ON_BEFORE_SAVE_SCENE",scr::ESCT_ON_BEFORE_SAVE_SCENE);
  tolua_constant(tolua_S,"ESCT_ON_AFTER_SAVE_SCENE",scr::ESCT_ON_AFTER_SAVE_SCENE);
  tolua_constant(tolua_S,"ESCT_ON_DELETE_GAME_NODE",scr::ESCT_ON_DELETE_GAME_NODE);
  tolua_constant(tolua_S,"ESCT_ON_CREATE_GAME_NODE",scr::ESCT_ON_CREATE_GAME_NODE);
  tolua_constant(tolua_S,"ESCT_ON_DIE_GAME_NODE",scr::ESCT_ON_DIE_GAME_NODE);
  tolua_constant(tolua_S,"ESCT_ON_COLLECT_GAME_ITEM",scr::ESCT_ON_COLLECT_GAME_ITEM);
  tolua_constant(tolua_S,"ESCT_ON_THROW_GAME_ITEM",scr::ESCT_ON_THROW_GAME_ITEM);
  tolua_constant(tolua_S,"ESCT_ON_USE_GAME_ITEM",scr::ESCT_ON_USE_GAME_ITEM);
  tolua_constant(tolua_S,"ESCT_ON_GAME_STARTED",scr::ESCT_ON_GAME_STARTED);
  tolua_constant(tolua_S,"ESCT_ON_GAME_STOPPED",scr::ESCT_ON_GAME_STOPPED);
  tolua_constant(tolua_S,"ESCT_ON_ANIMATION_BEGIN",scr::ESCT_ON_ANIMATION_BEGIN);
  tolua_constant(tolua_S,"ESCT_ON_ANIMATION_END",scr::ESCT_ON_ANIMATION_END);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_DELETE_SCENE_NODE",scr::ESCT_SCENE_EDITOR_ON_DELETE_SCENE_NODE);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_CREATE_SCENE_NODE",scr::ESCT_SCENE_EDITOR_ON_CREATE_SCENE_NODE);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_SELECT_SCENE_NODE",scr::ESCT_SCENE_EDITOR_ON_SELECT_SCENE_NODE);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_DESELECT_SCENE_NODE",scr::ESCT_SCENE_EDITOR_ON_DESELECT_SCENE_NODE);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_BEFORE_LOAD_SCENE",scr::ESCT_SCENE_EDITOR_ON_BEFORE_LOAD_SCENE);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_AFTER_LOAD_SCENE",scr::ESCT_SCENE_EDITOR_ON_AFTER_LOAD_SCENE);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_BEFORE_SAVE_SCENE",scr::ESCT_SCENE_EDITOR_ON_BEFORE_SAVE_SCENE);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_AFTER_SAVE_SCENE",scr::ESCT_SCENE_EDITOR_ON_AFTER_SAVE_SCENE);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_GAME_STARTED",scr::ESCT_SCENE_EDITOR_ON_GAME_STARTED);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_GAME_STOPPED",scr::ESCT_SCENE_EDITOR_ON_GAME_STOPPED);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_ANIMATION_BEGIN",scr::ESCT_SCENE_EDITOR_ON_ANIMATION_BEGIN);
  tolua_constant(tolua_S,"ESCT_SCENE_EDITOR_ON_ANIMATION_END",scr::ESCT_SCENE_EDITOR_ON_ANIMATION_END);
  tolua_constant(tolua_S,"ESCT_SHOW_MESSAGE",scr::ESCT_SHOW_MESSAGE);
  tolua_constant(tolua_S,"ESCT_GEN_GPU_PROGRAM",scr::ESCT_GEN_GPU_PROGRAM);
  tolua_constant(tolua_S,"ESCT_GET_GEN_GPU_PROGRAM_MAX_LIGHTS",scr::ESCT_GET_GEN_GPU_PROGRAM_MAX_LIGHTS);
  tolua_constant(tolua_S,"ESCT_GET_GEN_GPU_PROGRAM_TAG",scr::ESCT_GET_GEN_GPU_PROGRAM_TAG);
  tolua_constant(tolua_S,"ESCT_SCRIPT_CALLBACK_TYPE_COUNT",scr::ESCT_SCRIPT_CALLBACK_TYPE_COUNT);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"mm",0);
 tolua_beginmodule(tolua_S,"mm");
  tolua_constant(tolua_S,"ESDT_NULL",mm::ESDT_NULL);
  tolua_constant(tolua_S,"ESDT_OPENAL",mm::ESDT_OPENAL);
  tolua_constant(tolua_S,"E_SOUND_DRIVER_TYPE_COUNT",mm::E_SOUND_DRIVER_TYPE_COUNT);
  tolua_constant(tolua_S,"ESDT_WAV",mm::ESDT_WAV);
  tolua_constant(tolua_S,"ESDT_OGG",mm::ESDT_OGG);
  tolua_constant(tolua_S,"E_SOUND_DATA_TYPE_COUNT",mm::E_SOUND_DATA_TYPE_COUNT);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"dyn",0);
 tolua_beginmodule(tolua_S,"dyn");
  tolua_constant(tolua_S,"EDOT_NONE",dyn::EDOT_NONE);
  tolua_constant(tolua_S,"EDOT_MONOLITH",dyn::EDOT_MONOLITH);
  tolua_constant(tolua_S,"EDOT_DYNAMIC",dyn::EDOT_DYNAMIC);
  tolua_constant(tolua_S,"EDOT_PSEUDO_DYNAMIC",dyn::EDOT_PSEUDO_DYNAMIC);
  tolua_constant(tolua_S,"EDOT_SENSELESS",dyn::EDOT_SENSELESS);
  tolua_constant(tolua_S,"E_DYNAMIC_OBJECT_TYPE_COUNT",dyn::E_DYNAMIC_OBJECT_TYPE_COUNT);
  tolua_constant(tolua_S,"E_DYNAMIC_OBJECT_TYPE_FORCE_32BIT",dyn::E_DYNAMIC_OBJECT_TYPE_FORCE_32BIT);
  tolua_function(tolua_S,"getDynamicObjectTypeName",tolua_MyLuaBind_dyn_getDynamicObjectTypeName00);
  tolua_function(tolua_S,"getDynamicObjectTypeReadableName",tolua_MyLuaBind_dyn_getDynamicObjectTypeReadableName00);
  tolua_constant(tolua_S,"EDCF_NONE_COLLID",dyn::EDCF_NONE_COLLID);
  tolua_constant(tolua_S,"EDCF_MONOLITH_COLLID",dyn::EDCF_MONOLITH_COLLID);
  tolua_constant(tolua_S,"EDCF_DYNAMIC_COLLID",dyn::EDCF_DYNAMIC_COLLID);
  tolua_constant(tolua_S,"EDCF_PSEUDO_DYNAMIC_COLLID",dyn::EDCF_PSEUDO_DYNAMIC_COLLID);
  tolua_constant(tolua_S,"EDCF_SENSELESS_COLLID",dyn::EDCF_SENSELESS_COLLID);
  tolua_constant(tolua_S,"E_DYN_COLLID_FILTER_COUNT",dyn::E_DYN_COLLID_FILTER_COUNT);
  tolua_constant(tolua_S,"E_DYN_COLLID_FILTER_FORCE_32BIT",dyn::E_DYN_COLLID_FILTER_FORCE_32BIT);
  tolua_constant(tolua_S,"EDOGF_BOX",dyn::EDOGF_BOX);
  tolua_constant(tolua_S,"EDOGF_SPHERE",dyn::EDOGF_SPHERE);
  tolua_constant(tolua_S,"EDOGF_XCCYLINDER",dyn::EDOGF_XCCYLINDER);
  tolua_constant(tolua_S,"EDOGF_YCCYLINDER",dyn::EDOGF_YCCYLINDER);
  tolua_constant(tolua_S,"EDOGF_ZCCYLINDER",dyn::EDOGF_ZCCYLINDER);
  tolua_constant(tolua_S,"EDOGF_MESH",dyn::EDOGF_MESH);
  tolua_constant(tolua_S,"EDOGF_HEIGHTMAP",dyn::EDOGF_HEIGHTMAP);
  tolua_constant(tolua_S,"E_DYN_OBJ_GEOM_FORM_COUNT",dyn::E_DYN_OBJ_GEOM_FORM_COUNT);
  tolua_constant(tolua_S,"E_DYN_OBJ_GEOM_FORM_FORCE_32BIT",dyn::E_DYN_OBJ_GEOM_FORM_FORCE_32BIT);
  tolua_function(tolua_S,"getGeomFormName",tolua_MyLuaBind_dyn_getGeomFormName00);
  tolua_function(tolua_S,"getGeomFormReadableName",tolua_MyLuaBind_dyn_getGeomFormReadableName00);
  tolua_constant(tolua_S,"EDOS_UNKNOWN",dyn::EDOS_UNKNOWN);
  tolua_constant(tolua_S,"EDOS_WALKING",dyn::EDOS_WALKING);
  tolua_constant(tolua_S,"EDOS_START_FALLING",dyn::EDOS_START_FALLING);
  tolua_constant(tolua_S,"EDOS_FALLING",dyn::EDOS_FALLING);
  tolua_constant(tolua_S,"EDOS_STOP_FALLING",dyn::EDOS_STOP_FALLING);
  tolua_constant(tolua_S,"E_DYN_OBJ_STATE_COUNT",dyn::E_DYN_OBJ_STATE_COUNT);
  tolua_constant(tolua_S,"E_DYN_OBJ_STATE_FORCE_32BIT",dyn::E_DYN_OBJ_STATE_FORCE_32BIT);
  tolua_constant(tolua_S,"EDTC_NO_TRANSF",dyn::EDTC_NO_TRANSF);
  tolua_constant(tolua_S,"EDTC_ROTX",dyn::EDTC_ROTX);
  tolua_constant(tolua_S,"EDTC_ROTY",dyn::EDTC_ROTY);
  tolua_constant(tolua_S,"EDTC_ROTZ",dyn::EDTC_ROTZ);
  tolua_constant(tolua_S,"EDTC_ROTXYZ",dyn::EDTC_ROTXYZ);
  tolua_constant(tolua_S,"EDTC_MOVX",dyn::EDTC_MOVX);
  tolua_constant(tolua_S,"EDTC_MOVY",dyn::EDTC_MOVY);
  tolua_constant(tolua_S,"EDTC_MOVZ",dyn::EDTC_MOVZ);
  tolua_constant(tolua_S,"EDTC_MOVXYZ",dyn::EDTC_MOVXYZ);
  tolua_constant(tolua_S,"EDTC_ALL_TRANSF",dyn::EDTC_ALL_TRANSF);
  tolua_constant(tolua_S,"E_DYN_TRANSF_CONSTRAINT_FORCE_32BIT",dyn::E_DYN_TRANSF_CONSTRAINT_FORCE_32BIT);
  tolua_function(tolua_S,"getDynamicObjectCorePropertiesTagValue",tolua_MyLuaBind_dyn_getDynamicObjectCorePropertiesTagValue00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  tolua_constant(tolua_S,"EFT_SIN",core::EFT_SIN);
  tolua_constant(tolua_S,"EFT_SQUARE",core::EFT_SQUARE);
  tolua_constant(tolua_S,"EFT_TRIANGLE",core::EFT_TRIANGLE);
  tolua_constant(tolua_S,"EFT_SAWTOOTH",core::EFT_SAWTOOTH);
  tolua_constant(tolua_S,"EFT_INVERSE_SAWTOOTH",core::EFT_INVERSE_SAWTOOTH);
  tolua_constant(tolua_S,"EFT_NOISE",core::EFT_NOISE);
  tolua_constant(tolua_S,"E_FUNC_TYPE_COUNT",core::E_FUNC_TYPE_COUNT);
  tolua_function(tolua_S,"getFuncTypeName",tolua_MyLuaBind_core_getFuncTypeName00);
  tolua_function(tolua_S,"getFuncTypeReadableName",tolua_MyLuaBind_core_getFuncTypeReadableName00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"aabbox3df","core::aabbox3df","",tolua_collect_core__aabbox3df);
  #else
  tolua_cclass(tolua_S,"aabbox3df","core::aabbox3df","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"aabbox3df");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_aabbox3df_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_aabbox3df_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_aabbox3df_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_aabbox3df_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_aabbox3df_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_aabbox3df_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_aabbox3df_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_aabbox3df_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_aabbox3df_new02_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_aabbox3df_new03);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_aabbox3df_new03_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_aabbox3df_new03_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_aabbox3df_new04);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_aabbox3df_new04_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_aabbox3df_new04_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_aabbox3df_delete00);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_core_aabbox3df__eq00);
   tolua_function(tolua_S,"addInternalPoint",tolua_MyLuaBind_core_aabbox3df_addInternalPoint00);
   tolua_function(tolua_S,"addInternalBox",tolua_MyLuaBind_core_aabbox3df_addInternalBox00);
   tolua_function(tolua_S,"reset",tolua_MyLuaBind_core_aabbox3df_reset00);
   tolua_function(tolua_S,"reset",tolua_MyLuaBind_core_aabbox3df_reset01);
   tolua_function(tolua_S,"reset",tolua_MyLuaBind_core_aabbox3df_reset02);
   tolua_function(tolua_S,"getCenter",tolua_MyLuaBind_core_aabbox3df_getCenter00);
   tolua_function(tolua_S,"getExtend",tolua_MyLuaBind_core_aabbox3df_getExtend00);
   tolua_function(tolua_S,"isEmpty",tolua_MyLuaBind_core_aabbox3df_isEmpty00);
   tolua_function(tolua_S,"repair",tolua_MyLuaBind_core_aabbox3df_repair00);
   tolua_function(tolua_S,"isValide",tolua_MyLuaBind_core_aabbox3df_isValide00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_aabbox3df_set00);
   tolua_variable(tolua_S,"MinEdge",tolua_get_core__aabbox3df_MinEdge,tolua_set_core__aabbox3df_MinEdge);
   tolua_variable(tolua_S,"MaxEdge",tolua_get_core__aabbox3df_MaxEdge,tolua_set_core__aabbox3df_MaxEdge);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"dimension2di","core::dimension2di","",tolua_collect_core__dimension2di);
  #else
  tolua_cclass(tolua_S,"dimension2di","core::dimension2di","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"dimension2di");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_dimension2di_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_dimension2di_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_dimension2di_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_dimension2di_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_dimension2di_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_dimension2di_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_dimension2di_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_dimension2di_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_dimension2di_new02_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_dimension2di_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_dimension2di_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_dimension2di_set01);
   tolua_variable(tolua_S,"Width",tolua_get_core__dimension2di_Width,tolua_set_core__dimension2di_Width);
   tolua_variable(tolua_S,"Height",tolua_get_core__dimension2di_Height,tolua_set_core__dimension2di_Height);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"dimension2df","core::dimension2df","",tolua_collect_core__dimension2df);
  #else
  tolua_cclass(tolua_S,"dimension2df","core::dimension2df","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"dimension2df");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_dimension2df_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_dimension2df_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_dimension2df_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_dimension2df_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_dimension2df_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_dimension2df_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_dimension2df_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_dimension2df_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_dimension2df_new02_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_dimension2df_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_dimension2df_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_dimension2df_set01);
   tolua_variable(tolua_S,"Width",tolua_get_core__dimension2df_Width,tolua_set_core__dimension2df_Width);
   tolua_variable(tolua_S,"Height",tolua_get_core__dimension2df_Height,tolua_set_core__dimension2df_Height);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"line3df","core::line3df","",tolua_collect_core__line3df);
  #else
  tolua_cclass(tolua_S,"line3df","core::line3df","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"line3df");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_line3df_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_line3df_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_line3df_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_line3df_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_line3df_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_line3df_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_line3df_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_line3df_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_line3df_new02_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_line3df_new03);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_line3df_new03_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_line3df_new03_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_line3df_delete00);
   tolua_function(tolua_S,".add",tolua_MyLuaBind_core_line3df__add00);
   tolua_function(tolua_S,".sub",tolua_MyLuaBind_core_line3df__sub00);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_core_line3df__eq00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_line3df_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_line3df_set01);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_line3df_set02);
   tolua_function(tolua_S,"getLength",tolua_MyLuaBind_core_line3df_getLength00);
   tolua_function(tolua_S,"getLengthSQ",tolua_MyLuaBind_core_line3df_getLengthSQ00);
   tolua_function(tolua_S,"getMiddle",tolua_MyLuaBind_core_line3df_getMiddle00);
   tolua_function(tolua_S,"getVector",tolua_MyLuaBind_core_line3df_getVector00);
   tolua_function(tolua_S,"isPointBetweenStartAndEnd",tolua_MyLuaBind_core_line3df_isPointBetweenStartAndEnd00);
   tolua_function(tolua_S,"getClosestPoint",tolua_MyLuaBind_core_line3df_getClosestPoint00);
   tolua_function(tolua_S,"getIntersectionWithSphere",tolua_MyLuaBind_core_line3df_getIntersectionWithSphere00);
   tolua_function(tolua_S,"intersectsWithSphere",tolua_MyLuaBind_core_line3df_intersectsWithSphere00);
   tolua_variable(tolua_S,"start",tolua_get_core__line3df_start,tolua_set_core__line3df_start);
   tolua_variable(tolua_S,"end",tolua_get_core__line3df_end,tolua_set_core__line3df_end);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"matrix4","core::matrix4","",tolua_collect_core__matrix4);
  #else
  tolua_cclass(tolua_S,"matrix4","core::matrix4","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"matrix4");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_matrix4_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_matrix4_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_matrix4_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_matrix4_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_matrix4_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_matrix4_new01_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_matrix4_delete00);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_core_matrix4__eq00);
   tolua_function(tolua_S,".mul",tolua_MyLuaBind_core_matrix4__mul00);
   tolua_function(tolua_S,".mul",tolua_MyLuaBind_core_matrix4__mul01);
   tolua_function(tolua_S,".seti",tolua_MyLuaBind_core_matrix4__seti00);
   tolua_function(tolua_S,".geti",tolua_MyLuaBind_core_matrix4__geti00);
   tolua_function(tolua_S,".geti",tolua_MyLuaBind_core_matrix4__geti01);
   tolua_function(tolua_S,"makeIdentity",tolua_MyLuaBind_core_matrix4_makeIdentity00);
   tolua_function(tolua_S,"isIdentity",tolua_MyLuaBind_core_matrix4_isIdentity00);
   tolua_function(tolua_S,"setTranslation",tolua_MyLuaBind_core_matrix4_setTranslation00);
   tolua_function(tolua_S,"getTranslation",tolua_MyLuaBind_core_matrix4_getTranslation00);
   tolua_function(tolua_S,"setRotationRadians",tolua_MyLuaBind_core_matrix4_setRotationRadians00);
   tolua_function(tolua_S,"setRotationDegrees",tolua_MyLuaBind_core_matrix4_setRotationDegrees00);
   tolua_function(tolua_S,"getRotationDegrees",tolua_MyLuaBind_core_matrix4_getRotationDegrees00);
   tolua_function(tolua_S,"setInverseRotationRadians",tolua_MyLuaBind_core_matrix4_setInverseRotationRadians00);
   tolua_function(tolua_S,"setInverseRotationDegrees",tolua_MyLuaBind_core_matrix4_setInverseRotationDegrees00);
   tolua_function(tolua_S,"setScale",tolua_MyLuaBind_core_matrix4_setScale00);
   tolua_function(tolua_S,"inverseTranslateVect",tolua_MyLuaBind_core_matrix4_inverseTranslateVect00);
   tolua_function(tolua_S,"inverseRotateVect",tolua_MyLuaBind_core_matrix4_inverseRotateVect00);
   tolua_function(tolua_S,"rotateVect",tolua_MyLuaBind_core_matrix4_rotateVect00);
   tolua_function(tolua_S,"transformVect",tolua_MyLuaBind_core_matrix4_transformVect00);
   tolua_function(tolua_S,"transformVect",tolua_MyLuaBind_core_matrix4_transformVect01);
   tolua_function(tolua_S,"translateVect",tolua_MyLuaBind_core_matrix4_translateVect00);
   tolua_function(tolua_S,"transformPlane",tolua_MyLuaBind_core_matrix4_transformPlane00);
   tolua_function(tolua_S,"transformPlane",tolua_MyLuaBind_core_matrix4_transformPlane01);
   tolua_function(tolua_S,"transformBox",tolua_MyLuaBind_core_matrix4_transformBox00);
   tolua_function(tolua_S,"multiplyWith1x4Matrix",tolua_MyLuaBind_core_matrix4_multiplyWith1x4Matrix00);
   tolua_function(tolua_S,"makeInversed",tolua_MyLuaBind_core_matrix4_makeInversed00);
   tolua_function(tolua_S,"getInversed",tolua_MyLuaBind_core_matrix4_getInversed00);
   tolua_function(tolua_S,"getInversed",tolua_MyLuaBind_core_matrix4_getInversed01);
   tolua_function(tolua_S,"getZNear",tolua_MyLuaBind_core_matrix4_getZNear00);
   tolua_function(tolua_S,"getZFar",tolua_MyLuaBind_core_matrix4_getZFar00);
   tolua_function(tolua_S,"buildProjectionMatrixPerspectiveRH",tolua_MyLuaBind_core_matrix4_buildProjectionMatrixPerspectiveRH00);
   tolua_function(tolua_S,"buildProjectionMatrixPerspectiveLH",tolua_MyLuaBind_core_matrix4_buildProjectionMatrixPerspectiveLH00);
   tolua_function(tolua_S,"buildProjectionMatrixOrthoLH",tolua_MyLuaBind_core_matrix4_buildProjectionMatrixOrthoLH00);
   tolua_function(tolua_S,"buildProjectionMatrixOrthoRH",tolua_MyLuaBind_core_matrix4_buildProjectionMatrixOrthoRH00);
   tolua_function(tolua_S,"buildViewMatrixLH",tolua_MyLuaBind_core_matrix4_buildViewMatrixLH00);
   tolua_function(tolua_S,"buildViewMatrixRH",tolua_MyLuaBind_core_matrix4_buildViewMatrixRH00);
   tolua_function(tolua_S,"buildShadowMatrix",tolua_MyLuaBind_core_matrix4_buildShadowMatrix00);
   tolua_function(tolua_S,"interpolate",tolua_MyLuaBind_core_matrix4_interpolate00);
   tolua_function(tolua_S,"buildReflectionMatrix",tolua_MyLuaBind_core_matrix4_buildReflectionMatrix00);
   tolua_function(tolua_S,"buildRotationDegreesMatrix",tolua_MyLuaBind_core_matrix4_buildRotationDegreesMatrix00);
   tolua_function(tolua_S,"buildRotationRadiansMatrix",tolua_MyLuaBind_core_matrix4_buildRotationRadiansMatrix00);
   tolua_function(tolua_S,"toD3DTextureMatrix",tolua_MyLuaBind_core_matrix4_toD3DTextureMatrix00);
   tolua_function(tolua_S,"toOGLTextureMatrix",tolua_MyLuaBind_core_matrix4_toOGLTextureMatrix00);
   tolua_function(tolua_S,"pointer",tolua_MyLuaBind_core_matrix4_pointer00);
   tolua_function(tolua_S,"pointer",tolua_MyLuaBind_core_matrix4_pointer01);
   tolua_function(tolua_S,"determinant",tolua_MyLuaBind_core_matrix4_determinant00);
   tolua_function(tolua_S,"getTransposed",tolua_MyLuaBind_core_matrix4_getTransposed00);
   tolua_function(tolua_S,"getTransposed",tolua_MyLuaBind_core_matrix4_getTransposed01);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  tolua_constant(tolua_S,"EIREL3D_FRONT",core::EIREL3D_FRONT);
  tolua_constant(tolua_S,"EIREL3D_BEHIND",core::EIREL3D_BEHIND);
  tolua_constant(tolua_S,"EIREL3D_PLANAR",core::EIREL3D_PLANAR);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"plane3df","core::plane3df","",tolua_collect_core__plane3df);
  #else
  tolua_cclass(tolua_S,"plane3df","core::plane3df","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"plane3df");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_plane3df_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_plane3df_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_plane3df_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_plane3df_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_plane3df_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_plane3df_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_plane3df_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_plane3df_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_plane3df_new02_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_plane3df_new03);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_plane3df_new03_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_plane3df_new03_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_plane3df_new04);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_plane3df_new04_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_plane3df_new04_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_plane3df_delete00);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_core_plane3df__eq00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_plane3df_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_plane3df_set01);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_plane3df_set02);
   tolua_function(tolua_S,"getIntersectionWithLine",tolua_MyLuaBind_core_plane3df_getIntersectionWithLine00);
   tolua_function(tolua_S,"getIntersectionWithLine",tolua_MyLuaBind_core_plane3df_getIntersectionWithLine01);
   tolua_function(tolua_S,"getIntersectionWithLimitedLine",tolua_MyLuaBind_core_plane3df_getIntersectionWithLimitedLine00);
   tolua_function(tolua_S,"getIntersectionWithLimitedLine",tolua_MyLuaBind_core_plane3df_getIntersectionWithLimitedLine01);
   tolua_function(tolua_S,"getProjection",tolua_MyLuaBind_core_plane3df_getProjection00);
   tolua_function(tolua_S,"classifyPointRelation",tolua_MyLuaBind_core_plane3df_classifyPointRelation00);
   tolua_function(tolua_S,"classifySphereRelation",tolua_MyLuaBind_core_plane3df_classifySphereRelation00);
   tolua_function(tolua_S,"recalculateD",tolua_MyLuaBind_core_plane3df_recalculateD00);
   tolua_function(tolua_S,"getMemberPoint",tolua_MyLuaBind_core_plane3df_getMemberPoint00);
   tolua_function(tolua_S,"existsInterSection",tolua_MyLuaBind_core_plane3df_existsInterSection00);
   tolua_function(tolua_S,"getIntersectionWithPlane",tolua_MyLuaBind_core_plane3df_getIntersectionWithPlane00);
   tolua_function(tolua_S,"getIntersectionWithPlanes",tolua_MyLuaBind_core_plane3df_getIntersectionWithPlanes00);
   tolua_function(tolua_S,"isFrontFacing",tolua_MyLuaBind_core_plane3df_isFrontFacing00);
   tolua_function(tolua_S,"getDistanceTo",tolua_MyLuaBind_core_plane3df_getDistanceTo00);
   tolua_variable(tolua_S,"D",tolua_get_core__plane3df_D,tolua_set_core__plane3df_D);
   tolua_variable(tolua_S,"Normal",tolua_get_core__plane3df_Normal,tolua_set_core__plane3df_Normal);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"position2di","core::position2di","",tolua_collect_core__position2di);
  #else
  tolua_cclass(tolua_S,"position2di","core::position2di","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"position2di");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_position2di_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_position2di_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_position2di_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_position2di_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_position2di_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_position2di_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_position2di_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_position2di_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_position2di_new02_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_position2di_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_position2di_set00);
   tolua_variable(tolua_S,"X",tolua_get_core__position2di_X,tolua_set_core__position2di_X);
   tolua_variable(tolua_S,"Y",tolua_get_core__position2di_Y,tolua_set_core__position2di_Y);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"position2df","core::position2df","",tolua_collect_core__position2df);
  #else
  tolua_cclass(tolua_S,"position2df","core::position2df","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"position2df");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_position2df_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_position2df_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_position2df_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_position2df_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_position2df_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_position2df_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_position2df_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_position2df_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_position2df_new02_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_position2df_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_position2df_set00);
   tolua_variable(tolua_S,"X",tolua_get_core__position2df_X,tolua_set_core__position2df_X);
   tolua_variable(tolua_S,"Y",tolua_get_core__position2df_Y,tolua_set_core__position2df_Y);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"recti","core::recti","",tolua_collect_core__recti);
  #else
  tolua_cclass(tolua_S,"recti","core::recti","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"recti");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_recti_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_recti_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_recti_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_recti_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_recti_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_recti_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_recti_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_recti_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_recti_new02_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_recti_new03);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_recti_new03_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_recti_new03_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_recti_new04);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_recti_new04_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_recti_new04_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_recti_delete00);
   tolua_function(tolua_S,"isPointInside",tolua_MyLuaBind_core_recti_isPointInside00);
   tolua_function(tolua_S,"isRectCollided",tolua_MyLuaBind_core_recti_isRectCollided00);
   tolua_function(tolua_S,"clipAgainst",tolua_MyLuaBind_core_recti_clipAgainst00);
   tolua_function(tolua_S,"getWidth",tolua_MyLuaBind_core_recti_getWidth00);
   tolua_function(tolua_S,"getHeight",tolua_MyLuaBind_core_recti_getHeight00);
   tolua_function(tolua_S,"repair",tolua_MyLuaBind_core_recti_repair00);
   tolua_function(tolua_S,"isValid",tolua_MyLuaBind_core_recti_isValid00);
   tolua_function(tolua_S,"getCenter",tolua_MyLuaBind_core_recti_getCenter00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_recti_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_recti_set01);
   tolua_variable(tolua_S,"UpperLeftCorner",tolua_get_core__recti_UpperLeftCorner,tolua_set_core__recti_UpperLeftCorner);
   tolua_variable(tolua_S,"LowerRightCorner",tolua_get_core__recti_LowerRightCorner,tolua_set_core__recti_LowerRightCorner);
   tolua_variable(tolua_S,"Left",tolua_get_core__recti_Left,tolua_set_core__recti_Left);
   tolua_variable(tolua_S,"Top",tolua_get_core__recti_Top,tolua_set_core__recti_Top);
   tolua_variable(tolua_S,"Right",tolua_get_core__recti_Right,tolua_set_core__recti_Right);
   tolua_variable(tolua_S,"Bottom",tolua_get_core__recti_Bottom,tolua_set_core__recti_Bottom);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"rectf","core::rectf","",tolua_collect_core__rectf);
  #else
  tolua_cclass(tolua_S,"rectf","core::rectf","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"rectf");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_rectf_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_rectf_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_rectf_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_rectf_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_rectf_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_rectf_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_rectf_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_rectf_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_rectf_new02_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_rectf_new03);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_rectf_new03_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_rectf_new03_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_rectf_new04);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_rectf_new04_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_rectf_new04_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_rectf_delete00);
   tolua_function(tolua_S,"isPointInside",tolua_MyLuaBind_core_rectf_isPointInside00);
   tolua_function(tolua_S,"isRectCollided",tolua_MyLuaBind_core_rectf_isRectCollided00);
   tolua_function(tolua_S,"clipAgainst",tolua_MyLuaBind_core_rectf_clipAgainst00);
   tolua_function(tolua_S,"getWidth",tolua_MyLuaBind_core_rectf_getWidth00);
   tolua_function(tolua_S,"getHeight",tolua_MyLuaBind_core_rectf_getHeight00);
   tolua_function(tolua_S,"repair",tolua_MyLuaBind_core_rectf_repair00);
   tolua_function(tolua_S,"isValid",tolua_MyLuaBind_core_rectf_isValid00);
   tolua_function(tolua_S,"getCenter",tolua_MyLuaBind_core_rectf_getCenter00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_rectf_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_rectf_set01);
   tolua_variable(tolua_S,"UpperLeftCorner",tolua_get_core__rectf_UpperLeftCorner,tolua_set_core__rectf_UpperLeftCorner);
   tolua_variable(tolua_S,"LowerRightCorner",tolua_get_core__rectf_LowerRightCorner,tolua_set_core__rectf_LowerRightCorner);
   tolua_variable(tolua_S,"Left",tolua_get_core__rectf_Left,tolua_set_core__rectf_Left);
   tolua_variable(tolua_S,"Top",tolua_get_core__rectf_Top,tolua_set_core__rectf_Top);
   tolua_variable(tolua_S,"Right",tolua_get_core__rectf_Right,tolua_set_core__rectf_Right);
   tolua_variable(tolua_S,"Bottom",tolua_get_core__rectf_Bottom,tolua_set_core__rectf_Bottom);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"stringc","core::stringc","",tolua_collect_core__stringc);
  #else
  tolua_cclass(tolua_S,"stringc","core::stringc","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"stringc");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_stringc_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_stringc_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_stringc_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_stringc_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_stringc_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_stringc_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_stringc_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_stringc_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_stringc_new02_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_stringc_new03);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_stringc_new03_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_stringc_new03_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_stringc_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_stringc_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_stringc_set01);
   tolua_function(tolua_S,".add",tolua_MyLuaBind_core_stringc__add00);
   tolua_function(tolua_S,".add",tolua_MyLuaBind_core_stringc__add01);
   tolua_function(tolua_S,".geti",tolua_MyLuaBind_core_stringc__geti00);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_core_stringc__eq00);
   tolua_function(tolua_S,".lt",tolua_MyLuaBind_core_stringc__lt00);
   tolua_function(tolua_S,"size",tolua_MyLuaBind_core_stringc_size00);
   tolua_function(tolua_S,"c_str",tolua_MyLuaBind_core_stringc_c_str00);
   tolua_function(tolua_S,"make_lower",tolua_MyLuaBind_core_stringc_make_lower00);
   tolua_function(tolua_S,"make_upper",tolua_MyLuaBind_core_stringc_make_upper00);
   tolua_function(tolua_S,"equals_ignore_case",tolua_MyLuaBind_core_stringc_equals_ignore_case00);
   tolua_function(tolua_S,"append",tolua_MyLuaBind_core_stringc_append00);
   tolua_function(tolua_S,"append",tolua_MyLuaBind_core_stringc_append01);
   tolua_function(tolua_S,"append",tolua_MyLuaBind_core_stringc_append02);
   tolua_function(tolua_S,"append",tolua_MyLuaBind_core_stringc_append03);
   tolua_function(tolua_S,"append",tolua_MyLuaBind_core_stringc_append04);
   tolua_function(tolua_S,"reserve",tolua_MyLuaBind_core_stringc_reserve00);
   tolua_function(tolua_S,"find_first",tolua_MyLuaBind_core_stringc_find_first00);
   tolua_function(tolua_S,"replace_char",tolua_MyLuaBind_core_stringc_replace_char00);
   tolua_function(tolua_S,"find_next",tolua_MyLuaBind_core_stringc_find_next00);
   tolua_function(tolua_S,"find_last",tolua_MyLuaBind_core_stringc_find_last00);
   tolua_function(tolua_S,"sub_string",tolua_MyLuaBind_core_stringc_sub_string00);
  tolua_endmodule(tolua_S);
  tolua_function(tolua_S,"Utf8ToAnsi",tolua_MyLuaBind_core_Utf8ToAnsi00);
  tolua_function(tolua_S,"AnsiToUtf8",tolua_MyLuaBind_core_AnsiToUtf800);
  tolua_function(tolua_S,"CP866ToCP1251",tolua_MyLuaBind_core_CP866ToCP125100);
  tolua_function(tolua_S,"ToHexStr",tolua_MyLuaBind_core_ToHexStr00);
  tolua_function(tolua_S,"ToHexStr64",tolua_MyLuaBind_core_ToHexStr6400);
  tolua_function(tolua_S,"getRelativePathBetweenDirectories",tolua_MyLuaBind_core_getRelativePathBetweenDirectories00);
  tolua_function(tolua_S,"extractFilePath",tolua_MyLuaBind_core_extractFilePath00);
  tolua_function(tolua_S,"extractFileName",tolua_MyLuaBind_core_extractFileName00);
  tolua_function(tolua_S,"extractFileName",tolua_MyLuaBind_core_extractFileName01);
  tolua_function(tolua_S,"extractFileExt",tolua_MyLuaBind_core_extractFileExt00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"vector3df","core::vector3df","",tolua_collect_core__vector3df);
  #else
  tolua_cclass(tolua_S,"vector3df","core::vector3df","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"vector3df");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_vector3df_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_vector3df_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_vector3df_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_vector3df_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_vector3df_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_vector3df_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_vector3df_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_vector3df_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_vector3df_new02_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_vector3df_delete00);
   tolua_function(tolua_S,".add",tolua_MyLuaBind_core_vector3df__add00);
   tolua_function(tolua_S,".sub",tolua_MyLuaBind_core_vector3df__sub00);
   tolua_function(tolua_S,".mul",tolua_MyLuaBind_core_vector3df__mul00);
   tolua_function(tolua_S,".mul",tolua_MyLuaBind_core_vector3df__mul01);
   tolua_function(tolua_S,".div",tolua_MyLuaBind_core_vector3df__div00);
   tolua_function(tolua_S,".div",tolua_MyLuaBind_core_vector3df__div01);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_core_vector3df__eq00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_vector3df_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_vector3df_set01);
   tolua_function(tolua_S,"getLength",tolua_MyLuaBind_core_vector3df_getLength00);
   tolua_function(tolua_S,"getLengthSQ",tolua_MyLuaBind_core_vector3df_getLengthSQ00);
   tolua_function(tolua_S,"getDotProduct",tolua_MyLuaBind_core_vector3df_getDotProduct00);
   tolua_function(tolua_S,"getDistanceFrom",tolua_MyLuaBind_core_vector3df_getDistanceFrom00);
   tolua_function(tolua_S,"getDistanceFromSQ",tolua_MyLuaBind_core_vector3df_getDistanceFromSQ00);
   tolua_function(tolua_S,"getCrossProduct",tolua_MyLuaBind_core_vector3df_getCrossProduct00);
   tolua_function(tolua_S,"isBetweenPoints",tolua_MyLuaBind_core_vector3df_isBetweenPoints00);
   tolua_function(tolua_S,"normalize",tolua_MyLuaBind_core_vector3df_normalize00);
   tolua_function(tolua_S,"setLength",tolua_MyLuaBind_core_vector3df_setLength00);
   tolua_function(tolua_S,"invert",tolua_MyLuaBind_core_vector3df_invert00);
   tolua_function(tolua_S,"rotateXZByDegrees",tolua_MyLuaBind_core_vector3df_rotateXZByDegrees00);
   tolua_function(tolua_S,"rotateXYByDegrees",tolua_MyLuaBind_core_vector3df_rotateXYByDegrees00);
   tolua_function(tolua_S,"rotateYZByDegrees",tolua_MyLuaBind_core_vector3df_rotateYZByDegrees00);
   tolua_function(tolua_S,"rotateXZByRadians",tolua_MyLuaBind_core_vector3df_rotateXZByRadians00);
   tolua_function(tolua_S,"rotateXYByRadians",tolua_MyLuaBind_core_vector3df_rotateXYByRadians00);
   tolua_function(tolua_S,"rotateYZByRadians",tolua_MyLuaBind_core_vector3df_rotateYZByRadians00);
   tolua_function(tolua_S,"getInterpolated",tolua_MyLuaBind_core_vector3df_getInterpolated00);
   tolua_function(tolua_S,"getHorizontalAngle",tolua_MyLuaBind_core_vector3df_getHorizontalAngle00);
   tolua_function(tolua_S,"getAngleDeg",tolua_MyLuaBind_core_vector3df_getAngleDeg00);
   tolua_function(tolua_S,"getAngleRad",tolua_MyLuaBind_core_vector3df_getAngleRad00);
   tolua_function(tolua_S,"midPoint",tolua_MyLuaBind_core_vector3df_midPoint00);
   tolua_variable(tolua_S,"X",tolua_get_core__vector3df_X,tolua_set_core__vector3df_X);
   tolua_variable(tolua_S,"Y",tolua_get_core__vector3df_Y,tolua_set_core__vector3df_Y);
   tolua_variable(tolua_S,"Z",tolua_get_core__vector3df_Z,tolua_set_core__vector3df_Z);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"vector2di","core::vector2di","",tolua_collect_core__vector2di);
  #else
  tolua_cclass(tolua_S,"vector2di","core::vector2di","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"vector2di");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_vector2di_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_vector2di_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_vector2di_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_vector2di_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_vector2di_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_vector2di_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_vector2di_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_vector2di_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_vector2di_new02_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_vector2di_delete00);
   tolua_function(tolua_S,".add",tolua_MyLuaBind_core_vector2di__add00);
   tolua_function(tolua_S,".sub",tolua_MyLuaBind_core_vector2di__sub00);
   tolua_function(tolua_S,".mul",tolua_MyLuaBind_core_vector2di__mul00);
   tolua_function(tolua_S,".mul",tolua_MyLuaBind_core_vector2di__mul01);
   tolua_function(tolua_S,".div",tolua_MyLuaBind_core_vector2di__div00);
   tolua_function(tolua_S,".div",tolua_MyLuaBind_core_vector2di__div01);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_core_vector2di__eq00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_vector2di_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_vector2di_set01);
   tolua_function(tolua_S,"normalize",tolua_MyLuaBind_core_vector2di_normalize00);
   tolua_variable(tolua_S,"X",tolua_get_core__vector2di_X,tolua_set_core__vector2di_X);
   tolua_variable(tolua_S,"Y",tolua_get_core__vector2di_Y,tolua_set_core__vector2di_Y);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"vector2df","core::vector2df","",tolua_collect_core__vector2df);
  #else
  tolua_cclass(tolua_S,"vector2df","core::vector2df","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"vector2df");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_vector2df_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_vector2df_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_vector2df_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_vector2df_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_vector2df_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_vector2df_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_vector2df_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_vector2df_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_vector2df_new02_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_core_vector2df_delete00);
   tolua_function(tolua_S,".add",tolua_MyLuaBind_core_vector2df__add00);
   tolua_function(tolua_S,".sub",tolua_MyLuaBind_core_vector2df__sub00);
   tolua_function(tolua_S,".mul",tolua_MyLuaBind_core_vector2df__mul00);
   tolua_function(tolua_S,".mul",tolua_MyLuaBind_core_vector2df__mul01);
   tolua_function(tolua_S,".div",tolua_MyLuaBind_core_vector2df__div00);
   tolua_function(tolua_S,".div",tolua_MyLuaBind_core_vector2df__div01);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_core_vector2df__eq00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_vector2df_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_vector2df_set01);
   tolua_function(tolua_S,"normalize",tolua_MyLuaBind_core_vector2df_normalize00);
   tolua_variable(tolua_S,"X",tolua_get_core__vector2df_X,tolua_set_core__vector2df_X);
   tolua_variable(tolua_S,"Y",tolua_get_core__vector2df_Y,tolua_set_core__vector2df_Y);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"core",0);
 tolua_beginmodule(tolua_S,"core");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"wave","core::wave","",tolua_collect_core__wave);
  #else
  tolua_cclass(tolua_S,"wave","core::wave","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"wave");
   tolua_variable(tolua_S,"func",tolua_get_core__wave_func,tolua_set_core__wave_func);
   tolua_variable(tolua_S,"base",tolua_get_core__wave_base,tolua_set_core__wave_base);
   tolua_variable(tolua_S,"amplitude",tolua_get_core__wave_amplitude,tolua_set_core__wave_amplitude);
   tolua_variable(tolua_S,"phase",tolua_get_core__wave_phase,tolua_set_core__wave_phase);
   tolua_variable(tolua_S,"frequency",tolua_get_core__wave_frequency,tolua_set_core__wave_frequency);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_wave_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_wave_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_wave_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_wave_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_wave_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_wave_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_core_wave_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_core_wave_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_core_wave_new02_local);
   tolua_function(tolua_S,".lt",tolua_MyLuaBind_core_wave__lt00);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_core_wave__eq00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_core_wave_set00);
   tolua_function(tolua_S,"get_value",tolua_MyLuaBind_core_wave_get_value00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  tolua_function(tolua_S,"GetGameActionName",tolua_MyLuaBind_game_GetGameActionName00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"io",0);
 tolua_beginmodule(tolua_S,"io");
  tolua_function(tolua_S,"getKeyCodeName",tolua_MyLuaBind_io_getKeyCodeName00);
  tolua_function(tolua_S,"getMouseCodeName",tolua_MyLuaBind_io_getMouseCodeName00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"io",0);
 tolua_beginmodule(tolua_S,"io");
  tolua_cclass(tolua_S,"ICursorControl","io::ICursorControl","",NULL);
  tolua_beginmodule(tolua_S,"ICursorControl");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_io_ICursorControl_getSingleton00);
   tolua_function(tolua_S,"setVisible",tolua_MyLuaBind_io_ICursorControl_setVisible00);
   tolua_function(tolua_S,"isVisible",tolua_MyLuaBind_io_ICursorControl_isVisible00);
   tolua_function(tolua_S,"setRelativePosition",tolua_MyLuaBind_io_ICursorControl_setRelativePosition00);
   tolua_function(tolua_S,"setRelativePosition",tolua_MyLuaBind_io_ICursorControl_setRelativePosition01);
   tolua_function(tolua_S,"setPosition",tolua_MyLuaBind_io_ICursorControl_setPosition00);
   tolua_function(tolua_S,"setPosition",tolua_MyLuaBind_io_ICursorControl_setPosition01);
   tolua_function(tolua_S,"setPositionOffset",tolua_MyLuaBind_io_ICursorControl_setPositionOffset00);
   tolua_function(tolua_S,"getPosition",tolua_MyLuaBind_io_ICursorControl_getPosition00);
   tolua_function(tolua_S,"getRelativePosition",tolua_MyLuaBind_io_ICursorControl_getRelativePosition00);
   tolua_function(tolua_S,"setGraphicCursor",tolua_MyLuaBind_io_ICursorControl_setGraphicCursor00);
   tolua_function(tolua_S,"resetGraphicCursor",tolua_MyLuaBind_io_ICursorControl_resetGraphicCursor00);
   tolua_function(tolua_S,"setCursor",tolua_MyLuaBind_io_ICursorControl_setCursor00);
   tolua_function(tolua_S,"setCursor",tolua_MyLuaBind_io_ICursorControl_setCursor01);
   tolua_function(tolua_S,"refreshCursor",tolua_MyLuaBind_io_ICursorControl_refreshCursor00);
   tolua_function(tolua_S,"setRelativeSize",tolua_MyLuaBind_io_ICursorControl_setRelativeSize00);
   tolua_function(tolua_S,"getRelativeSize",tolua_MyLuaBind_io_ICursorControl_getRelativeSize00);
   tolua_function(tolua_S,"getSize",tolua_MyLuaBind_io_ICursorControl_getSize00);
   tolua_function(tolua_S,"getPositionOffset",tolua_MyLuaBind_io_ICursorControl_getPositionOffset00);
   tolua_function(tolua_S,"registerForRendering",tolua_MyLuaBind_io_ICursorControl_registerForRendering00);
   tolua_function(tolua_S,"setSensitivity",tolua_MyLuaBind_io_ICursorControl_setSensitivity00);
   tolua_function(tolua_S,"getSensitivity",tolua_MyLuaBind_io_ICursorControl_getSensitivity00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"io",0);
 tolua_beginmodule(tolua_S,"io");
  tolua_cclass(tolua_S,"IFileSystem","io::IFileSystem","",NULL);
  tolua_beginmodule(tolua_S,"IFileSystem");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_io_IFileSystem_getSingleton00);
   tolua_function(tolua_S,"addZipFileArchive",tolua_MyLuaBind_io_IFileSystem_addZipFileArchive00);
   tolua_function(tolua_S,"getWorkingDirectory",tolua_MyLuaBind_io_IFileSystem_getWorkingDirectory00);
   tolua_function(tolua_S,"changeWorkingDirectoryTo",tolua_MyLuaBind_io_IFileSystem_changeWorkingDirectoryTo00);
   tolua_function(tolua_S,"getFileList",tolua_MyLuaBind_io_IFileSystem_getFileList00);
   tolua_function(tolua_S,"existFile",tolua_MyLuaBind_io_IFileSystem_existFile00);
   tolua_function(tolua_S,"existFileInZip",tolua_MyLuaBind_io_IFileSystem_existFileInZip00);
   tolua_function(tolua_S,"existFileOnDisk",tolua_MyLuaBind_io_IFileSystem_existFileOnDisk00);
   tolua_function(tolua_S,"existDir",tolua_MyLuaBind_io_IFileSystem_existDir00);
   tolua_function(tolua_S,"makeDir",tolua_MyLuaBind_io_IFileSystem_makeDir00);
   tolua_function(tolua_S,"optimizeDirectoryString",tolua_MyLuaBind_io_IFileSystem_optimizeDirectoryString00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"io",0);
 tolua_beginmodule(tolua_S,"io");
  tolua_cclass(tolua_S,"IFileList","io::IFileList","IUnknown",NULL);
  tolua_beginmodule(tolua_S,"IFileList");
   tolua_function(tolua_S,"getFileCount",tolua_MyLuaBind_io_IFileList_getFileCount00);
   tolua_function(tolua_S,"getFileExt",tolua_MyLuaBind_io_IFileList_getFileExt00);
   tolua_function(tolua_S,"getFileName",tolua_MyLuaBind_io_IFileList_getFileName00);
   tolua_function(tolua_S,"getFullFileName",tolua_MyLuaBind_io_IFileList_getFullFileName00);
   tolua_function(tolua_S,"isDirectory",tolua_MyLuaBind_io_IFileList_isDirectory00);
   tolua_function(tolua_S,"getFileSizeInBytes",tolua_MyLuaBind_io_IFileList_getFileSizeInBytes00);
   tolua_function(tolua_S,"getWorkingDirectory",tolua_MyLuaBind_io_IFileList_getWorkingDirectory00);
   tolua_function(tolua_S,"isNeedToUpdate",tolua_MyLuaBind_io_IFileList_isNeedToUpdate00);
   tolua_function(tolua_S,"update",tolua_MyLuaBind_io_IFileList_update00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"io",0);
 tolua_beginmodule(tolua_S,"io");
  tolua_cclass(tolua_S,"IInputDispatcher","io::IInputDispatcher","",NULL);
  tolua_beginmodule(tolua_S,"IInputDispatcher");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_io_IInputDispatcher_getSingleton00);
   tolua_function(tolua_S,"getKeyInputFilterFlag",tolua_MyLuaBind_io_IInputDispatcher_getKeyInputFilterFlag00);
   tolua_function(tolua_S,"setKeyInputFilterFlag",tolua_MyLuaBind_io_IInputDispatcher_setKeyInputFilterFlag00);
   tolua_function(tolua_S,"getMouseInputFilterFlag",tolua_MyLuaBind_io_IInputDispatcher_getMouseInputFilterFlag00);
   tolua_function(tolua_S,"setMouseInputFilterFlag",tolua_MyLuaBind_io_IInputDispatcher_setMouseInputFilterFlag00);
   tolua_function(tolua_S,"mapKey",tolua_MyLuaBind_io_IInputDispatcher_mapKey00);
   tolua_function(tolua_S,"mapMouse",tolua_MyLuaBind_io_IInputDispatcher_mapMouse00);
   tolua_function(tolua_S,"getActionKey",tolua_MyLuaBind_io_IInputDispatcher_getActionKey00);
   tolua_function(tolua_S,"getActionMouse",tolua_MyLuaBind_io_IInputDispatcher_getActionMouse00);
   tolua_function(tolua_S,"getKeyAction",tolua_MyLuaBind_io_IInputDispatcher_getKeyAction00);
   tolua_function(tolua_S,"getMouseAction",tolua_MyLuaBind_io_IInputDispatcher_getMouseAction00);
   tolua_function(tolua_S,"getInputPS",tolua_MyLuaBind_io_IInputDispatcher_getInputPS00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"io",0);
 tolua_beginmodule(tolua_S,"io");
  tolua_cclass(tolua_S,"ILogger","io::ILogger","",NULL);
  tolua_beginmodule(tolua_S,"ILogger");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_io_ILogger_getSingleton00);
   tolua_function(tolua_S,"getLogLevel",tolua_MyLuaBind_io_ILogger_getLogLevel00);
   tolua_function(tolua_S,"setLogLevel",tolua_MyLuaBind_io_ILogger_setLogLevel00);
   tolua_function(tolua_S,"log",tolua_MyLuaBind_io_ILogger_log00);
   tolua_function(tolua_S,"logErr",tolua_MyLuaBind_io_ILogger_logErr00);
   tolua_function(tolua_S,"logWarn",tolua_MyLuaBind_io_ILogger_logWarn00);
   tolua_function(tolua_S,"logInfo",tolua_MyLuaBind_io_ILogger_logInfo00);
   tolua_function(tolua_S,"setIdentityFormatLevel",tolua_MyLuaBind_io_ILogger_setIdentityFormatLevel00);
   tolua_function(tolua_S,"setFormatLevel",tolua_MyLuaBind_io_ILogger_setFormatLevel00);
   tolua_function(tolua_S,"getFormatLevel",tolua_MyLuaBind_io_ILogger_getFormatLevel00);
   tolua_function(tolua_S,"increaseFormatLevel",tolua_MyLuaBind_io_ILogger_increaseFormatLevel00);
   tolua_function(tolua_S,"decreaseFormatLevel",tolua_MyLuaBind_io_ILogger_decreaseFormatLevel00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"io",0);
 tolua_beginmodule(tolua_S,"io");
  tolua_cclass(tolua_S,"SKeyEvent","io::SKeyEvent","",NULL);
  tolua_beginmodule(tolua_S,"SKeyEvent");
   tolua_variable(tolua_S,"Key",tolua_get_io__SKeyEvent_Key,tolua_set_io__SKeyEvent_Key);
   tolua_variable(tolua_S,"Shift",tolua_get_io__SKeyEvent_Shift,tolua_set_io__SKeyEvent_Shift);
   tolua_variable(tolua_S,"Control",tolua_get_io__SKeyEvent_Control,tolua_set_io__SKeyEvent_Control);
   tolua_variable(tolua_S,"Event",tolua_get_io__SKeyEvent_Event,tolua_set_io__SKeyEvent_Event);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SMouseEvent","io::SMouseEvent","",NULL);
  tolua_beginmodule(tolua_S,"SMouseEvent");
   tolua_variable(tolua_S,"X",tolua_get_io__SMouseEvent_X,tolua_set_io__SMouseEvent_X);
   tolua_variable(tolua_S,"Y",tolua_get_io__SMouseEvent_Y,tolua_set_io__SMouseEvent_Y);
   tolua_variable(tolua_S,"DeltaX",tolua_get_io__SMouseEvent_DeltaX,tolua_set_io__SMouseEvent_DeltaX);
   tolua_variable(tolua_S,"DeltaY",tolua_get_io__SMouseEvent_DeltaY,tolua_set_io__SMouseEvent_DeltaY);
   tolua_variable(tolua_S,"Shift",tolua_get_io__SMouseEvent_Shift,tolua_set_io__SMouseEvent_Shift);
   tolua_variable(tolua_S,"Control",tolua_get_io__SMouseEvent_Control,tolua_set_io__SMouseEvent_Control);
   tolua_variable(tolua_S,"Wheel",tolua_get_io__SMouseEvent_Wheel,tolua_set_io__SMouseEvent_Wheel);
   tolua_variable(tolua_S,"Event",tolua_get_io__SMouseEvent_Event,tolua_set_io__SMouseEvent_Event);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SPaintEvent","io::SPaintEvent","",NULL);
  tolua_beginmodule(tolua_S,"SPaintEvent");
   tolua_variable(tolua_S,"X",tolua_get_io__SPaintEvent_X,tolua_set_io__SPaintEvent_X);
   tolua_variable(tolua_S,"Y",tolua_get_io__SPaintEvent_Y,tolua_set_io__SPaintEvent_Y);
   tolua_variable(tolua_S,"Width",tolua_get_io__SPaintEvent_Width,tolua_set_io__SPaintEvent_Width);
   tolua_variable(tolua_S,"Height",tolua_get_io__SPaintEvent_Height,tolua_set_io__SPaintEvent_Height);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SLogEvent","io::SLogEvent","",NULL);
  tolua_beginmodule(tolua_S,"SLogEvent");
   tolua_variable(tolua_S,"Text",tolua_get_io__SLogEvent_Text,NULL);
   tolua_variable(tolua_S,"Level",tolua_get_io__SLogEvent_Level,tolua_set_io__SLogEvent_Level);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SEvent","io::SEvent","",tolua_collect_io__SEvent);
  #else
  tolua_cclass(tolua_S,"SEvent","io::SEvent","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SEvent");
   tolua_variable(tolua_S,"EventType",tolua_get_io__SEvent_EventType,tolua_set_io__SEvent_EventType);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_io_SEvent_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_io_SEvent_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_io_SEvent_new00_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_io_SEvent_delete00);
   tolua_variable(tolua_S,"KeyInput",tolua_get_io__SEvent_KeyInput,tolua_set_io__SEvent_KeyInput);
   tolua_variable(tolua_S,"MouseInput",tolua_get_io__SEvent_MouseInput,tolua_set_io__SEvent_MouseInput);
   tolua_variable(tolua_S,"PaintEvent",tolua_get_io__SEvent_PaintEvent,tolua_set_io__SEvent_PaintEvent);
   tolua_variable(tolua_S,"LogEvent",tolua_get_io__SEvent_LogEvent,tolua_set_io__SEvent_LogEvent);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"dev",0);
 tolua_beginmodule(tolua_S,"dev");
  tolua_cclass(tolua_S,"IDevice","dev::IDevice","",NULL);
  tolua_beginmodule(tolua_S,"IDevice");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_dev_IDevice_getSingleton00);
   tolua_function(tolua_S,"isDebug",tolua_MyLuaBind_dev_IDevice_isDebug00);
   tolua_function(tolua_S,"getDescriptionString",tolua_MyLuaBind_dev_IDevice_getDescriptionString00);
   tolua_function(tolua_S,"show",tolua_MyLuaBind_dev_IDevice_show00);
   tolua_function(tolua_S,"hide",tolua_MyLuaBind_dev_IDevice_hide00);
   tolua_function(tolua_S,"close",tolua_MyLuaBind_dev_IDevice_close00);
   tolua_function(tolua_S,"getDeviceTime",tolua_MyLuaBind_dev_IDevice_getDeviceTime00);
   tolua_function(tolua_S,"getDeviceSystemTime",tolua_MyLuaBind_dev_IDevice_getDeviceSystemTime00);
   tolua_function(tolua_S,"getDeviceFlagValue",tolua_MyLuaBind_dev_IDevice_getDeviceFlagValue00);
   tolua_function(tolua_S,"setWindowCaption",tolua_MyLuaBind_dev_IDevice_setWindowCaption00);
   tolua_function(tolua_S,"isWindowActive",tolua_MyLuaBind_dev_IDevice_isWindowActive00);
   tolua_function(tolua_S,"run",tolua_MyLuaBind_dev_IDevice_run00);
   tolua_function(tolua_S,"getVersionString",tolua_MyLuaBind_dev_IDevice_getVersionString00);
   tolua_function(tolua_S,"getMonitorBrightness",tolua_MyLuaBind_dev_IDevice_getMonitorBrightness00);
   tolua_function(tolua_S,"setMonitorBrightness",tolua_MyLuaBind_dev_IDevice_setMonitorBrightness00);
   tolua_function(tolua_S,"switchMonitorToFullScreen",tolua_MyLuaBind_dev_IDevice_switchMonitorToFullScreen00);
   tolua_function(tolua_S,"restoreMonitorSettings",tolua_MyLuaBind_dev_IDevice_restoreMonitorSettings00);
   tolua_function(tolua_S,"setWindowIcon",tolua_MyLuaBind_dev_IDevice_setWindowIcon00);
   tolua_function(tolua_S,"setMinimalRunPeriod",tolua_MyLuaBind_dev_IDevice_setMinimalRunPeriod00);
   tolua_function(tolua_S,"getMinimalRunPeriod",tolua_MyLuaBind_dev_IDevice_getMinimalRunPeriod00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"dev",0);
 tolua_beginmodule(tolua_S,"dev");
  tolua_cclass(tolua_S,"IPluginManager","dev::IPluginManager","",NULL);
  tolua_beginmodule(tolua_S,"IPluginManager");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_dev_IPluginManager_getSingleton00);
   tolua_function(tolua_S,"registerPlugin",tolua_MyLuaBind_dev_IPluginManager_registerPlugin00);
   tolua_function(tolua_S,"unregisterPlugin",tolua_MyLuaBind_dev_IPluginManager_unregisterPlugin00);
   tolua_function(tolua_S,"startPlugin",tolua_MyLuaBind_dev_IPluginManager_startPlugin00);
   tolua_function(tolua_S,"shutPlugin",tolua_MyLuaBind_dev_IPluginManager_shutPlugin00);
   tolua_function(tolua_S,"shutAllPlugins",tolua_MyLuaBind_dev_IPluginManager_shutAllPlugins00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"dev",0);
 tolua_beginmodule(tolua_S,"dev");
  tolua_cclass(tolua_S,"SProfileParameter","dev::SProfileParameter","",NULL);
  tolua_beginmodule(tolua_S,"SProfileParameter");
   tolua_variable(tolua_S,"Id",tolua_get_dev__SProfileParameter_Id,tolua_set_dev__SProfileParameter_Id);
   tolua_variable(tolua_S,"Name",tolua_get_dev__SProfileParameter_Name,tolua_set_dev__SProfileParameter_Name);
   tolua_variable(tolua_S,"CurrentTimeSec",tolua_get_dev__SProfileParameter_CurrentTimeSec,tolua_set_dev__SProfileParameter_CurrentTimeSec);
   tolua_variable(tolua_S,"FilteredTimeSec",tolua_get_dev__SProfileParameter_FilteredTimeSec,tolua_set_dev__SProfileParameter_FilteredTimeSec);
   tolua_variable(tolua_S,"ParentDepth",tolua_get_dev__SProfileParameter_ParentDepth,tolua_set_dev__SProfileParameter_ParentDepth);
   tolua_variable(tolua_S,"Info",tolua_get_dev__SProfileParameter_Info,tolua_set_dev__SProfileParameter_Info);
   tolua_variable(tolua_S,"Pers",tolua_get_dev__SProfileParameter_Pers,tolua_set_dev__SProfileParameter_Pers);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IProfiler","dev::IProfiler","",NULL);
  tolua_beginmodule(tolua_S,"IProfiler");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_dev_IProfiler_getSingleton00);
   tolua_function(tolua_S,"isProfiling",tolua_MyLuaBind_dev_IProfiler_isProfiling00);
   tolua_function(tolua_S,"suspendProfiling",tolua_MyLuaBind_dev_IProfiler_suspendProfiling00);
   tolua_function(tolua_S,"resumeProfiling",tolua_MyLuaBind_dev_IProfiler_resumeProfiling00);
   tolua_function(tolua_S,"startProfiling",tolua_MyLuaBind_dev_IProfiler_startProfiling00);
   tolua_function(tolua_S,"allocProfileId",tolua_MyLuaBind_dev_IProfiler_allocProfileId00);
   tolua_function(tolua_S,"stopProfiling",tolua_MyLuaBind_dev_IProfiler_stopProfiling00);
   tolua_function(tolua_S,"getFirstProfileParameter",tolua_MyLuaBind_dev_IProfiler_getFirstProfileParameter00);
   tolua_function(tolua_S,"getNextProfileParameter",tolua_MyLuaBind_dev_IProfiler_getNextProfileParameter00);
   tolua_function(tolua_S,"getProfileParameter",tolua_MyLuaBind_dev_IProfiler_getProfileParameter00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"dev",0);
 tolua_beginmodule(tolua_S,"dev");
  tolua_function(tolua_S,"createDevice",tolua_MyLuaBind_dev_createDevice00);
  tolua_function(tolua_S,"destroyDevice",tolua_MyLuaBind_dev_destroyDevice00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"res",0);
 tolua_beginmodule(tolua_S,"res");
  tolua_cclass(tolua_S,"IResourceManager","res::IResourceManager","",NULL);
  tolua_beginmodule(tolua_S,"IResourceManager");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_res_IResourceManager_getSingleton00);
   tolua_function(tolua_S,"setMediaDirRel",tolua_MyLuaBind_res_IResourceManager_setMediaDirRel00);
   tolua_function(tolua_S,"setCommonMediaDirRel",tolua_MyLuaBind_res_IResourceManager_setCommonMediaDirRel00);
   tolua_function(tolua_S,"getMediaDirRel",tolua_MyLuaBind_res_IResourceManager_getMediaDirRel00);
   tolua_function(tolua_S,"getCommonMediaDirRel",tolua_MyLuaBind_res_IResourceManager_getCommonMediaDirRel00);
   tolua_function(tolua_S,"getMediaDirFull",tolua_MyLuaBind_res_IResourceManager_getMediaDirFull00);
   tolua_function(tolua_S,"getCommonMediaDirFull",tolua_MyLuaBind_res_IResourceManager_getCommonMediaDirFull00);
   tolua_function(tolua_S,"getMediaFileNameRel",tolua_MyLuaBind_res_IResourceManager_getMediaFileNameRel00);
   tolua_function(tolua_S,"getCommonMediaFileNameRel",tolua_MyLuaBind_res_IResourceManager_getCommonMediaFileNameRel00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"ICameraSceneNode","scn::ICameraSceneNode","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"ICameraSceneNode");
   tolua_function(tolua_S,"getProjectionMatrix",tolua_MyLuaBind_scn_ICameraSceneNode_getProjectionMatrix00);
   tolua_function(tolua_S,"getViewMatrix",tolua_MyLuaBind_scn_ICameraSceneNode_getViewMatrix00);
   tolua_function(tolua_S,"setTarget",tolua_MyLuaBind_scn_ICameraSceneNode_setTarget00);
   tolua_function(tolua_S,"getTarget",tolua_MyLuaBind_scn_ICameraSceneNode_getTarget00);
   tolua_function(tolua_S,"setUpVector",tolua_MyLuaBind_scn_ICameraSceneNode_setUpVector00);
   tolua_function(tolua_S,"getUpVector",tolua_MyLuaBind_scn_ICameraSceneNode_getUpVector00);
   tolua_function(tolua_S,"setNearValue",tolua_MyLuaBind_scn_ICameraSceneNode_setNearValue00);
   tolua_function(tolua_S,"getNearValue",tolua_MyLuaBind_scn_ICameraSceneNode_getNearValue00);
   tolua_function(tolua_S,"setFarValue",tolua_MyLuaBind_scn_ICameraSceneNode_setFarValue00);
   tolua_function(tolua_S,"getFarValue",tolua_MyLuaBind_scn_ICameraSceneNode_getFarValue00);
   tolua_function(tolua_S,"setAspectRatio",tolua_MyLuaBind_scn_ICameraSceneNode_setAspectRatio00);
   tolua_function(tolua_S,"getAspectRatio",tolua_MyLuaBind_scn_ICameraSceneNode_getAspectRatio00);
   tolua_function(tolua_S,"setFOV",tolua_MyLuaBind_scn_ICameraSceneNode_setFOV00);
   tolua_function(tolua_S,"getFOV",tolua_MyLuaBind_scn_ICameraSceneNode_getFOV00);
   tolua_function(tolua_S,"setViewVolume",tolua_MyLuaBind_scn_ICameraSceneNode_setViewVolume00);
   tolua_function(tolua_S,"getViewVolume",tolua_MyLuaBind_scn_ICameraSceneNode_getViewVolume00);
   tolua_function(tolua_S,"getViewFrustrum",tolua_MyLuaBind_scn_ICameraSceneNode_getViewFrustrum00);
   tolua_function(tolua_S,"setProjectionType",tolua_MyLuaBind_scn_ICameraSceneNode_setProjectionType00);
   tolua_function(tolua_S,"getProjectionType",tolua_MyLuaBind_scn_ICameraSceneNode_getProjectionType00);
   tolua_function(tolua_S,"getZoomSpeed",tolua_MyLuaBind_scn_ICameraSceneNode_getZoomSpeed00);
   tolua_function(tolua_S,"setZoomSpeed",tolua_MyLuaBind_scn_ICameraSceneNode_setZoomSpeed00);
   tolua_function(tolua_S,"getRotationSpeed",tolua_MyLuaBind_scn_ICameraSceneNode_getRotationSpeed00);
   tolua_function(tolua_S,"setRotationSpeed",tolua_MyLuaBind_scn_ICameraSceneNode_setRotationSpeed00);
   tolua_function(tolua_S,"getMoveSpeed",tolua_MyLuaBind_scn_ICameraSceneNode_getMoveSpeed00);
   tolua_function(tolua_S,"setMoveSpeed",tolua_MyLuaBind_scn_ICameraSceneNode_setMoveSpeed00);
   tolua_function(tolua_S,"setSceneEditorCamera",tolua_MyLuaBind_scn_ICameraSceneNode_setSceneEditorCamera00);
   tolua_function(tolua_S,"isSceneEditorCamera",tolua_MyLuaBind_scn_ICameraSceneNode_isSceneEditorCamera00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"IMaterialsManager","scn::IMaterialsManager","",NULL);
  tolua_beginmodule(tolua_S,"IMaterialsManager");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_scn_IMaterialsManager_getSingleton00);
   tolua_function(tolua_S,"loadMaterialsFromDir",tolua_MyLuaBind_scn_IMaterialsManager_loadMaterialsFromDir00);
   tolua_function(tolua_S,"getMaterialsCount",tolua_MyLuaBind_scn_IMaterialsManager_getMaterialsCount00);
   tolua_function(tolua_S,"findMaterialByName",tolua_MyLuaBind_scn_IMaterialsManager_findMaterialByName00);
   tolua_function(tolua_S,"findMaterialByHash",tolua_MyLuaBind_scn_IMaterialsManager_findMaterialByHash00);
   tolua_function(tolua_S,"addMaterial",tolua_MyLuaBind_scn_IMaterialsManager_addMaterial00);
   tolua_function(tolua_S,"getMaterial",tolua_MyLuaBind_scn_IMaterialsManager_getMaterial00);
   tolua_function(tolua_S,"getMaterialByName",tolua_MyLuaBind_scn_IMaterialsManager_getMaterialByName00);
   tolua_function(tolua_S,"setMaterial",tolua_MyLuaBind_scn_IMaterialsManager_setMaterial00);
   tolua_function(tolua_S,"setMaterialByName",tolua_MyLuaBind_scn_IMaterialsManager_setMaterialByName00);
   tolua_function(tolua_S,"getMaterialName",tolua_MyLuaBind_scn_IMaterialsManager_getMaterialName00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"ISceneManager","scn::ISceneManager","",NULL);
  tolua_beginmodule(tolua_S,"ISceneManager");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_scn_ISceneManager_getSingleton00);
   tolua_function(tolua_S,"getMesh",tolua_MyLuaBind_scn_ISceneManager_getMesh00);
   tolua_function(tolua_S,"setActiveCamera",tolua_MyLuaBind_scn_ISceneManager_setActiveCamera00);
   tolua_function(tolua_S,"getActiveCamera",tolua_MyLuaBind_scn_ISceneManager_getActiveCamera00);
   tolua_function(tolua_S,"preRenderScene",tolua_MyLuaBind_scn_ISceneManager_preRenderScene00);
   tolua_function(tolua_S,"postRenderScene",tolua_MyLuaBind_scn_ISceneManager_postRenderScene00);
   tolua_function(tolua_S,"getRootSceneNode",tolua_MyLuaBind_scn_ISceneManager_getRootSceneNode00);
   tolua_function(tolua_S,"getSceneNodeFromId",tolua_MyLuaBind_scn_ISceneManager_getSceneNodeFromId00);
   tolua_function(tolua_S,"getSceneClusterRootSceneNode",tolua_MyLuaBind_scn_ISceneManager_getSceneClusterRootSceneNode00);
   tolua_function(tolua_S,"getCacheSceneClusterIndex",tolua_MyLuaBind_scn_ISceneManager_getCacheSceneClusterIndex00);
   tolua_function(tolua_S,"getCurrentSceneClusterIndex",tolua_MyLuaBind_scn_ISceneManager_getCurrentSceneClusterIndex00);
   tolua_function(tolua_S,"setCurrentSceneClusterIndex",tolua_MyLuaBind_scn_ISceneManager_setCurrentSceneClusterIndex00);
   tolua_function(tolua_S,"getSceneClusterCount",tolua_MyLuaBind_scn_ISceneManager_getSceneClusterCount00);
   tolua_function(tolua_S,"setSceneClusterEnabled",tolua_MyLuaBind_scn_ISceneManager_setSceneClusterEnabled00);
   tolua_function(tolua_S,"addToDeletionQueue",tolua_MyLuaBind_scn_ISceneManager_addToDeletionQueue00);
   tolua_function(tolua_S,"addToVisibilityChangeQueue",tolua_MyLuaBind_scn_ISceneManager_addToVisibilityChangeQueue00);
   tolua_function(tolua_S,"clearScene",tolua_MyLuaBind_scn_ISceneManager_clearScene00);
   tolua_function(tolua_S,"getLODDistance",tolua_MyLuaBind_scn_ISceneManager_getLODDistance00);
   tolua_function(tolua_S,"setLODDistance",tolua_MyLuaBind_scn_ISceneManager_setLODDistance00);
   tolua_function(tolua_S,"setOctTreeCullingEnabled",tolua_MyLuaBind_scn_ISceneManager_setOctTreeCullingEnabled00);
   tolua_function(tolua_S,"isOctTreeCullingEnabled",tolua_MyLuaBind_scn_ISceneManager_isOctTreeCullingEnabled00);
   tolua_function(tolua_S,"setOccludersCullingEnabled",tolua_MyLuaBind_scn_ISceneManager_setOccludersCullingEnabled00);
   tolua_function(tolua_S,"isOccludersCullingEnabled",tolua_MyLuaBind_scn_ISceneManager_isOccludersCullingEnabled00);
   tolua_function(tolua_S,"getFirstSceneNodeInTypeList",tolua_MyLuaBind_scn_ISceneManager_getFirstSceneNodeInTypeList00);
   tolua_function(tolua_S,"getNextSceneNodeInTypeList",tolua_MyLuaBind_scn_ISceneManager_getNextSceneNodeInTypeList00);
   tolua_function(tolua_S,"getFirstSceneNodeInList",tolua_MyLuaBind_scn_ISceneManager_getFirstSceneNodeInList00);
   tolua_function(tolua_S,"getNextSceneNodeInList",tolua_MyLuaBind_scn_ISceneManager_getNextSceneNodeInList00);
   tolua_function(tolua_S,"getSceneNodesCount",tolua_MyLuaBind_scn_ISceneManager_getSceneNodesCount00);
   tolua_function(tolua_S,"getVisibleSceneNodesCount",tolua_MyLuaBind_scn_ISceneManager_getVisibleSceneNodesCount00);
   tolua_function(tolua_S,"getRayFromScreenCoordinates",tolua_MyLuaBind_scn_ISceneManager_getRayFromScreenCoordinates00);
   tolua_function(tolua_S,"getScreenCoordinatesFrom3DPosition",tolua_MyLuaBind_scn_ISceneManager_getScreenCoordinatesFrom3DPosition00);
   tolua_function(tolua_S,"addCameraSceneNodeMaya",tolua_MyLuaBind_scn_ISceneManager_addCameraSceneNodeMaya00);
   tolua_function(tolua_S,"addCameraSceneNodeFPS",tolua_MyLuaBind_scn_ISceneManager_addCameraSceneNodeFPS00);
   tolua_function(tolua_S,"addCameraSceneNodeOverview",tolua_MyLuaBind_scn_ISceneManager_addCameraSceneNodeOverview00);
   tolua_function(tolua_S,"clearSelectionList",tolua_MyLuaBind_scn_ISceneManager_clearSelectionList00);
   tolua_function(tolua_S,"addSceneNodeToSelectionList",tolua_MyLuaBind_scn_ISceneManager_addSceneNodeToSelectionList00);
   tolua_function(tolua_S,"remSceneNodeFromSelectionList",tolua_MyLuaBind_scn_ISceneManager_remSceneNodeFromSelectionList00);
   tolua_function(tolua_S,"getSelectedSceneNodesCount",tolua_MyLuaBind_scn_ISceneManager_getSelectedSceneNodesCount00);
   tolua_function(tolua_S,"getSelectedSceneNode",tolua_MyLuaBind_scn_ISceneManager_getSelectedSceneNode00);
   tolua_function(tolua_S,"isSelectionListFreezed",tolua_MyLuaBind_scn_ISceneManager_isSelectionListFreezed00);
   tolua_function(tolua_S,"freezeSelectionList",tolua_MyLuaBind_scn_ISceneManager_freezeSelectionList00);
   tolua_function(tolua_S,"unfreezeSelectionList",tolua_MyLuaBind_scn_ISceneManager_unfreezeSelectionList00);
   tolua_function(tolua_S,"setSceneRenderFlag",tolua_MyLuaBind_scn_ISceneManager_setSceneRenderFlag00);
   tolua_function(tolua_S,"getSceneRenderFlag",tolua_MyLuaBind_scn_ISceneManager_getSceneRenderFlag00);
   tolua_function(tolua_S,"getSceneNodeFromScreenCoordinates",tolua_MyLuaBind_scn_ISceneManager_getSceneNodeFromScreenCoordinates00);
   tolua_function(tolua_S,"isSceneEditorStarted",tolua_MyLuaBind_scn_ISceneManager_isSceneEditorStarted00);
   tolua_function(tolua_S,"createSceneNode",tolua_MyLuaBind_scn_ISceneManager_createSceneNode00);
   tolua_function(tolua_S,"cloneSceneNode",tolua_MyLuaBind_scn_ISceneManager_cloneSceneNode00);
   tolua_function(tolua_S,"reloadSceneNode",tolua_MyLuaBind_scn_ISceneManager_reloadSceneNode00);
   tolua_function(tolua_S,"loadSceneNode",tolua_MyLuaBind_scn_ISceneManager_loadSceneNode00);
   tolua_function(tolua_S,"saveSceneNode",tolua_MyLuaBind_scn_ISceneManager_saveSceneNode00);
   tolua_function(tolua_S,"getMaterialXMLText",tolua_MyLuaBind_scn_ISceneManager_getMaterialXMLText00);
   tolua_function(tolua_S,"findMeshFileName",tolua_MyLuaBind_scn_ISceneManager_findMeshFileName00);
   tolua_function(tolua_S,"findMeshFullFileName",tolua_MyLuaBind_scn_ISceneManager_findMeshFullFileName00);
   tolua_function(tolua_S,"findMesh",tolua_MyLuaBind_scn_ISceneManager_findMesh00);
   tolua_function(tolua_S,"onStartSceneEditor",tolua_MyLuaBind_scn_ISceneManager_onStartSceneEditor00);
   tolua_function(tolua_S,"onStopSceneEditor",tolua_MyLuaBind_scn_ISceneManager_onStopSceneEditor00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SSceneNodeParameters","scn::SSceneNodeParameters","",tolua_collect_scn__SSceneNodeParameters);
  #else
  tolua_cclass(tolua_S,"SSceneNodeParameters","scn::SSceneNodeParameters","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SSceneNodeParameters");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_scn_SSceneNodeParameters_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_scn_SSceneNodeParameters_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_scn_SSceneNodeParameters_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_scn_SSceneNodeParameters_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_scn_SSceneNodeParameters_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_scn_SSceneNodeParameters_new01_local);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_scn_SSceneNodeParameters_set00);
   tolua_variable(tolua_S,"Name",tolua_get_scn__SSceneNodeParameters_Name,tolua_set_scn__SSceneNodeParameters_Name);
   tolua_variable(tolua_S,"ID",tolua_get_scn__SSceneNodeParameters_ID,tolua_set_scn__SSceneNodeParameters_ID);
   tolua_variable(tolua_S,"ParentID",tolua_get_scn__SSceneNodeParameters_ParentID,tolua_set_scn__SSceneNodeParameters_ParentID);
   tolua_variable(tolua_S,"Type",tolua_get_scn__SSceneNodeParameters_Type,tolua_set_scn__SSceneNodeParameters_Type);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SSceneNodeMaterial","scn::SSceneNodeMaterial","",tolua_collect_scn__SSceneNodeMaterial);
  #else
  tolua_cclass(tolua_S,"SSceneNodeMaterial","scn::SSceneNodeMaterial","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SSceneNodeMaterial");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_scn_SSceneNodeMaterial_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_scn_SSceneNodeMaterial_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_scn_SSceneNodeMaterial_new00_local);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_scn_SSceneNodeMaterial_set00);
   tolua_variable(tolua_S,"Material",tolua_get_scn__SSceneNodeMaterial_Material,tolua_set_scn__SSceneNodeMaterial_Material);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SSceneNodeTransformation","scn::SSceneNodeTransformation","",tolua_collect_scn__SSceneNodeTransformation);
  #else
  tolua_cclass(tolua_S,"SSceneNodeTransformation","scn::SSceneNodeTransformation","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SSceneNodeTransformation");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_scn_SSceneNodeTransformation_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_scn_SSceneNodeTransformation_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_scn_SSceneNodeTransformation_new00_local);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_scn_SSceneNodeTransformation_set00);
   tolua_variable(tolua_S,"Position",tolua_get_scn__SSceneNodeTransformation_Position,tolua_set_scn__SSceneNodeTransformation_Position);
   tolua_variable(tolua_S,"Rotation",tolua_get_scn__SSceneNodeTransformation_Rotation,tolua_set_scn__SSceneNodeTransformation_Rotation);
   tolua_variable(tolua_S,"Scale",tolua_get_scn__SSceneNodeTransformation_Scale,tolua_set_scn__SSceneNodeTransformation_Scale);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SSceneNodeCommonParams","scn::SSceneNodeCommonParams","",tolua_collect_scn__SSceneNodeCommonParams);
  #else
  tolua_cclass(tolua_S,"SSceneNodeCommonParams","scn::SSceneNodeCommonParams","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SSceneNodeCommonParams");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_scn_SSceneNodeCommonParams_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_scn_SSceneNodeCommonParams_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_scn_SSceneNodeCommonParams_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_scn_SSceneNodeCommonParams_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_scn_SSceneNodeCommonParams_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_scn_SSceneNodeCommonParams_new01_local);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_scn_SSceneNodeCommonParams_set00);
   tolua_variable(tolua_S,"Parameters",tolua_get_scn__SSceneNodeCommonParams_Parameters,tolua_set_scn__SSceneNodeCommonParams_Parameters);
   tolua_variable(tolua_S,"Material",tolua_get_scn__SSceneNodeCommonParams_Material,tolua_set_scn__SSceneNodeCommonParams_Material);
   tolua_variable(tolua_S,"Transformation",tolua_get_scn__SSceneNodeCommonParams_Transformation,tolua_set_scn__SSceneNodeCommonParams_Transformation);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SImposterParameters","scn::SImposterParameters","",tolua_collect_scn__SImposterParameters);
  #else
  tolua_cclass(tolua_S,"SImposterParameters","scn::SImposterParameters","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SImposterParameters");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_scn_SImposterParameters_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_scn_SImposterParameters_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_scn_SImposterParameters_new00_local);
   tolua_function(tolua_S,"getFileName",tolua_MyLuaBind_scn_SImposterParameters_getFileName00);
   tolua_function(tolua_S,"setFileName",tolua_MyLuaBind_scn_SImposterParameters_setFileName00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_scn_SImposterParameters_set00);
   tolua_function(tolua_S,"equal",tolua_MyLuaBind_scn_SImposterParameters_equal00);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_scn_SImposterParameters__eq00);
   tolua_variable(tolua_S,"ShiftCustom",tolua_get_scn__SImposterParameters_ShiftCustom,tolua_set_scn__SImposterParameters_ShiftCustom);
   tolua_variable(tolua_S,"ViewOffset",tolua_get_scn__SImposterParameters_ViewOffset,tolua_set_scn__SImposterParameters_ViewOffset);
   tolua_variable(tolua_S,"Centered",tolua_get_scn__SImposterParameters_Centered,tolua_set_scn__SImposterParameters_Centered);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SImposterCreationParameters","scn::SImposterCreationParameters","",tolua_collect_scn__SImposterCreationParameters);
  #else
  tolua_cclass(tolua_S,"SImposterCreationParameters","scn::SImposterCreationParameters","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SImposterCreationParameters");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_scn_SImposterCreationParameters_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_scn_SImposterCreationParameters_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_scn_SImposterCreationParameters_new00_local);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_scn_SImposterCreationParameters_set00);
   tolua_function(tolua_S,"equal",tolua_MyLuaBind_scn_SImposterCreationParameters_equal00);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_scn_SImposterCreationParameters__eq00);
   tolua_variable(tolua_S,"ViewsCount",tolua_get_scn__SImposterCreationParameters_ViewsCount,tolua_set_scn__SImposterCreationParameters_ViewsCount);
   tolua_variable(tolua_S,"CameraViewScale",tolua_get_scn__SImposterCreationParameters_CameraViewScale,tolua_set_scn__SImposterCreationParameters_CameraViewScale);
   tolua_variable(tolua_S,"SizeScale",tolua_get_scn__SImposterCreationParameters_SizeScale,tolua_set_scn__SImposterCreationParameters_SizeScale);
   tolua_variable(tolua_S,"TextureResolution",tolua_get_scn__SImposterCreationParameters_TextureResolution,tolua_set_scn__SImposterCreationParameters_TextureResolution);
   tolua_variable(tolua_S,"AnimationFrameStep",tolua_get_scn__SImposterCreationParameters_AnimationFrameStep,tolua_set_scn__SImposterCreationParameters_AnimationFrameStep);
   tolua_variable(tolua_S,"OptimalViewAngle",tolua_get_scn__SImposterCreationParameters_OptimalViewAngle,tolua_set_scn__SImposterCreationParameters_OptimalViewAngle);
   tolua_variable(tolua_S,"AmbientColor",tolua_get_scn__SImposterCreationParameters_AmbientColor,tolua_set_scn__SImposterCreationParameters_AmbientColor);
   tolua_variable(tolua_S,"DiffuseColor",tolua_get_scn__SImposterCreationParameters_DiffuseColor,tolua_set_scn__SImposterCreationParameters_DiffuseColor);
   tolua_variable(tolua_S,"SpecularColor",tolua_get_scn__SImposterCreationParameters_SpecularColor,tolua_set_scn__SImposterCreationParameters_SpecularColor);
   tolua_variable(tolua_S,"Compress",tolua_get_scn__SImposterCreationParameters_Compress,tolua_set_scn__SImposterCreationParameters_Compress);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"ISceneNode","scn::ISceneNode","",NULL);
  tolua_beginmodule(tolua_S,"ISceneNode");
   tolua_function(tolua_S,"isLocked",tolua_MyLuaBind_scn_ISceneNode_isLocked00);
   tolua_function(tolua_S,"lockObject",tolua_MyLuaBind_scn_ISceneNode_lockObject00);
   tolua_function(tolua_S,"unlockObject",tolua_MyLuaBind_scn_ISceneNode_unlockObject00);
   tolua_function(tolua_S,"getRenderBuffersCount",tolua_MyLuaBind_scn_ISceneNode_getRenderBuffersCount00);
   tolua_function(tolua_S,"getRenderBuffer",tolua_MyLuaBind_scn_ISceneNode_getRenderBuffer00);
   tolua_function(tolua_S,"getName",tolua_MyLuaBind_scn_ISceneNode_getName00);
   tolua_function(tolua_S,"setName",tolua_MyLuaBind_scn_ISceneNode_setName00);
   tolua_function(tolua_S,"getFileName",tolua_MyLuaBind_scn_ISceneNode_getFileName00);
   tolua_function(tolua_S,"setFileName",tolua_MyLuaBind_scn_ISceneNode_setFileName00);
   tolua_function(tolua_S,"getBoundingBox",tolua_MyLuaBind_scn_ISceneNode_getBoundingBox00);
   tolua_function(tolua_S,"getTransformedBoundingBox",tolua_MyLuaBind_scn_ISceneNode_getTransformedBoundingBox00);
   tolua_function(tolua_S,"isVisible",tolua_MyLuaBind_scn_ISceneNode_isVisible00);
   tolua_function(tolua_S,"setVisible",tolua_MyLuaBind_scn_ISceneNode_setVisible00);
   tolua_function(tolua_S,"getID",tolua_MyLuaBind_scn_ISceneNode_getID00);
   tolua_function(tolua_S,"setID",tolua_MyLuaBind_scn_ISceneNode_setID00);
   tolua_function(tolua_S,"addChild",tolua_MyLuaBind_scn_ISceneNode_addChild00);
   tolua_function(tolua_S,"removeChild",tolua_MyLuaBind_scn_ISceneNode_removeChild00);
   tolua_function(tolua_S,"removeAll",tolua_MyLuaBind_scn_ISceneNode_removeAll00);
   tolua_function(tolua_S,"remove",tolua_MyLuaBind_scn_ISceneNode_remove00);
   tolua_function(tolua_S,"addAnimator",tolua_MyLuaBind_scn_ISceneNode_addAnimator00);
   tolua_function(tolua_S,"removeAnimator",tolua_MyLuaBind_scn_ISceneNode_removeAnimator00);
   tolua_function(tolua_S,"removeAnimators",tolua_MyLuaBind_scn_ISceneNode_removeAnimators00);
   tolua_function(tolua_S,"getMaterial",tolua_MyLuaBind_scn_ISceneNode_getMaterial00);
   tolua_function(tolua_S,"getMaterialsCount",tolua_MyLuaBind_scn_ISceneNode_getMaterialsCount00);
   tolua_function(tolua_S,"setMaterial",tolua_MyLuaBind_scn_ISceneNode_setMaterial00);
   tolua_function(tolua_S,"getScale",tolua_MyLuaBind_scn_ISceneNode_getScale00);
   tolua_function(tolua_S,"getRotation",tolua_MyLuaBind_scn_ISceneNode_getRotation00);
   tolua_function(tolua_S,"getPosition",tolua_MyLuaBind_scn_ISceneNode_getPosition00);
   tolua_function(tolua_S,"setScale",tolua_MyLuaBind_scn_ISceneNode_setScale00);
   tolua_function(tolua_S,"setRotation",tolua_MyLuaBind_scn_ISceneNode_setRotation00);
   tolua_function(tolua_S,"setPosition",tolua_MyLuaBind_scn_ISceneNode_setPosition00);
   tolua_function(tolua_S,"getAbsolutePosition",tolua_MyLuaBind_scn_ISceneNode_getAbsolutePosition00);
   tolua_function(tolua_S,"getAbsoluteTransformation",tolua_MyLuaBind_scn_ISceneNode_getAbsoluteTransformation00);
   tolua_function(tolua_S,"getRelativeTransformation",tolua_MyLuaBind_scn_ISceneNode_getRelativeTransformation00);
   tolua_function(tolua_S,"updateAbsoluteTransformation",tolua_MyLuaBind_scn_ISceneNode_updateAbsoluteTransformation00);
   tolua_function(tolua_S,"storeTransformation",tolua_MyLuaBind_scn_ISceneNode_storeTransformation00);
   tolua_function(tolua_S,"restoreTransformation",tolua_MyLuaBind_scn_ISceneNode_restoreTransformation00);
   tolua_function(tolua_S,"setDebugDataVisible",tolua_MyLuaBind_scn_ISceneNode_setDebugDataVisible00);
   tolua_function(tolua_S,"isDebugDataVisible",tolua_MyLuaBind_scn_ISceneNode_isDebugDataVisible00);
   tolua_function(tolua_S,"setParent",tolua_MyLuaBind_scn_ISceneNode_setParent00);
   tolua_function(tolua_S,"getParent",tolua_MyLuaBind_scn_ISceneNode_getParent00);
   tolua_function(tolua_S,"setParentID",tolua_MyLuaBind_scn_ISceneNode_setParentID00);
   tolua_function(tolua_S,"getParentID",tolua_MyLuaBind_scn_ISceneNode_getParentID00);
   tolua_function(tolua_S,"isMainPlayer",tolua_MyLuaBind_scn_ISceneNode_isMainPlayer00);
   tolua_function(tolua_S,"setIsMainPlayer",tolua_MyLuaBind_scn_ISceneNode_setIsMainPlayer00);
   tolua_function(tolua_S,"attachShadow",tolua_MyLuaBind_scn_ISceneNode_attachShadow00);
   tolua_function(tolua_S,"detachShadow",tolua_MyLuaBind_scn_ISceneNode_detachShadow00);
   tolua_function(tolua_S,"getShadow",tolua_MyLuaBind_scn_ISceneNode_getShadow00);
   tolua_function(tolua_S,"attachCaption",tolua_MyLuaBind_scn_ISceneNode_attachCaption00);
   tolua_function(tolua_S,"attachCaption",tolua_MyLuaBind_scn_ISceneNode_attachCaption01);
   tolua_function(tolua_S,"detachCaption",tolua_MyLuaBind_scn_ISceneNode_detachCaption00);
   tolua_function(tolua_S,"getCaption",tolua_MyLuaBind_scn_ISceneNode_getCaption00);
   tolua_function(tolua_S,"showCaption",tolua_MyLuaBind_scn_ISceneNode_showCaption00);
   tolua_function(tolua_S,"attachDynamicObject",tolua_MyLuaBind_scn_ISceneNode_attachDynamicObject00);
   tolua_function(tolua_S,"detachDynamicObject",tolua_MyLuaBind_scn_ISceneNode_detachDynamicObject00);
   tolua_function(tolua_S,"getDynamicObject",tolua_MyLuaBind_scn_ISceneNode_getDynamicObject00);
   tolua_function(tolua_S,"attachGameNode",tolua_MyLuaBind_scn_ISceneNode_attachGameNode00);
   tolua_function(tolua_S,"detachGameNode",tolua_MyLuaBind_scn_ISceneNode_detachGameNode00);
   tolua_function(tolua_S,"getGameNode",tolua_MyLuaBind_scn_ISceneNode_getGameNode00);
   tolua_function(tolua_S,"attachImposter",tolua_MyLuaBind_scn_ISceneNode_attachImposter00);
   tolua_function(tolua_S,"attachImposter",tolua_MyLuaBind_scn_ISceneNode_attachImposter01);
   tolua_function(tolua_S,"detachImposter",tolua_MyLuaBind_scn_ISceneNode_detachImposter00);
   tolua_function(tolua_S,"getImposter",tolua_MyLuaBind_scn_ISceneNode_getImposter00);
   tolua_function(tolua_S,"getSceneNodeType",tolua_MyLuaBind_scn_ISceneNode_getSceneNodeType00);
   tolua_function(tolua_S,"getCamera",tolua_MyLuaBind_scn_ISceneNode_getCamera00);
   tolua_function(tolua_S,"isRendered",tolua_MyLuaBind_scn_ISceneNode_isRendered00);
   tolua_function(tolua_S,"getImposterParameters",tolua_MyLuaBind_scn_ISceneNode_getImposterParameters00);
   tolua_function(tolua_S,"setImposterParameters",tolua_MyLuaBind_scn_ISceneNode_setImposterParameters00);
   tolua_function(tolua_S,"getImposterCreationParameters",tolua_MyLuaBind_scn_ISceneNode_getImposterCreationParameters00);
   tolua_function(tolua_S,"getParameters",tolua_MyLuaBind_scn_ISceneNode_getParameters00);
   tolua_function(tolua_S,"setParameters",tolua_MyLuaBind_scn_ISceneNode_setParameters00);
   tolua_function(tolua_S,"setParameters",tolua_MyLuaBind_scn_ISceneNode_setParameters01);
   tolua_function(tolua_S,"setParameters",tolua_MyLuaBind_scn_ISceneNode_setParameters02);
   tolua_function(tolua_S,"setParameters",tolua_MyLuaBind_scn_ISceneNode_setParameters03);
   tolua_function(tolua_S,"setOccluder",tolua_MyLuaBind_scn_ISceneNode_setOccluder00);
   tolua_function(tolua_S,"isOccluder",tolua_MyLuaBind_scn_ISceneNode_isOccluder00);
   tolua_function(tolua_S,"getCullingFilter",tolua_MyLuaBind_scn_ISceneNode_getCullingFilter00);
   tolua_function(tolua_S,"setCullingFilter",tolua_MyLuaBind_scn_ISceneNode_setCullingFilter00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_scn_ISceneNode_set00);
   tolua_function(tolua_S,"getSceneCorePropertiesXMLString",tolua_MyLuaBind_scn_ISceneNode_getSceneCorePropertiesXMLString00);
   tolua_function(tolua_S,"getAnimationsCount",tolua_MyLuaBind_scn_ISceneNode_getAnimationsCount00);
   tolua_function(tolua_S,"setCurrentAnimation",tolua_MyLuaBind_scn_ISceneNode_setCurrentAnimation00);
   tolua_function(tolua_S,"getCurrentAnimation",tolua_MyLuaBind_scn_ISceneNode_getCurrentAnimation00);
   tolua_function(tolua_S,"setCurrentAnimationProgress",tolua_MyLuaBind_scn_ISceneNode_setCurrentAnimationProgress00);
   tolua_function(tolua_S,"getCurrentAnimationProgress",tolua_MyLuaBind_scn_ISceneNode_getCurrentAnimationProgress00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"ISceneNodeAnimator","scn::ISceneNodeAnimator","",NULL);
  tolua_beginmodule(tolua_S,"ISceneNodeAnimator");
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"IShadow","scn::IShadow","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"IShadow");
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"ICullingSystem","scn::ICullingSystem","",NULL);
  tolua_beginmodule(tolua_S,"ICullingSystem");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_scn_ICullingSystem_getSingleton00);
   tolua_function(tolua_S,"isCull",tolua_MyLuaBind_scn_ICullingSystem_isCull00);
   tolua_function(tolua_S,"isCull",tolua_MyLuaBind_scn_ICullingSystem_isCull01);
   tolua_function(tolua_S,"isCull",tolua_MyLuaBind_scn_ICullingSystem_isCull02);
   tolua_function(tolua_S,"isCull",tolua_MyLuaBind_scn_ICullingSystem_isCull03);
   tolua_function(tolua_S,"getOccludersCount",tolua_MyLuaBind_scn_ICullingSystem_getOccludersCount00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"IParticleAffector","scn::IParticleAffector","IUnknown",NULL);
  tolua_beginmodule(tolua_S,"IParticleAffector");
   tolua_function(tolua_S,"getType",tolua_MyLuaBind_scn_IParticleAffector_getType00);
   tolua_function(tolua_S,"setEnabled",tolua_MyLuaBind_scn_IParticleAffector_setEnabled00);
   tolua_function(tolua_S,"isEnabled",tolua_MyLuaBind_scn_IParticleAffector_isEnabled00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_scn_IParticleAffector_set00);
   tolua_function(tolua_S,"getAffectTimeMs",tolua_MyLuaBind_scn_IParticleAffector_getAffectTimeMs00);
   tolua_function(tolua_S,"setAffectTimeMs",tolua_MyLuaBind_scn_IParticleAffector_setAffectTimeMs00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IParticleFadeOutAffector","scn::IParticleFadeOutAffector","scn::IParticleAffector",NULL);
  tolua_beginmodule(tolua_S,"IParticleFadeOutAffector");
   tolua_function(tolua_S,"getTargetColor",tolua_MyLuaBind_scn_IParticleFadeOutAffector_getTargetColor00);
   tolua_function(tolua_S,"setTargetColor",tolua_MyLuaBind_scn_IParticleFadeOutAffector_setTargetColor00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IParticleGravityAffector","scn::IParticleGravityAffector","scn::IParticleAffector",NULL);
  tolua_beginmodule(tolua_S,"IParticleGravityAffector");
   tolua_function(tolua_S,"getGravity",tolua_MyLuaBind_scn_IParticleGravityAffector_getGravity00);
   tolua_function(tolua_S,"setGravity",tolua_MyLuaBind_scn_IParticleGravityAffector_setGravity00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IParticleEmitter","scn::IParticleEmitter","IUnknown",NULL);
  tolua_beginmodule(tolua_S,"IParticleEmitter");
   tolua_function(tolua_S,"getType",tolua_MyLuaBind_scn_IParticleEmitter_getType00);
   tolua_function(tolua_S,"isGlobalParticlesTransformation",tolua_MyLuaBind_scn_IParticleEmitter_isGlobalParticlesTransformation00);
   tolua_function(tolua_S,"getParticleSize",tolua_MyLuaBind_scn_IParticleEmitter_getParticleSize00);
   tolua_function(tolua_S,"getDirection",tolua_MyLuaBind_scn_IParticleEmitter_getDirection00);
   tolua_function(tolua_S,"getMinParticlePerSecond",tolua_MyLuaBind_scn_IParticleEmitter_getMinParticlePerSecond00);
   tolua_function(tolua_S,"getMaxParticlePerSecond",tolua_MyLuaBind_scn_IParticleEmitter_getMaxParticlePerSecond00);
   tolua_function(tolua_S,"getMinStartColor",tolua_MyLuaBind_scn_IParticleEmitter_getMinStartColor00);
   tolua_function(tolua_S,"getMaxStartColor",tolua_MyLuaBind_scn_IParticleEmitter_getMaxStartColor00);
   tolua_function(tolua_S,"getMinLifeTime",tolua_MyLuaBind_scn_IParticleEmitter_getMinLifeTime00);
   tolua_function(tolua_S,"getMaxLifeTime",tolua_MyLuaBind_scn_IParticleEmitter_getMaxLifeTime00);
   tolua_function(tolua_S,"getMaxAngleDegrees",tolua_MyLuaBind_scn_IParticleEmitter_getMaxAngleDegrees00);
   tolua_function(tolua_S,"getAppearVolume",tolua_MyLuaBind_scn_IParticleEmitter_getAppearVolume00);
   tolua_function(tolua_S,"getTexture",tolua_MyLuaBind_scn_IParticleEmitter_getTexture00);
   tolua_function(tolua_S,"isEnabled",tolua_MyLuaBind_scn_IParticleEmitter_isEnabled00);
   tolua_function(tolua_S,"setGlobalParticlesTransformation",tolua_MyLuaBind_scn_IParticleEmitter_setGlobalParticlesTransformation00);
   tolua_function(tolua_S,"setParticleSize",tolua_MyLuaBind_scn_IParticleEmitter_setParticleSize00);
   tolua_function(tolua_S,"setDirection",tolua_MyLuaBind_scn_IParticleEmitter_setDirection00);
   tolua_function(tolua_S,"setMinParticlePerSecond",tolua_MyLuaBind_scn_IParticleEmitter_setMinParticlePerSecond00);
   tolua_function(tolua_S,"setMaxParticlePerSecond",tolua_MyLuaBind_scn_IParticleEmitter_setMaxParticlePerSecond00);
   tolua_function(tolua_S,"setMinStartColor",tolua_MyLuaBind_scn_IParticleEmitter_setMinStartColor00);
   tolua_function(tolua_S,"setMaxStartColor",tolua_MyLuaBind_scn_IParticleEmitter_setMaxStartColor00);
   tolua_function(tolua_S,"setMinLifeTime",tolua_MyLuaBind_scn_IParticleEmitter_setMinLifeTime00);
   tolua_function(tolua_S,"setMaxLifeTime",tolua_MyLuaBind_scn_IParticleEmitter_setMaxLifeTime00);
   tolua_function(tolua_S,"setMaxAngleDegrees",tolua_MyLuaBind_scn_IParticleEmitter_setMaxAngleDegrees00);
   tolua_function(tolua_S,"setAppearVolume",tolua_MyLuaBind_scn_IParticleEmitter_setAppearVolume00);
   tolua_function(tolua_S,"setTexture",tolua_MyLuaBind_scn_IParticleEmitter_setTexture00);
   tolua_function(tolua_S,"setEnabled",tolua_MyLuaBind_scn_IParticleEmitter_setEnabled00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_scn_IParticleEmitter_set00);
   tolua_function(tolua_S,"addAffector",tolua_MyLuaBind_scn_IParticleEmitter_addAffector00);
   tolua_function(tolua_S,"removeAffector",tolua_MyLuaBind_scn_IParticleEmitter_removeAffector00);
   tolua_function(tolua_S,"removeAllAffectors",tolua_MyLuaBind_scn_IParticleEmitter_removeAllAffectors00);
   tolua_function(tolua_S,"getAffector",tolua_MyLuaBind_scn_IParticleEmitter_getAffector00);
   tolua_function(tolua_S,"getAffectorsCount",tolua_MyLuaBind_scn_IParticleEmitter_getAffectorsCount00);
   tolua_function(tolua_S,"getParticlesCount",tolua_MyLuaBind_scn_IParticleEmitter_getParticlesCount00);
   tolua_function(tolua_S,"getBoundingBox",tolua_MyLuaBind_scn_IParticleEmitter_getBoundingBox00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IParticleSystemSceneNode","scn::IParticleSystemSceneNode","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"IParticleSystemSceneNode");
   tolua_function(tolua_S,"addEmitter",tolua_MyLuaBind_scn_IParticleSystemSceneNode_addEmitter00);
   tolua_function(tolua_S,"removeEmitter",tolua_MyLuaBind_scn_IParticleSystemSceneNode_removeEmitter00);
   tolua_function(tolua_S,"getEmitter",tolua_MyLuaBind_scn_IParticleSystemSceneNode_getEmitter00);
   tolua_function(tolua_S,"getEmittersCount",tolua_MyLuaBind_scn_IParticleSystemSceneNode_getEmittersCount00);
   tolua_function(tolua_S,"setEnabled",tolua_MyLuaBind_scn_IParticleSystemSceneNode_setEnabled00);
   tolua_function(tolua_S,"getParticlesCount",tolua_MyLuaBind_scn_IParticleSystemSceneNode_getParticlesCount00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"IAnimatedMeshSceneNode","scn::IAnimatedMeshSceneNode","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"IAnimatedMeshSceneNode");
   tolua_function(tolua_S,"getCurrentAnimationFileName",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationFileName00);
   tolua_function(tolua_S,"getCurrentAnimationBeginFrame",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationBeginFrame00);
   tolua_function(tolua_S,"getCurrentAnimationEndFrame",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationEndFrame00);
   tolua_function(tolua_S,"getCurrentAnimationSpeed",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationSpeed00);
   tolua_function(tolua_S,"getCurrentAnimationLoopMode",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getCurrentAnimationLoopMode00);
   tolua_function(tolua_S,"setCurrentAnimationBeginFrame",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationBeginFrame00);
   tolua_function(tolua_S,"setCurrentAnimationEndFrame",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationEndFrame00);
   tolua_function(tolua_S,"setCurrentAnimationSpeed",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationSpeed00);
   tolua_function(tolua_S,"setCurrentAnimationLoopMode",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setCurrentAnimationLoopMode00);
   tolua_function(tolua_S,"getAnimationFileName",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationFileName00);
   tolua_function(tolua_S,"getAnimationBeginFrame",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationBeginFrame00);
   tolua_function(tolua_S,"getAnimationEndFrame",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationEndFrame00);
   tolua_function(tolua_S,"getAnimationSpeed",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationSpeed00);
   tolua_function(tolua_S,"getAnimationLoopMode",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationLoopMode00);
   tolua_function(tolua_S,"setAnimationBeginFrame",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationBeginFrame00);
   tolua_function(tolua_S,"setAnimationEndFrame",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationEndFrame00);
   tolua_function(tolua_S,"setAnimationSpeed",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationSpeed00);
   tolua_function(tolua_S,"setAnimationLoopMode",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationLoopMode00);
   tolua_function(tolua_S,"setAnimationOveralSpeed",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationOveralSpeed00);
   tolua_function(tolua_S,"getAnimationOveralSpeed",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationOveralSpeed00);
   tolua_function(tolua_S,"isAnimationOveralSmooth",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_isAnimationOveralSmooth00);
   tolua_function(tolua_S,"setAnimationOveralSmooth",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimationOveralSmooth00);
   tolua_function(tolua_S,"getAnimationOveralFramesCount",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimationOveralFramesCount00);
   tolua_function(tolua_S,"getAnimatedMesh",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getAnimatedMesh00);
   tolua_function(tolua_S,"setAnimatedMesh",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_setAnimatedMesh00);
   tolua_function(tolua_S,"getMesh",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getMesh00);
   tolua_function(tolua_S,"getMesh",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_getMesh01);
   tolua_function(tolua_S,"attachToBone",tolua_MyLuaBind_scn_IAnimatedMeshSceneNode_attachToBone00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"IMesh","scn::IMesh","IUnknown",NULL);
  tolua_beginmodule(tolua_S,"IMesh");
   tolua_function(tolua_S,"getBoundingBox",tolua_MyLuaBind_scn_IMesh_getBoundingBox00);
   tolua_function(tolua_S,"getMeshType",tolua_MyLuaBind_scn_IMesh_getMeshType00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"SAnimationState","scn::SAnimationState","",NULL);
  tolua_beginmodule(tolua_S,"SAnimationState");
   tolua_variable(tolua_S,"Animation",tolua_get_scn__SAnimationState_Animation,tolua_set_scn__SAnimationState_Animation);
   tolua_variable(tolua_S,"AnimationTime",tolua_get_scn__SAnimationState_AnimationTime,tolua_set_scn__SAnimationState_AnimationTime);
   tolua_variable(tolua_S,"AnimationTimeSec",tolua_get_scn__SAnimationState_AnimationTimeSec,tolua_set_scn__SAnimationState_AnimationTimeSec);
   tolua_variable(tolua_S,"AnimationDurationSec",tolua_get_scn__SAnimationState_AnimationDurationSec,tolua_set_scn__SAnimationState_AnimationDurationSec);
   tolua_variable(tolua_S,"Looped",tolua_get_scn__SAnimationState_Looped,tolua_set_scn__SAnimationState_Looped);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IAnimatedMesh","scn::IAnimatedMesh","IUnknown",NULL);
  tolua_beginmodule(tolua_S,"IAnimatedMesh");
   tolua_function(tolua_S,"getMesh",tolua_MyLuaBind_scn_IAnimatedMesh_getMesh00);
   tolua_function(tolua_S,"getMesh",tolua_MyLuaBind_scn_IAnimatedMesh_getMesh01);
   tolua_function(tolua_S,"getBoundingBox",tolua_MyLuaBind_scn_IAnimatedMesh_getBoundingBox00);
   tolua_function(tolua_S,"recalculateBoundingBox",tolua_MyLuaBind_scn_IAnimatedMesh_recalculateBoundingBox00);
   tolua_function(tolua_S,"getAnimatedMeshType",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimatedMeshType00);
   tolua_function(tolua_S,"getOveralFramesCount",tolua_MyLuaBind_scn_IAnimatedMesh_getOveralFramesCount00);
   tolua_function(tolua_S,"getAnimationFramesCount",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationFramesCount00);
   tolua_function(tolua_S,"getAnimationsCount",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationsCount00);
   tolua_function(tolua_S,"rescaleAnimatedMeshNormals",tolua_MyLuaBind_scn_IAnimatedMesh_rescaleAnimatedMeshNormals00);
   tolua_function(tolua_S,"setCurrentAnimation",tolua_MyLuaBind_scn_IAnimatedMesh_setCurrentAnimation00);
   tolua_function(tolua_S,"getCurrentAnimationIndex",tolua_MyLuaBind_scn_IAnimatedMesh_getCurrentAnimationIndex00);
   tolua_function(tolua_S,"startRegisteringAnimations",tolua_MyLuaBind_scn_IAnimatedMesh_startRegisteringAnimations00);
   tolua_function(tolua_S,"registerAnimation",tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation00);
   tolua_function(tolua_S,"registerAnimation",tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation01);
   tolua_function(tolua_S,"unregisterAnimation",tolua_MyLuaBind_scn_IAnimatedMesh_unregisterAnimation00);
   tolua_function(tolua_S,"swapAnimations",tolua_MyLuaBind_scn_IAnimatedMesh_swapAnimations00);
   tolua_function(tolua_S,"endRegisteringAnimations",tolua_MyLuaBind_scn_IAnimatedMesh_endRegisteringAnimations00);
   tolua_function(tolua_S,"getAnimationFileName",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationFileName00);
   tolua_function(tolua_S,"getAnimationBeginFrame",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationBeginFrame00);
   tolua_function(tolua_S,"getAnimationEndFrame",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationEndFrame00);
   tolua_function(tolua_S,"getAnimationSpeed",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationSpeed00);
   tolua_function(tolua_S,"getAnimationLoopMode",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationLoopMode00);
   tolua_function(tolua_S,"setAnimationBeginFrame",tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationBeginFrame00);
   tolua_function(tolua_S,"setAnimationEndFrame",tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationEndFrame00);
   tolua_function(tolua_S,"setAnimationSpeed",tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationSpeed00);
   tolua_function(tolua_S,"setAnimationLoopMode",tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationLoopMode00);
   tolua_function(tolua_S,"setAnimationOveralSpeed",tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationOveralSpeed00);
   tolua_function(tolua_S,"getAnimationOveralSpeed",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationOveralSpeed00);
   tolua_function(tolua_S,"setAnimationOveralSmooth",tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationOveralSmooth00);
   tolua_function(tolua_S,"isAnimationOveralSmooth",tolua_MyLuaBind_scn_IAnimatedMesh_isAnimationOveralSmooth00);
   tolua_function(tolua_S,"getAnimationTimeSec",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationTimeSec00);
   tolua_function(tolua_S,"getAnimationDurationSec",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationDurationSec00);
   tolua_function(tolua_S,"getAnimationFPS",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationFPS00);
   tolua_function(tolua_S,"setAnimationFPS",tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationFPS00);
   tolua_function(tolua_S,"getAnimationState",tolua_MyLuaBind_scn_IAnimatedMesh_getAnimationState00);
   tolua_function(tolua_S,"updateMesh",tolua_MyLuaBind_scn_IAnimatedMesh_updateMesh00);
   tolua_function(tolua_S,"setAnimationState",tolua_MyLuaBind_scn_IAnimatedMesh_setAnimationState00);
   tolua_function(tolua_S,"isInterpolateAnimation",tolua_MyLuaBind_scn_IAnimatedMesh_isInterpolateAnimation00);
   tolua_function(tolua_S,"startRegisteringAnimations",tolua_MyLuaBind_scn_IAnimatedMesh_startRegisteringAnimations01);
   tolua_function(tolua_S,"registerAnimation",tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation02);
   tolua_function(tolua_S,"registerAnimation",tolua_MyLuaBind_scn_IAnimatedMesh_registerAnimation03);
   tolua_function(tolua_S,"unregisterAnimation",tolua_MyLuaBind_scn_IAnimatedMesh_unregisterAnimation01);
   tolua_function(tolua_S,"swapAnimations",tolua_MyLuaBind_scn_IAnimatedMesh_swapAnimations01);
   tolua_function(tolua_S,"endRegisteringAnimations",tolua_MyLuaBind_scn_IAnimatedMesh_endRegisteringAnimations01);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SBillboardParams","scn::SBillboardParams","",tolua_collect_scn__SBillboardParams);
  #else
  tolua_cclass(tolua_S,"SBillboardParams","scn::SBillboardParams","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SBillboardParams");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_scn_SBillboardParams_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_scn_SBillboardParams_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_scn_SBillboardParams_new00_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_scn_SBillboardParams_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_scn_SBillboardParams_set00);
   tolua_variable(tolua_S,"Size",tolua_get_scn__SBillboardParams_Size,tolua_set_scn__SBillboardParams_Size);
   tolua_variable(tolua_S,"FrameResolution",tolua_get_scn__SBillboardParams_FrameResolution,tolua_set_scn__SBillboardParams_FrameResolution);
   tolua_variable(tolua_S,"AxisAligmentType",tolua_get_scn__SBillboardParams_AxisAligmentType,tolua_set_scn__SBillboardParams_AxisAligmentType);
   tolua_variable(tolua_S,"AlignAxis",tolua_get_scn__SBillboardParams_AlignAxis,tolua_set_scn__SBillboardParams_AlignAxis);
   tolua_variable(tolua_S,"UpAxis",tolua_get_scn__SBillboardParams_UpAxis,tolua_set_scn__SBillboardParams_UpAxis);
   tolua_variable(tolua_S,"FlipWidth",tolua_get_scn__SBillboardParams_FlipWidth,tolua_set_scn__SBillboardParams_FlipWidth);
   tolua_variable(tolua_S,"FlipHeight",tolua_get_scn__SBillboardParams_FlipHeight,tolua_set_scn__SBillboardParams_FlipHeight);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SAnimationFrameParameters","scn::SAnimationFrameParameters","",NULL);
  tolua_beginmodule(tolua_S,"SAnimationFrameParameters");
   tolua_variable(tolua_S,"TimePerFrame",tolua_get_scn__SAnimationFrameParameters_TimePerFrame,tolua_set_scn__SAnimationFrameParameters_TimePerFrame);
   tolua_variable(tolua_S,"Loop",tolua_get_scn__SAnimationFrameParameters_Loop,tolua_set_scn__SAnimationFrameParameters_Loop);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SAnimationFrame","scn::SAnimationFrame","",tolua_collect_scn__SAnimationFrame);
  #else
  tolua_cclass(tolua_S,"SAnimationFrame","scn::SAnimationFrame","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SAnimationFrame");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_scn_SAnimationFrame_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_scn_SAnimationFrame_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_scn_SAnimationFrame_new00_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_scn_SAnimationFrame_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_scn_SAnimationFrame_set00);
   tolua_variable(tolua_S,"Texture",tolua_get_scn__SAnimationFrame_Texture_ptr,tolua_set_scn__SAnimationFrame_Texture_ptr);
   tolua_variable(tolua_S,"TCoords",tolua_get_scn__SAnimationFrame_TCoords,tolua_set_scn__SAnimationFrame_TCoords);
   tolua_variable(tolua_S,"TOffset",tolua_get_scn__SAnimationFrame_TOffset,tolua_set_scn__SAnimationFrame_TOffset);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IBillboardSceneNode","scn::IBillboardSceneNode","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"IBillboardSceneNode");
   tolua_function(tolua_S,"setSize",tolua_MyLuaBind_scn_IBillboardSceneNode_setSize00);
   tolua_function(tolua_S,"getSize",tolua_MyLuaBind_scn_IBillboardSceneNode_getSize00);
   tolua_function(tolua_S,"getBillboardParameters",tolua_MyLuaBind_scn_IBillboardSceneNode_getBillboardParameters00);
   tolua_function(tolua_S,"setBillboardParameters",tolua_MyLuaBind_scn_IBillboardSceneNode_setBillboardParameters00);
   tolua_function(tolua_S,"getAnimationDirectionSetFrame",tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationDirectionSetFrame00);
   tolua_function(tolua_S,"getAnimationFramesParameters",tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationFramesParameters00);
   tolua_function(tolua_S,"getAnimationDirectionSetsCount",tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationDirectionSetsCount00);
   tolua_function(tolua_S,"getAnimationDirectionSetFramesCount",tolua_MyLuaBind_scn_IBillboardSceneNode_getAnimationDirectionSetFramesCount00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"IDummyTransformationSceneNode","scn::IDummyTransformationSceneNode","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"IDummyTransformationSceneNode");
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"IKTreeSceneNode","scn::IKTreeSceneNode","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"IKTreeSceneNode");
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"SLens","scn::SLens","",NULL);
  tolua_beginmodule(tolua_S,"SLens");
   tolua_function(tolua_S,"getTexture",tolua_MyLuaBind_scn_SLens_getTexture00);
   tolua_variable(tolua_S,"spaceConst",tolua_get_scn__SLens_spaceConst,tolua_set_scn__SLens_spaceConst);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"ILensFlareSceneNode","scn::ILensFlareSceneNode","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"ILensFlareSceneNode");
   tolua_function(tolua_S,"getLensCount",tolua_MyLuaBind_scn_ILensFlareSceneNode_getLensCount00);
   tolua_function(tolua_S,"setLens",tolua_MyLuaBind_scn_ILensFlareSceneNode_setLens00);
   tolua_function(tolua_S,"addLens",tolua_MyLuaBind_scn_ILensFlareSceneNode_addLens00);
   tolua_function(tolua_S,"getLens",tolua_MyLuaBind_scn_ILensFlareSceneNode_getLens00);
   tolua_function(tolua_S,"removeLens",tolua_MyLuaBind_scn_ILensFlareSceneNode_removeLens00);
   tolua_function(tolua_S,"clearLens",tolua_MyLuaBind_scn_ILensFlareSceneNode_clearLens00);
   tolua_function(tolua_S,"setCorona",tolua_MyLuaBind_scn_ILensFlareSceneNode_setCorona00);
   tolua_function(tolua_S,"getCorona",tolua_MyLuaBind_scn_ILensFlareSceneNode_getCorona00);
   tolua_function(tolua_S,"setColor",tolua_MyLuaBind_scn_ILensFlareSceneNode_setColor00);
   tolua_function(tolua_S,"getColor",tolua_MyLuaBind_scn_ILensFlareSceneNode_getColor00);
   tolua_function(tolua_S,"setEtalonScreenSize",tolua_MyLuaBind_scn_ILensFlareSceneNode_setEtalonScreenSize00);
   tolua_function(tolua_S,"getEtalonScreenSize",tolua_MyLuaBind_scn_ILensFlareSceneNode_getEtalonScreenSize00);
   tolua_function(tolua_S,"getScreenPosition",tolua_MyLuaBind_scn_ILensFlareSceneNode_getScreenPosition00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"ILightSceneNode","scn::ILightSceneNode","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"ILightSceneNode");
   tolua_function(tolua_S,"getLightParameters",tolua_MyLuaBind_scn_ILightSceneNode_getLightParameters00);
   tolua_function(tolua_S,"setLightParameters",tolua_MyLuaBind_scn_ILightSceneNode_setLightParameters00);
   tolua_function(tolua_S,"getLightedVolumeCenterOffset",tolua_MyLuaBind_scn_ILightSceneNode_getLightedVolumeCenterOffset00);
   tolua_function(tolua_S,"setLightedVolumeCenterOffset",tolua_MyLuaBind_scn_ILightSceneNode_setLightedVolumeCenterOffset00);
   tolua_function(tolua_S,"getLightedVolumeSizeChange",tolua_MyLuaBind_scn_ILightSceneNode_getLightedVolumeSizeChange00);
   tolua_function(tolua_S,"setLightedVolumeSizeChange",tolua_MyLuaBind_scn_ILightSceneNode_setLightedVolumeSizeChange00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"ISkyBoxSceneNode","scn::ISkyBoxSceneNode","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"ISkyBoxSceneNode");
   tolua_function(tolua_S,"setSides",tolua_MyLuaBind_scn_ISkyBoxSceneNode_setSides00);
   tolua_function(tolua_S,"getTopSideTexture",tolua_MyLuaBind_scn_ISkyBoxSceneNode_getTopSideTexture00);
   tolua_function(tolua_S,"getBottomSideTexture",tolua_MyLuaBind_scn_ISkyBoxSceneNode_getBottomSideTexture00);
   tolua_function(tolua_S,"getLeftSideTexture",tolua_MyLuaBind_scn_ISkyBoxSceneNode_getLeftSideTexture00);
   tolua_function(tolua_S,"getRightSideTexture",tolua_MyLuaBind_scn_ISkyBoxSceneNode_getRightSideTexture00);
   tolua_function(tolua_S,"getFrontSideTexture",tolua_MyLuaBind_scn_ISkyBoxSceneNode_getFrontSideTexture00);
   tolua_function(tolua_S,"getBackSideTexture",tolua_MyLuaBind_scn_ISkyBoxSceneNode_getBackSideTexture00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"STileSet","scn::STileSet","",NULL);
  tolua_beginmodule(tolua_S,"STileSet");
   tolua_function(tolua_S,"getSplatMapFileName",tolua_MyLuaBind_scn_STileSet_getSplatMapFileName00);
   tolua_function(tolua_S,"getTile0Texture",tolua_MyLuaBind_scn_STileSet_getTile0Texture00);
   tolua_function(tolua_S,"getTile1Texture",tolua_MyLuaBind_scn_STileSet_getTile1Texture00);
   tolua_function(tolua_S,"getTile2Texture",tolua_MyLuaBind_scn_STileSet_getTile2Texture00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"ITerrainSceneNode","scn::ITerrainSceneNode","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"ITerrainSceneNode");
   tolua_function(tolua_S,"setMaps",tolua_MyLuaBind_scn_ITerrainSceneNode_setMaps00);
   tolua_function(tolua_S,"getHeightMapFileName",tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightMapFileName00);
   tolua_function(tolua_S,"getGridPointSpacing",tolua_MyLuaBind_scn_ITerrainSceneNode_getGridPointSpacing00);
   tolua_function(tolua_S,"getHeightScale",tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightScale00);
   tolua_function(tolua_S,"setHeightScale",tolua_MyLuaBind_scn_ITerrainSceneNode_setHeightScale00);
   tolua_function(tolua_S,"addTileSet",tolua_MyLuaBind_scn_ITerrainSceneNode_addTileSet00);
   tolua_function(tolua_S,"setTileSet",tolua_MyLuaBind_scn_ITerrainSceneNode_setTileSet00);
   tolua_function(tolua_S,"removeTileSet",tolua_MyLuaBind_scn_ITerrainSceneNode_removeTileSet00);
   tolua_function(tolua_S,"getTileSet",tolua_MyLuaBind_scn_ITerrainSceneNode_getTileSet00);
   tolua_function(tolua_S,"getTileSetsCount",tolua_MyLuaBind_scn_ITerrainSceneNode_getTileSetsCount00);
   tolua_function(tolua_S,"getHeightFieldSize",tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightFieldSize00);
   tolua_function(tolua_S,"getCellPosition",tolua_MyLuaBind_scn_ITerrainSceneNode_getCellPosition00);
   tolua_function(tolua_S,"getCellHeight",tolua_MyLuaBind_scn_ITerrainSceneNode_getCellHeight00);
   tolua_function(tolua_S,"getHeight",tolua_MyLuaBind_scn_ITerrainSceneNode_getHeight00);
   tolua_function(tolua_S,"getNormal",tolua_MyLuaBind_scn_ITerrainSceneNode_getNormal00);
   tolua_function(tolua_S,"setTileRepeatNumber",tolua_MyLuaBind_scn_ITerrainSceneNode_setTileRepeatNumber00);
   tolua_function(tolua_S,"getTileRepeatNumber",tolua_MyLuaBind_scn_ITerrainSceneNode_getTileRepeatNumber00);
   tolua_function(tolua_S,"getHeightMapTexture",tolua_MyLuaBind_scn_ITerrainSceneNode_getHeightMapTexture00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scn",0);
 tolua_beginmodule(tolua_S,"scn");
  tolua_cclass(tolua_S,"ITestSceneNode","scn::ITestSceneNode","scn::ISceneNode",NULL);
  tolua_beginmodule(tolua_S,"ITestSceneNode");
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  tolua_cclass(tolua_S,"IGameInventory","game::IGameInventory","",NULL);
  tolua_beginmodule(tolua_S,"IGameInventory");
   tolua_function(tolua_S,"addWeapon",tolua_MyLuaBind_game_IGameInventory_addWeapon00);
   tolua_function(tolua_S,"getWeapon",tolua_MyLuaBind_game_IGameInventory_getWeapon00);
   tolua_function(tolua_S,"getWeaponsCount",tolua_MyLuaBind_game_IGameInventory_getWeaponsCount00);
   tolua_function(tolua_S,"getWeaponsSubCount",tolua_MyLuaBind_game_IGameInventory_getWeaponsSubCount00);
   tolua_function(tolua_S,"removeWeapon",tolua_MyLuaBind_game_IGameInventory_removeWeapon00);
   tolua_function(tolua_S,"addItem",tolua_MyLuaBind_game_IGameInventory_addItem00);
   tolua_function(tolua_S,"getItem",tolua_MyLuaBind_game_IGameInventory_getItem00);
   tolua_function(tolua_S,"getItemsCount",tolua_MyLuaBind_game_IGameInventory_getItemsCount00);
   tolua_function(tolua_S,"removeItem",tolua_MyLuaBind_game_IGameInventory_removeItem00);
   tolua_function(tolua_S,"addObject",tolua_MyLuaBind_game_IGameInventory_addObject00);
   tolua_function(tolua_S,"getObject",tolua_MyLuaBind_game_IGameInventory_getObject00);
   tolua_function(tolua_S,"getObjectsCount",tolua_MyLuaBind_game_IGameInventory_getObjectsCount00);
   tolua_function(tolua_S,"removeObject",tolua_MyLuaBind_game_IGameInventory_removeObject00);
   tolua_function(tolua_S,"removeAllObjects",tolua_MyLuaBind_game_IGameInventory_removeAllObjects00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SSceneProps","game::SSceneProps","",tolua_collect_game__SSceneProps);
  #else
  tolua_cclass(tolua_S,"SSceneProps","game::SSceneProps","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SSceneProps");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SSceneProps_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SSceneProps_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SSceneProps_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SSceneProps_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SSceneProps_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SSceneProps_new01_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_game_SSceneProps_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_game_SSceneProps_set00);
   tolua_array(tolua_S,"LODDistances",tolua_get_MyLuaBind_game_SSceneProps_LODDistances,tolua_set_MyLuaBind_game_SSceneProps_LODDistances);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SVideoProps","game::SVideoProps","",tolua_collect_game__SVideoProps);
  #else
  tolua_cclass(tolua_S,"SVideoProps","game::SVideoProps","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SVideoProps");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SVideoProps_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SVideoProps_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SVideoProps_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SVideoProps_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SVideoProps_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SVideoProps_new01_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_game_SVideoProps_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_game_SVideoProps_set00);
   tolua_variable(tolua_S,"ShadowColor",tolua_get_game__SVideoProps_ShadowColor,tolua_set_game__SVideoProps_ShadowColor);
   tolua_variable(tolua_S,"DistanceFog",tolua_get_game__SVideoProps_DistanceFog,tolua_set_game__SVideoProps_DistanceFog);
   tolua_variable(tolua_S,"GroundFogColor",tolua_get_game__SVideoProps_GroundFogColor,tolua_set_game__SVideoProps_GroundFogColor);
   tolua_variable(tolua_S,"GlobalAmbientColor",tolua_get_game__SVideoProps_GlobalAmbientColor,tolua_set_game__SVideoProps_GlobalAmbientColor);
   tolua_variable(tolua_S,"GlobalLight",tolua_get_game__SVideoProps_GlobalLight,tolua_set_game__SVideoProps_GlobalLight);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SGameSceneProps","game::SGameSceneProps","",tolua_collect_game__SGameSceneProps);
  #else
  tolua_cclass(tolua_S,"SGameSceneProps","game::SGameSceneProps","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SGameSceneProps");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SGameSceneProps_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SGameSceneProps_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SGameSceneProps_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SGameSceneProps_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SGameSceneProps_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SGameSceneProps_new01_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_game_SGameSceneProps_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_game_SGameSceneProps_set00);
   tolua_variable(tolua_S,"Scene",tolua_get_game__SGameSceneProps_Scene,tolua_set_game__SGameSceneProps_Scene);
   tolua_variable(tolua_S,"Video",tolua_get_game__SGameSceneProps_Video,tolua_set_game__SGameSceneProps_Video);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IGameManager","game::IGameManager","",NULL);
  tolua_beginmodule(tolua_S,"IGameManager");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_game_IGameManager_getSingleton00);
   tolua_function(tolua_S,"getGameNode",tolua_MyLuaBind_game_IGameManager_getGameNode00);
   tolua_function(tolua_S,"getGameNodesCount",tolua_MyLuaBind_game_IGameManager_getGameNodesCount00);
   tolua_function(tolua_S,"getActiveGameNodesCount",tolua_MyLuaBind_game_IGameManager_getActiveGameNodesCount00);
   tolua_function(tolua_S,"getGameNode",tolua_MyLuaBind_game_IGameManager_getGameNode01);
   tolua_function(tolua_S,"getGameNodesCount",tolua_MyLuaBind_game_IGameManager_getGameNodesCount01);
   tolua_function(tolua_S,"getGameNodeType",tolua_MyLuaBind_game_IGameManager_getGameNodeType00);
   tolua_function(tolua_S,"getGameNodeIndex",tolua_MyLuaBind_game_IGameManager_getGameNodeIndex00);
   tolua_function(tolua_S,"applyGameNodeCommonParams",tolua_MyLuaBind_game_IGameManager_applyGameNodeCommonParams00);
   tolua_function(tolua_S,"addGameUnitsFormation",tolua_MyLuaBind_game_IGameManager_addGameUnitsFormation00);
   tolua_function(tolua_S,"getGameUnitsFormationFromID",tolua_MyLuaBind_game_IGameManager_getGameUnitsFormationFromID00);
   tolua_function(tolua_S,"addGameNode",tolua_MyLuaBind_game_IGameManager_addGameNode00);
   tolua_function(tolua_S,"createGameNode",tolua_MyLuaBind_game_IGameManager_createGameNode00);
   tolua_function(tolua_S,"cloneGameNode",tolua_MyLuaBind_game_IGameManager_cloneGameNode00);
   tolua_function(tolua_S,"reloadGameNode",tolua_MyLuaBind_game_IGameManager_reloadGameNode00);
   tolua_function(tolua_S,"loadGameNode",tolua_MyLuaBind_game_IGameManager_loadGameNode00);
   tolua_function(tolua_S,"loadGameNode",tolua_MyLuaBind_game_IGameManager_loadGameNode01);
   tolua_function(tolua_S,"loadGameNode",tolua_MyLuaBind_game_IGameManager_loadGameNode02);
   tolua_function(tolua_S,"loadGameSceneLater",tolua_MyLuaBind_game_IGameManager_loadGameSceneLater00);
   tolua_function(tolua_S,"loadGameScene",tolua_MyLuaBind_game_IGameManager_loadGameScene00);
   tolua_function(tolua_S,"saveGameScene",tolua_MyLuaBind_game_IGameManager_saveGameScene00);
   tolua_function(tolua_S,"clearGameScene",tolua_MyLuaBind_game_IGameManager_clearGameScene00);
   tolua_function(tolua_S,"getGameSceneFileName",tolua_MyLuaBind_game_IGameManager_getGameSceneFileName00);
   tolua_function(tolua_S,"setCurrentMainPlayer",tolua_MyLuaBind_game_IGameManager_setCurrentMainPlayer00);
   tolua_function(tolua_S,"getMainPlayersCount",tolua_MyLuaBind_game_IGameManager_getMainPlayersCount00);
   tolua_function(tolua_S,"getMainPlayerGameNode",tolua_MyLuaBind_game_IGameManager_getMainPlayerGameNode00);
   tolua_function(tolua_S,"getMainPlayerSceneNode",tolua_MyLuaBind_game_IGameManager_getMainPlayerSceneNode00);
   tolua_function(tolua_S,"getMainPlayerDynamicObject",tolua_MyLuaBind_game_IGameManager_getMainPlayerDynamicObject00);
   tolua_function(tolua_S,"getMainPlayerCamera",tolua_MyLuaBind_game_IGameManager_getMainPlayerCamera00);
   tolua_function(tolua_S,"getGameNodeFromScreenCoordinates",tolua_MyLuaBind_game_IGameManager_getGameNodeFromScreenCoordinates00);
   tolua_function(tolua_S,"stopGame",tolua_MyLuaBind_game_IGameManager_stopGame00);
   tolua_function(tolua_S,"startGame",tolua_MyLuaBind_game_IGameManager_startGame00);
   tolua_function(tolua_S,"doGame",tolua_MyLuaBind_game_IGameManager_doGame00);
   tolua_function(tolua_S,"preRenderFrame",tolua_MyLuaBind_game_IGameManager_preRenderFrame00);
   tolua_function(tolua_S,"postRenderFrame",tolua_MyLuaBind_game_IGameManager_postRenderFrame00);
   tolua_function(tolua_S,"showMessageBox",tolua_MyLuaBind_game_IGameManager_showMessageBox00);
   tolua_function(tolua_S,"getDynamicPS",tolua_MyLuaBind_game_IGameManager_getDynamicPS00);
   tolua_function(tolua_S,"getGamePS",tolua_MyLuaBind_game_IGameManager_getGamePS00);
   tolua_function(tolua_S,"getScriptPS",tolua_MyLuaBind_game_IGameManager_getScriptPS00);
   tolua_function(tolua_S,"isGameStarted",tolua_MyLuaBind_game_IGameManager_isGameStarted00);
   tolua_function(tolua_S,"setGameScriptFileName",tolua_MyLuaBind_game_IGameManager_setGameScriptFileName00);
   tolua_function(tolua_S,"getGameScriptFileName",tolua_MyLuaBind_game_IGameManager_getGameScriptFileName00);
   tolua_function(tolua_S,"addSoundTrack",tolua_MyLuaBind_game_IGameManager_addSoundTrack00);
   tolua_function(tolua_S,"removeAllSoundTracks",tolua_MyLuaBind_game_IGameManager_removeAllSoundTracks00);
   tolua_function(tolua_S,"getSoundTrack",tolua_MyLuaBind_game_IGameManager_getSoundTrack00);
   tolua_function(tolua_S,"getSoundTracksCount",tolua_MyLuaBind_game_IGameManager_getSoundTracksCount00);
   tolua_function(tolua_S,"playSoundTrack",tolua_MyLuaBind_game_IGameManager_playSoundTrack00);
   tolua_function(tolua_S,"pauseSoundTrack",tolua_MyLuaBind_game_IGameManager_pauseSoundTrack00);
   tolua_function(tolua_S,"stopAllSoundTracks",tolua_MyLuaBind_game_IGameManager_stopAllSoundTracks00);
   tolua_function(tolua_S,"setSoundTracksVolume",tolua_MyLuaBind_game_IGameManager_setSoundTracksVolume00);
   tolua_function(tolua_S,"getSoundTracksVolume",tolua_MyLuaBind_game_IGameManager_getSoundTracksVolume00);
   tolua_function(tolua_S,"setSoundEffectsVolume",tolua_MyLuaBind_game_IGameManager_setSoundEffectsVolume00);
   tolua_function(tolua_S,"getSoundEffectsVolume",tolua_MyLuaBind_game_IGameManager_getSoundEffectsVolume00);
   tolua_function(tolua_S,"getGameNodeParams",tolua_MyLuaBind_game_IGameManager_getGameNodeParams00);
   tolua_function(tolua_S,"applyGameNodeParams",tolua_MyLuaBind_game_IGameManager_applyGameNodeParams00);
   tolua_function(tolua_S,"createPathFindTask",tolua_MyLuaBind_game_IGameManager_createPathFindTask00);
   tolua_function(tolua_S,"getGameSceneProps",tolua_MyLuaBind_game_IGameManager_getGameSceneProps00);
   tolua_function(tolua_S,"setGameSceneProps",tolua_MyLuaBind_game_IGameManager_setGameSceneProps00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SGameNodeParams","game::SGameNodeParams","",tolua_collect_game__SGameNodeParams);
  #else
  tolua_cclass(tolua_S,"SGameNodeParams","game::SGameNodeParams","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SGameNodeParams");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SGameNodeParams_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SGameNodeParams_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SGameNodeParams_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SGameNodeParams_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SGameNodeParams_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SGameNodeParams_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SGameNodeParams_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SGameNodeParams_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SGameNodeParams_new02_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SGameNodeParams_new03);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SGameNodeParams_new03_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SGameNodeParams_new03_local);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_game_SGameNodeParams_set00);
   tolua_function(tolua_S,".eq",tolua_MyLuaBind_game_SGameNodeParams__eq00);
   tolua_variable(tolua_S,"ClassName",tolua_get_game__SGameNodeParams_ClassName,tolua_set_game__SGameNodeParams_ClassName);
   tolua_variable(tolua_S,"Type",tolua_get_game__SGameNodeParams_Type,tolua_set_game__SGameNodeParams_Type);
   tolua_variable(tolua_S,"MovSpeed",tolua_get_game__SGameNodeParams_MovSpeed,tolua_set_game__SGameNodeParams_MovSpeed);
   tolua_variable(tolua_S,"RotSpeed",tolua_get_game__SGameNodeParams_RotSpeed,tolua_set_game__SGameNodeParams_RotSpeed);
   tolua_variable(tolua_S,"Life",tolua_get_game__SGameNodeParams_Life,tolua_set_game__SGameNodeParams_Life);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SGameNodeCommonParams","game::SGameNodeCommonParams","",tolua_collect_game__SGameNodeCommonParams);
  #else
  tolua_cclass(tolua_S,"SGameNodeCommonParams","game::SGameNodeCommonParams","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SGameNodeCommonParams");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SGameNodeCommonParams_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SGameNodeCommonParams_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SGameNodeCommonParams_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SGameNodeCommonParams_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SGameNodeCommonParams_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SGameNodeCommonParams_new01_local);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_game_SGameNodeCommonParams_set00);
   tolua_variable(tolua_S,"Scene",tolua_get_game__SGameNodeCommonParams_Scene,tolua_set_game__SGameNodeCommonParams_Scene);
   tolua_variable(tolua_S,"Dynamic",tolua_get_game__SGameNodeCommonParams_Dynamic,tolua_set_game__SGameNodeCommonParams_Dynamic);
   tolua_variable(tolua_S,"Game",tolua_get_game__SGameNodeCommonParams_Game,tolua_set_game__SGameNodeCommonParams_Game);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IGameNode","game::IGameNode","",NULL);
  tolua_beginmodule(tolua_S,"IGameNode");
   tolua_function(tolua_S,"getInventory",tolua_MyLuaBind_game_IGameNode_getInventory00);
   tolua_function(tolua_S,"getGameNodeType",tolua_MyLuaBind_game_IGameNode_getGameNodeType00);
   tolua_function(tolua_S,"getParameters",tolua_MyLuaBind_game_IGameNode_getParameters00);
   tolua_function(tolua_S,"setParameters",tolua_MyLuaBind_game_IGameNode_setParameters00);
   tolua_function(tolua_S,"getSceneNode",tolua_MyLuaBind_game_IGameNode_getSceneNode00);
   tolua_function(tolua_S,"getDynamicObject",tolua_MyLuaBind_game_IGameNode_getDynamicObject00);
   tolua_function(tolua_S,"isMainPlayer",tolua_MyLuaBind_game_IGameNode_isMainPlayer00);
   tolua_function(tolua_S,"addSoundEffect",tolua_MyLuaBind_game_IGameNode_addSoundEffect00);
   tolua_function(tolua_S,"playSoundEffect",tolua_MyLuaBind_game_IGameNode_playSoundEffect00);
   tolua_function(tolua_S,"stopSoundEffect",tolua_MyLuaBind_game_IGameNode_stopSoundEffect00);
   tolua_function(tolua_S,"isPlayingSoundEffect",tolua_MyLuaBind_game_IGameNode_isPlayingSoundEffect00);
   tolua_function(tolua_S,"getSoundEffect",tolua_MyLuaBind_game_IGameNode_getSoundEffect00);
   tolua_function(tolua_S,"getSoundEffectsCount",tolua_MyLuaBind_game_IGameNode_getSoundEffectsCount00);
   tolua_function(tolua_S,"removeAllSoundEffects",tolua_MyLuaBind_game_IGameNode_removeAllSoundEffects00);
   tolua_function(tolua_S,"removeSoundEffect",tolua_MyLuaBind_game_IGameNode_removeSoundEffect00);
   tolua_function(tolua_S,"setSoundEffectsVolume",tolua_MyLuaBind_game_IGameNode_setSoundEffectsVolume00);
   tolua_function(tolua_S,"setAutoCreatedFlag",tolua_MyLuaBind_game_IGameNode_setAutoCreatedFlag00);
   tolua_function(tolua_S,"isAutoCreated",tolua_MyLuaBind_game_IGameNode_isAutoCreated00);
   tolua_function(tolua_S,"getLastDislocation",tolua_MyLuaBind_game_IGameNode_getLastDislocation00);
   tolua_function(tolua_S,"getDislocation",tolua_MyLuaBind_game_IGameNode_getDislocation00);
   tolua_function(tolua_S,"getLastOrientation",tolua_MyLuaBind_game_IGameNode_getLastOrientation00);
   tolua_function(tolua_S,"getOrientation",tolua_MyLuaBind_game_IGameNode_getOrientation00);
   tolua_function(tolua_S,"getTransformation",tolua_MyLuaBind_game_IGameNode_getTransformation00);
   tolua_function(tolua_S,"getMoveDir",tolua_MyLuaBind_game_IGameNode_getMoveDir00);
   tolua_function(tolua_S,"getBoundingBox",tolua_MyLuaBind_game_IGameNode_getBoundingBox00);
   tolua_function(tolua_S,"getTransformedBBox",tolua_MyLuaBind_game_IGameNode_getTransformedBBox00);
   tolua_function(tolua_S,"getTransformedBBoxCenter",tolua_MyLuaBind_game_IGameNode_getTransformedBBoxCenter00);
   tolua_function(tolua_S,"getNodeSphereRadius",tolua_MyLuaBind_game_IGameNode_getNodeSphereRadius00);
   tolua_function(tolua_S,"getMoveSpeed",tolua_MyLuaBind_game_IGameNode_getMoveSpeed00);
   tolua_function(tolua_S,"getGameClassName",tolua_MyLuaBind_game_IGameNode_getGameClassName00);
   tolua_function(tolua_S,"isEnabled",tolua_MyLuaBind_game_IGameNode_isEnabled00);
   tolua_function(tolua_S,"setEnabled",tolua_MyLuaBind_game_IGameNode_setEnabled00);
   tolua_function(tolua_S,"isRendered",tolua_MyLuaBind_game_IGameNode_isRendered00);
   tolua_function(tolua_S,"isGaming",tolua_MyLuaBind_game_IGameNode_isGaming00);
   tolua_function(tolua_S,"getAnimation",tolua_MyLuaBind_game_IGameNode_getAnimation00);
   tolua_function(tolua_S,"getAnimationProgress",tolua_MyLuaBind_game_IGameNode_getAnimationProgress00);
   tolua_function(tolua_S,"isDead",tolua_MyLuaBind_game_IGameNode_isDead00);
   tolua_function(tolua_S,"isLive",tolua_MyLuaBind_game_IGameNode_isLive00);
   tolua_function(tolua_S,"addLife",tolua_MyLuaBind_game_IGameNode_addLife00);
   tolua_function(tolua_S,"getLife",tolua_MyLuaBind_game_IGameNode_getLife00);
   tolua_function(tolua_S,"setLife",tolua_MyLuaBind_game_IGameNode_setLife00);
   tolua_function(tolua_S,"setMaxLife",tolua_MyLuaBind_game_IGameNode_setMaxLife00);
   tolua_function(tolua_S,"getMaxLife",tolua_MyLuaBind_game_IGameNode_getMaxLife00);
   tolua_function(tolua_S,"update",tolua_MyLuaBind_game_IGameNode_update00);
   tolua_function(tolua_S,"getGameCommonParams",tolua_MyLuaBind_game_IGameNode_getGameCommonParams00);
   tolua_function(tolua_S,"updateGameCommonParams",tolua_MyLuaBind_game_IGameNode_updateGameCommonParams00);
   tolua_function(tolua_S,"getWarSide",tolua_MyLuaBind_game_IGameNode_getWarSide00);
   tolua_function(tolua_S,"getSceneCorePropertiesXMLString",tolua_MyLuaBind_game_IGameNode_getSceneCorePropertiesXMLString00);
   tolua_function(tolua_S,"getDynamicCorePropertiesXMLString",tolua_MyLuaBind_game_IGameNode_getDynamicCorePropertiesXMLString00);
   tolua_function(tolua_S,"getGameCorePropertiesXMLString",tolua_MyLuaBind_game_IGameNode_getGameCorePropertiesXMLString00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SGameNodeAIParams","game::SGameNodeAIParams","",tolua_collect_game__SGameNodeAIParams);
  #else
  tolua_cclass(tolua_S,"SGameNodeAIParams","game::SGameNodeAIParams","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SGameNodeAIParams");
   tolua_variable(tolua_S,"MeleAttackRange",tolua_get_game__SGameNodeAIParams_MeleAttackRange,tolua_set_game__SGameNodeAIParams_MeleAttackRange);
   tolua_variable(tolua_S,"MeleAttackDamage",tolua_get_game__SGameNodeAIParams_MeleAttackDamage,tolua_set_game__SGameNodeAIParams_MeleAttackDamage);
   tolua_variable(tolua_S,"MeleAttackAngle",tolua_get_game__SGameNodeAIParams_MeleAttackAngle,tolua_set_game__SGameNodeAIParams_MeleAttackAngle);
   tolua_variable(tolua_S,"FireAttackHorizMaxAngle",tolua_get_game__SGameNodeAIParams_FireAttackHorizMaxAngle,tolua_set_game__SGameNodeAIParams_FireAttackHorizMaxAngle);
   tolua_variable(tolua_S,"FireAttackVertMaxAngle",tolua_get_game__SGameNodeAIParams_FireAttackVertMaxAngle,tolua_set_game__SGameNodeAIParams_FireAttackVertMaxAngle);
   tolua_variable(tolua_S,"Armor",tolua_get_game__SGameNodeAIParams_Armor,tolua_set_game__SGameNodeAIParams_Armor);
   tolua_variable(tolua_S,"Power",tolua_get_game__SGameNodeAIParams_Power,tolua_set_game__SGameNodeAIParams_Power);
   tolua_variable(tolua_S,"Dexterity",tolua_get_game__SGameNodeAIParams_Dexterity,tolua_set_game__SGameNodeAIParams_Dexterity);
   tolua_variable(tolua_S,"Accuracy",tolua_get_game__SGameNodeAIParams_Accuracy,tolua_set_game__SGameNodeAIParams_Accuracy);
   tolua_variable(tolua_S,"StandReadyMaxTimeMs",tolua_get_game__SGameNodeAIParams_StandReadyMaxTimeMs,tolua_set_game__SGameNodeAIParams_StandReadyMaxTimeMs);
   tolua_variable(tolua_S,"ViewDist",tolua_get_game__SGameNodeAIParams_ViewDist,tolua_set_game__SGameNodeAIParams_ViewDist);
   tolua_variable(tolua_S,"MemoryTime",tolua_get_game__SGameNodeAIParams_MemoryTime,tolua_set_game__SGameNodeAIParams_MemoryTime);
   tolua_variable(tolua_S,"FriendlyDamageCoeff",tolua_get_game__SGameNodeAIParams_FriendlyDamageCoeff,tolua_set_game__SGameNodeAIParams_FriendlyDamageCoeff);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SGameNodeAIParams_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SGameNodeAIParams_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SGameNodeAIParams_new00_local);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IGameNodeAI","game::IGameNodeAI","game::IGameNode",NULL);
  tolua_beginmodule(tolua_S,"IGameNodeAI");
   tolua_function(tolua_S,"addToFormation",tolua_MyLuaBind_game_IGameNodeAI_addToFormation00);
   tolua_function(tolua_S,"removeFromFormation",tolua_MyLuaBind_game_IGameNodeAI_removeFromFormation00);
   tolua_function(tolua_S,"getFormation",tolua_MyLuaBind_game_IGameNodeAI_getFormation00);
   tolua_function(tolua_S,"inFormation",tolua_MyLuaBind_game_IGameNodeAI_inFormation00);
   tolua_function(tolua_S,"isCanSee",tolua_MyLuaBind_game_IGameNodeAI_isCanSee00);
   tolua_function(tolua_S,"addLife",tolua_MyLuaBind_game_IGameNodeAI_addLife00);
   tolua_function(tolua_S,"isReadyToAttack",tolua_MyLuaBind_game_IGameNodeAI_isReadyToAttack00);
   tolua_function(tolua_S,"isDead",tolua_MyLuaBind_game_IGameNodeAI_isDead00);
   tolua_function(tolua_S,"setState",tolua_MyLuaBind_game_IGameNodeAI_setState00);
   tolua_function(tolua_S,"getState",tolua_MyLuaBind_game_IGameNodeAI_getState00);
   tolua_function(tolua_S,"getParametersAI",tolua_MyLuaBind_game_IGameNodeAI_getParametersAI00);
   tolua_function(tolua_S,"setParametersAI",tolua_MyLuaBind_game_IGameNodeAI_setParametersAI00);
   tolua_function(tolua_S,"bindWeapon",tolua_MyLuaBind_game_IGameNodeAI_bindWeapon00);
   tolua_function(tolua_S,"selectWeapon",tolua_MyLuaBind_game_IGameNodeAI_selectWeapon00);
   tolua_function(tolua_S,"selectPrevWeapon",tolua_MyLuaBind_game_IGameNodeAI_selectPrevWeapon00);
   tolua_function(tolua_S,"selectNextWeapon",tolua_MyLuaBind_game_IGameNodeAI_selectNextWeapon00);
   tolua_function(tolua_S,"getSelectedWeaponNumber",tolua_MyLuaBind_game_IGameNodeAI_getSelectedWeaponNumber00);
   tolua_function(tolua_S,"aimWeaponByRay",tolua_MyLuaBind_game_IGameNodeAI_aimWeaponByRay00);
   tolua_function(tolua_S,"aimWeaponAtPos",tolua_MyLuaBind_game_IGameNodeAI_aimWeaponAtPos00);
   tolua_function(tolua_S,"fireWeapon",tolua_MyLuaBind_game_IGameNodeAI_fireWeapon00);
   tolua_function(tolua_S,"isFiring",tolua_MyLuaBind_game_IGameNodeAI_isFiring00);
   tolua_function(tolua_S,"getFireCount",tolua_MyLuaBind_game_IGameNodeAI_getFireCount00);
   tolua_function(tolua_S,"update",tolua_MyLuaBind_game_IGameNodeAI_update00);
   tolua_function(tolua_S,"getLookDir",tolua_MyLuaBind_game_IGameNodeAI_getLookDir00);
   tolua_function(tolua_S,"getRightDir",tolua_MyLuaBind_game_IGameNodeAI_getRightDir00);
   tolua_function(tolua_S,"getTopDir",tolua_MyLuaBind_game_IGameNodeAI_getTopDir00);
   tolua_function(tolua_S,"moveByVec",tolua_MyLuaBind_game_IGameNodeAI_moveByVec00);
   tolua_function(tolua_S,"moveToPos",tolua_MyLuaBind_game_IGameNodeAI_moveToPos00);
   tolua_function(tolua_S,"pushByForce",tolua_MyLuaBind_game_IGameNodeAI_pushByForce00);
   tolua_function(tolua_S,"pushToPos",tolua_MyLuaBind_game_IGameNodeAI_pushToPos00);
   tolua_function(tolua_S,"pushInDir",tolua_MyLuaBind_game_IGameNodeAI_pushInDir00);
   tolua_function(tolua_S,"orientInHorizDir",tolua_MyLuaBind_game_IGameNodeAI_orientInHorizDir00);
   tolua_function(tolua_S,"orientByAngles",tolua_MyLuaBind_game_IGameNodeAI_orientByAngles00);
   tolua_function(tolua_S,"getWarSide",tolua_MyLuaBind_game_IGameNodeAI_getWarSide00);
   tolua_function(tolua_S,"isGaming",tolua_MyLuaBind_game_IGameNodeAI_isGaming00);
   tolua_function(tolua_S,"isWarWith",tolua_MyLuaBind_game_IGameNodeAI_isWarWith00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  tolua_cclass(tolua_S,"IGameNodeItem","game::IGameNodeItem","game::IGameNode",NULL);
  tolua_beginmodule(tolua_S,"IGameNodeItem");
   tolua_function(tolua_S,"setItemName",tolua_MyLuaBind_game_IGameNodeItem_setItemName00);
   tolua_function(tolua_S,"setItemKeyName",tolua_MyLuaBind_game_IGameNodeItem_setItemKeyName00);
   tolua_function(tolua_S,"setItemShortDescr",tolua_MyLuaBind_game_IGameNodeItem_setItemShortDescr00);
   tolua_function(tolua_S,"setItemDescr",tolua_MyLuaBind_game_IGameNodeItem_setItemDescr00);
   tolua_function(tolua_S,"setItemImageName",tolua_MyLuaBind_game_IGameNodeItem_setItemImageName00);
   tolua_function(tolua_S,"getItemName",tolua_MyLuaBind_game_IGameNodeItem_getItemName00);
   tolua_function(tolua_S,"getItemKeyName",tolua_MyLuaBind_game_IGameNodeItem_getItemKeyName00);
   tolua_function(tolua_S,"getItemShortDescr",tolua_MyLuaBind_game_IGameNodeItem_getItemShortDescr00);
   tolua_function(tolua_S,"getItemDescr",tolua_MyLuaBind_game_IGameNodeItem_getItemDescr00);
   tolua_function(tolua_S,"getItemImageName",tolua_MyLuaBind_game_IGameNodeItem_getItemImageName00);
   tolua_function(tolua_S,"collectToInventory",tolua_MyLuaBind_game_IGameNodeItem_collectToInventory00);
   tolua_function(tolua_S,"throwFromInventory",tolua_MyLuaBind_game_IGameNodeItem_throwFromInventory00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  tolua_cclass(tolua_S,"IGameNodeMainPlayer","game::IGameNodeMainPlayer","game::IGameNodeAI",NULL);
  tolua_beginmodule(tolua_S,"IGameNodeMainPlayer");
   tolua_function(tolua_S,"getCameraStylesCount",tolua_MyLuaBind_game_IGameNodeMainPlayer_getCameraStylesCount00);
   tolua_function(tolua_S,"setCameraStyle",tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraStyle00);
   tolua_function(tolua_S,"setCameraStyle",tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraStyle01);
   tolua_function(tolua_S,"setCameraAutoZoom",tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraAutoZoom00);
   tolua_function(tolua_S,"isCameraAutoZoom",tolua_MyLuaBind_game_IGameNodeMainPlayer_isCameraAutoZoom00);
   tolua_function(tolua_S,"setCameraZoom",tolua_MyLuaBind_game_IGameNodeMainPlayer_setCameraZoom00);
   tolua_function(tolua_S,"getCameraZoom",tolua_MyLuaBind_game_IGameNodeMainPlayer_getCameraZoom00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SWeaponParameters","game::SWeaponParameters","",tolua_collect_game__SWeaponParameters);
  #else
  tolua_cclass(tolua_S,"SWeaponParameters","game::SWeaponParameters","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SWeaponParameters");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SWeaponParameters_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SWeaponParameters_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SWeaponParameters_new00_local);
   tolua_variable(tolua_S,"FirePerSecond",tolua_get_game__SWeaponParameters_FirePerSecond,tolua_set_game__SWeaponParameters_FirePerSecond);
   tolua_variable(tolua_S,"Mass",tolua_get_game__SWeaponParameters_Mass,tolua_set_game__SWeaponParameters_Mass);
   tolua_variable(tolua_S,"SelectSpeed",tolua_get_game__SWeaponParameters_SelectSpeed,tolua_set_game__SWeaponParameters_SelectSpeed);
   tolua_variable(tolua_S,"WaitBeforeFire",tolua_get_game__SWeaponParameters_WaitBeforeFire,tolua_set_game__SWeaponParameters_WaitBeforeFire);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SWeaponBulletParameters","game::SWeaponBulletParameters","",tolua_collect_game__SWeaponBulletParameters);
  #else
  tolua_cclass(tolua_S,"SWeaponBulletParameters","game::SWeaponBulletParameters","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SWeaponBulletParameters");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SWeaponBulletParameters_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SWeaponBulletParameters_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SWeaponBulletParameters_new00_local);
   tolua_variable(tolua_S,"MaxAmmoCount",tolua_get_game__SWeaponBulletParameters_MaxAmmoCount,tolua_set_game__SWeaponBulletParameters_MaxAmmoCount);
   tolua_variable(tolua_S,"AutoFeelBulletsPerSecond",tolua_get_game__SWeaponBulletParameters_AutoFeelBulletsPerSecond,tolua_set_game__SWeaponBulletParameters_AutoFeelBulletsPerSecond);
   tolua_variable(tolua_S,"KeyName",tolua_get_game__SWeaponBulletParameters_KeyName,tolua_set_game__SWeaponBulletParameters_KeyName);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SBulletParameters","game::SBulletParameters","",tolua_collect_game__SBulletParameters);
  #else
  tolua_cclass(tolua_S,"SBulletParameters","game::SBulletParameters","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SBulletParameters");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_game_SBulletParameters_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_game_SBulletParameters_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_game_SBulletParameters_new00_local);
   tolua_variable(tolua_S,"MaxFlyTime",tolua_get_game__SBulletParameters_MaxFlyTime,tolua_set_game__SBulletParameters_MaxFlyTime);
   tolua_variable(tolua_S,"Damage",tolua_get_game__SBulletParameters_Damage,tolua_set_game__SBulletParameters_Damage);
   tolua_variable(tolua_S,"Mass",tolua_get_game__SBulletParameters_Mass,tolua_set_game__SBulletParameters_Mass);
   tolua_variable(tolua_S,"Range",tolua_get_game__SBulletParameters_Range,tolua_set_game__SBulletParameters_Range);
   tolua_variable(tolua_S,"Dispersion",tolua_get_game__SBulletParameters_Dispersion,tolua_set_game__SBulletParameters_Dispersion);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IGameNodeWeapon","game::IGameNodeWeapon","",NULL);
  tolua_beginmodule(tolua_S,"IGameNodeWeapon");
   tolua_function(tolua_S,"setFlashRadius",tolua_MyLuaBind_game_IGameNodeWeapon_setFlashRadius00);
   tolua_function(tolua_S,"getFlashRadius",tolua_MyLuaBind_game_IGameNodeWeapon_getFlashRadius00);
   tolua_function(tolua_S,"setFlashColor",tolua_MyLuaBind_game_IGameNodeWeapon_setFlashColor00);
   tolua_function(tolua_S,"getFlashColor",tolua_MyLuaBind_game_IGameNodeWeapon_getFlashColor00);
   tolua_function(tolua_S,"setFirePoint",tolua_MyLuaBind_game_IGameNodeWeapon_setFirePoint00);
   tolua_function(tolua_S,"getFirePoint",tolua_MyLuaBind_game_IGameNodeWeapon_getFirePoint00);
   tolua_function(tolua_S,"bindBullet",tolua_MyLuaBind_game_IGameNodeWeapon_bindBullet00);
   tolua_function(tolua_S,"getBulletsCount",tolua_MyLuaBind_game_IGameNodeWeapon_getBulletsCount00);
   tolua_function(tolua_S,"bindFireEffect",tolua_MyLuaBind_game_IGameNodeWeapon_bindFireEffect00);
   tolua_function(tolua_S,"startFire",tolua_MyLuaBind_game_IGameNodeWeapon_startFire00);
   tolua_function(tolua_S,"stopFire",tolua_MyLuaBind_game_IGameNodeWeapon_stopFire00);
   tolua_function(tolua_S,"isFiring",tolua_MyLuaBind_game_IGameNodeWeapon_isFiring00);
   tolua_function(tolua_S,"fire",tolua_MyLuaBind_game_IGameNodeWeapon_fire00);
   tolua_function(tolua_S,"aimAtPos",tolua_MyLuaBind_game_IGameNodeWeapon_aimAtPos00);
   tolua_function(tolua_S,"aimByDir",tolua_MyLuaBind_game_IGameNodeWeapon_aimByDir00);
   tolua_function(tolua_S,"aimByRay",tolua_MyLuaBind_game_IGameNodeWeapon_aimByRay00);
   tolua_function(tolua_S,"setAimedPos",tolua_MyLuaBind_game_IGameNodeWeapon_setAimedPos00);
   tolua_function(tolua_S,"getWeaponParameters",tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponParameters00);
   tolua_function(tolua_S,"getBulletParameters",tolua_MyLuaBind_game_IGameNodeWeapon_getBulletParameters00);
   tolua_function(tolua_S,"getWeaponBulletParameters",tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponBulletParameters00);
   tolua_function(tolua_S,"getOwner",tolua_MyLuaBind_game_IGameNodeWeapon_getOwner00);
   tolua_function(tolua_S,"setOwner",tolua_MyLuaBind_game_IGameNodeWeapon_setOwner00);
   tolua_function(tolua_S,"select",tolua_MyLuaBind_game_IGameNodeWeapon_select00);
   tolua_function(tolua_S,"deSelect",tolua_MyLuaBind_game_IGameNodeWeapon_deSelect00);
   tolua_function(tolua_S,"getFireCount",tolua_MyLuaBind_game_IGameNodeWeapon_getFireCount00);
   tolua_function(tolua_S,"chooseBullet",tolua_MyLuaBind_game_IGameNodeWeapon_chooseBullet00);
   tolua_function(tolua_S,"getChoosedBulletIndex",tolua_MyLuaBind_game_IGameNodeWeapon_getChoosedBulletIndex00);
   tolua_function(tolua_S,"getBulletIndexByKeyName",tolua_MyLuaBind_game_IGameNodeWeapon_getBulletIndexByKeyName00);
   tolua_function(tolua_S,"feelBulletAmmo",tolua_MyLuaBind_game_IGameNodeWeapon_feelBulletAmmo00);
   tolua_function(tolua_S,"getBulletAmmoCount",tolua_MyLuaBind_game_IGameNodeWeapon_getBulletAmmoCount00);
   tolua_function(tolua_S,"getBulletMaxAmmoCount",tolua_MyLuaBind_game_IGameNodeWeapon_getBulletMaxAmmoCount00);
   tolua_function(tolua_S,"getFireRange",tolua_MyLuaBind_game_IGameNodeWeapon_getFireRange00);
   tolua_function(tolua_S,"getBindedBoneName",tolua_MyLuaBind_game_IGameNodeWeapon_getBindedBoneName00);
   tolua_function(tolua_S,"setBindedBoneName",tolua_MyLuaBind_game_IGameNodeWeapon_setBindedBoneName00);
   tolua_function(tolua_S,"setFlashLightPosition",tolua_MyLuaBind_game_IGameNodeWeapon_setFlashLightPosition00);
   tolua_function(tolua_S,"getFlashLightPosition",tolua_MyLuaBind_game_IGameNodeWeapon_getFlashLightPosition00);
   tolua_function(tolua_S,"setWeaponEnabled",tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponEnabled00);
   tolua_function(tolua_S,"isWeaponEnabled",tolua_MyLuaBind_game_IGameNodeWeapon_isWeaponEnabled00);
   tolua_function(tolua_S,"setWeaponImageName",tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponImageName00);
   tolua_function(tolua_S,"getWeaponImageName",tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponImageName00);
   tolua_function(tolua_S,"setWeaponSelectedImageName",tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponSelectedImageName00);
   tolua_function(tolua_S,"getWeaponSelectedImageName",tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponSelectedImageName00);
   tolua_function(tolua_S,"setWeaponItemKeyName",tolua_MyLuaBind_game_IGameNodeWeapon_setWeaponItemKeyName00);
   tolua_function(tolua_S,"getWeaponItemKeyName",tolua_MyLuaBind_game_IGameNodeWeapon_getWeaponItemKeyName00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  tolua_cclass(tolua_S,"IGameUnitsFormation","game::IGameUnitsFormation","game::IGameNodeAI",NULL);
  tolua_beginmodule(tolua_S,"IGameUnitsFormation");
   tolua_function(tolua_S,"addUnit",tolua_MyLuaBind_game_IGameUnitsFormation_addUnit00);
   tolua_function(tolua_S,"removeUnit",tolua_MyLuaBind_game_IGameUnitsFormation_removeUnit00);
   tolua_function(tolua_S,"removeAllUnits",tolua_MyLuaBind_game_IGameUnitsFormation_removeAllUnits00);
   tolua_function(tolua_S,"getUnit",tolua_MyLuaBind_game_IGameUnitsFormation_getUnit00);
   tolua_function(tolua_S,"getUnitsCount",tolua_MyLuaBind_game_IGameUnitsFormation_getUnitsCount00);
   tolua_function(tolua_S,"getUnitsMaxCount",tolua_MyLuaBind_game_IGameUnitsFormation_getUnitsMaxCount00);
   tolua_function(tolua_S,"canAddOneMoreUnit",tolua_MyLuaBind_game_IGameUnitsFormation_canAddOneMoreUnit00);
   tolua_function(tolua_S,"getFormationID",tolua_MyLuaBind_game_IGameUnitsFormation_getFormationID00);
   tolua_function(tolua_S,"setFormationID",tolua_MyLuaBind_game_IGameUnitsFormation_setFormationID00);
   tolua_function(tolua_S,"getCommander",tolua_MyLuaBind_game_IGameUnitsFormation_getCommander00);
   tolua_function(tolua_S,"getFormationState",tolua_MyLuaBind_game_IGameUnitsFormation_getFormationState00);
   tolua_function(tolua_S,"getDimension",tolua_MyLuaBind_game_IGameUnitsFormation_getDimension00);
   tolua_function(tolua_S,"setDimension",tolua_MyLuaBind_game_IGameUnitsFormation_setDimension00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  tolua_cclass(tolua_S,"IPathFindTask","game::IPathFindTask","",NULL);
  tolua_beginmodule(tolua_S,"IPathFindTask");
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  tolua_cclass(tolua_S,"IGameTasksManager","game::IGameTasksManager","",NULL);
  tolua_beginmodule(tolua_S,"IGameTasksManager");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_game_IGameTasksManager_getSingleton00);
   tolua_function(tolua_S,"getGameTasksCount",tolua_MyLuaBind_game_IGameTasksManager_getGameTasksCount00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  tolua_cclass(tolua_S,"IGameEventsDispatcher","game::IGameEventsDispatcher","",NULL);
  tolua_beginmodule(tolua_S,"IGameEventsDispatcher");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_game_IGameEventsDispatcher_getSingleton00);
   tolua_function(tolua_S,"getGameEventsCount",tolua_MyLuaBind_game_IGameEventsDispatcher_getGameEventsCount00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"game",0);
 tolua_beginmodule(tolua_S,"game");
  tolua_cclass(tolua_S,"IGameAIModule","game::IGameAIModule","",NULL);
  tolua_beginmodule(tolua_S,"IGameAIModule");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_game_IGameAIModule_getSingleton00);
   tolua_function(tolua_S,"getGameAIEventsCount",tolua_MyLuaBind_game_IGameAIModule_getGameAIEventsCount00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"img",0);
 tolua_beginmodule(tolua_S,"img");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SColor","img::SColor","",tolua_collect_img__SColor);
  #else
  tolua_cclass(tolua_S,"SColor","img::SColor","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SColor");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_img_SColor_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_img_SColor_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_img_SColor_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_img_SColor_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_img_SColor_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_img_SColor_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_img_SColor_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_img_SColor_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_img_SColor_new02_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_img_SColor_new03);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_img_SColor_new03_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_img_SColor_new03_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_img_SColor_new04);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_img_SColor_new04_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_img_SColor_new04_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_img_SColor_delete00);
   tolua_function(tolua_S,"getAlpha",tolua_MyLuaBind_img_SColor_getAlpha00);
   tolua_function(tolua_S,"getRed",tolua_MyLuaBind_img_SColor_getRed00);
   tolua_function(tolua_S,"getGreen",tolua_MyLuaBind_img_SColor_getGreen00);
   tolua_function(tolua_S,"getBlue",tolua_MyLuaBind_img_SColor_getBlue00);
   tolua_function(tolua_S,"setAlpha",tolua_MyLuaBind_img_SColor_setAlpha00);
   tolua_function(tolua_S,"setRed",tolua_MyLuaBind_img_SColor_setRed00);
   tolua_function(tolua_S,"setGreen",tolua_MyLuaBind_img_SColor_setGreen00);
   tolua_function(tolua_S,"setBlue",tolua_MyLuaBind_img_SColor_setBlue00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_img_SColor_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_img_SColor_set01);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_img_SColor_set02);
   tolua_function(tolua_S,"getInterpolated",tolua_MyLuaBind_img_SColor_getInterpolated00);
   tolua_variable(tolua_S,"color",tolua_get_img__SColor_color,tolua_set_img__SColor_color);
   tolua_variable(tolua_S,"blue",tolua_get_img__SColor_unsigned_blue,tolua_set_img__SColor_unsigned_blue);
   tolua_variable(tolua_S,"green",tolua_get_img__SColor_unsigned_green,tolua_set_img__SColor_unsigned_green);
   tolua_variable(tolua_S,"red",tolua_get_img__SColor_unsigned_red,tolua_set_img__SColor_unsigned_red);
   tolua_variable(tolua_S,"alpha",tolua_get_img__SColor_unsigned_alpha,tolua_set_img__SColor_unsigned_alpha);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SColorf","img::SColorf","",tolua_collect_img__SColorf);
  #else
  tolua_cclass(tolua_S,"SColorf","img::SColorf","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SColorf");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_img_SColorf_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_img_SColorf_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_img_SColorf_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_img_SColorf_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_img_SColorf_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_img_SColorf_new01_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_img_SColorf_new02);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_img_SColorf_new02_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_img_SColorf_new02_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_img_SColorf_new03);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_img_SColorf_new03_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_img_SColorf_new03_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_img_SColorf_new04);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_img_SColorf_new04_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_img_SColorf_new04_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_img_SColorf_delete00);
   tolua_variable(tolua_S,"r",tolua_get_img__SColorf_r,tolua_set_img__SColorf_r);
   tolua_variable(tolua_S,"g",tolua_get_img__SColorf_g,tolua_set_img__SColorf_g);
   tolua_variable(tolua_S,"b",tolua_get_img__SColorf_b,tolua_set_img__SColorf_b);
   tolua_variable(tolua_S,"a",tolua_get_img__SColorf_a,tolua_set_img__SColorf_a);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_img_SColorf_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_img_SColorf_set01);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_img_SColorf_set02);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_img_SColorf_set03);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"img",0);
 tolua_beginmodule(tolua_S,"img");
  tolua_cclass(tolua_S,"IImage","img::IImage","",NULL);
  tolua_beginmodule(tolua_S,"IImage");
   tolua_function(tolua_S,"getDimension",tolua_MyLuaBind_img_IImage_getDimension00);
   tolua_function(tolua_S,"getPixel",tolua_MyLuaBind_img_IImage_getPixel00);
   tolua_function(tolua_S,"setPixel",tolua_MyLuaBind_img_IImage_setPixel00);
   tolua_function(tolua_S,"operate",tolua_MyLuaBind_img_IImage_operate00);
   tolua_function(tolua_S,"blendWith",tolua_MyLuaBind_img_IImage_blendWith00);
   tolua_function(tolua_S,"smoothingFilter",tolua_MyLuaBind_img_IImage_smoothingFilter00);
   tolua_function(tolua_S,"stampingFilter",tolua_MyLuaBind_img_IImage_stampingFilter00);
   tolua_function(tolua_S,"getColorFormat",tolua_MyLuaBind_img_IImage_getColorFormat00);
   tolua_function(tolua_S,"convertTo",tolua_MyLuaBind_img_IImage_convertTo00);
   tolua_function(tolua_S,"copyTo",tolua_MyLuaBind_img_IImage_copyTo00);
   tolua_function(tolua_S,"copyTo",tolua_MyLuaBind_img_IImage_copyTo01);
   tolua_function(tolua_S,"fill",tolua_MyLuaBind_img_IImage_fill00);
   tolua_function(tolua_S,"floodFill",tolua_MyLuaBind_img_IImage_floodFill00);
   tolua_function(tolua_S,"drawBorder",tolua_MyLuaBind_img_IImage_drawBorder00);
   tolua_function(tolua_S,"drawBorder",tolua_MyLuaBind_img_IImage_drawBorder01);
   tolua_function(tolua_S,"copyTo",tolua_MyLuaBind_img_IImage_copyTo02);
   tolua_function(tolua_S,"resizeTo",tolua_MyLuaBind_img_IImage_resizeTo00);
   tolua_function(tolua_S,"makeColorKey",tolua_MyLuaBind_img_IImage_makeColorKey00);
   tolua_function(tolua_S,"makeColorKey",tolua_MyLuaBind_img_IImage_makeColorKey01);
   tolua_function(tolua_S,"makeNormalMap",tolua_MyLuaBind_img_IImage_makeNormalMap00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"img",0);
 tolua_beginmodule(tolua_S,"img");
  tolua_cclass(tolua_S,"IImageLibrary","img::IImageLibrary","",NULL);
  tolua_beginmodule(tolua_S,"IImageLibrary");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_img_IImageLibrary_getSingleton00);
   tolua_function(tolua_S,"addImage",tolua_MyLuaBind_img_IImageLibrary_addImage00);
   tolua_function(tolua_S,"getImage",tolua_MyLuaBind_img_IImageLibrary_getImage00);
   tolua_function(tolua_S,"findImage",tolua_MyLuaBind_img_IImageLibrary_findImage00);
   tolua_function(tolua_S,"findImageFileName",tolua_MyLuaBind_img_IImageLibrary_findImageFileName00);
   tolua_function(tolua_S,"findImageFullFileName",tolua_MyLuaBind_img_IImageLibrary_findImageFullFileName00);
   tolua_function(tolua_S,"removeImage",tolua_MyLuaBind_img_IImageLibrary_removeImage00);
   tolua_function(tolua_S,"clearUnusedImageCache",tolua_MyLuaBind_img_IImageLibrary_clearUnusedImageCache00);
   tolua_function(tolua_S,"saveImageToFile",tolua_MyLuaBind_img_IImageLibrary_saveImageToFile00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"MyCEGUI",0);
 tolua_beginmodule(tolua_S,"MyCEGUI");
  tolua_function(tolua_S,"create",tolua_MyLuaBind_MyCEGUI_create00);
  tolua_function(tolua_S,"onEvent",tolua_MyLuaBind_MyCEGUI_onEvent00);
  tolua_function(tolua_S,"registerForRendering",tolua_MyLuaBind_MyCEGUI_registerForRendering00);
  tolua_function(tolua_S,"destroy",tolua_MyLuaBind_MyCEGUI_destroy00);
  tolua_function(tolua_S,"setWindowTextUtf8",tolua_MyLuaBind_MyCEGUI_setWindowTextUtf800);
  tolua_function(tolua_S,"setListboxItemTextUtf8",tolua_MyLuaBind_MyCEGUI_setListboxItemTextUtf800);
  tolua_function(tolua_S,"getTexture",tolua_MyLuaBind_MyCEGUI_getTexture00);
  tolua_function(tolua_S,"setTexture",tolua_MyLuaBind_MyCEGUI_setTexture00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"vid",0);
 tolua_beginmodule(tolua_S,"vid");
  tolua_cclass(tolua_S,"ITexture","vid::ITexture","",NULL);
  tolua_beginmodule(tolua_S,"ITexture");
   tolua_function(tolua_S,"lock",tolua_MyLuaBind_vid_ITexture_lock00);
   tolua_function(tolua_S,"unlock",tolua_MyLuaBind_vid_ITexture_unlock00);
   tolua_function(tolua_S,"getOriginalSize",tolua_MyLuaBind_vid_ITexture_getOriginalSize00);
   tolua_function(tolua_S,"getSize",tolua_MyLuaBind_vid_ITexture_getSize00);
   tolua_function(tolua_S,"getColorFormat",tolua_MyLuaBind_vid_ITexture_getColorFormat00);
   tolua_function(tolua_S,"getType",tolua_MyLuaBind_vid_ITexture_getType00);
   tolua_function(tolua_S,"getFormat",tolua_MyLuaBind_vid_ITexture_getFormat00);
   tolua_function(tolua_S,"hasMipMaps",tolua_MyLuaBind_vid_ITexture_hasMipMaps00);
   tolua_function(tolua_S,"getMaxMipMapLevels",tolua_MyLuaBind_vid_ITexture_getMaxMipMapLevels00);
   tolua_function(tolua_S,"isCompressed",tolua_MyLuaBind_vid_ITexture_isCompressed00);
   tolua_function(tolua_S,"isRenderTarget",tolua_MyLuaBind_vid_ITexture_isRenderTarget00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"vid",0);
 tolua_beginmodule(tolua_S,"vid");
  tolua_cclass(tolua_S,"IVideoDriver","vid::IVideoDriver","",NULL);
  tolua_beginmodule(tolua_S,"IVideoDriver");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_vid_IVideoDriver_getSingleton00);
   tolua_function(tolua_S,"setRenderPath",tolua_MyLuaBind_vid_IVideoDriver_setRenderPath00);
   tolua_function(tolua_S,"getRenderPath",tolua_MyLuaBind_vid_IVideoDriver_getRenderPath00);
   tolua_function(tolua_S,"getBackColorFormat",tolua_MyLuaBind_vid_IVideoDriver_getBackColorFormat00);
   tolua_function(tolua_S,"clearDepth",tolua_MyLuaBind_vid_IVideoDriver_clearDepth00);
   tolua_function(tolua_S,"clearStencil",tolua_MyLuaBind_vid_IVideoDriver_clearStencil00);
   tolua_function(tolua_S,"clearColor",tolua_MyLuaBind_vid_IVideoDriver_clearColor00);
   tolua_function(tolua_S,"clearColor",tolua_MyLuaBind_vid_IVideoDriver_clearColor01);
   tolua_function(tolua_S,"setColorMask",tolua_MyLuaBind_vid_IVideoDriver_setColorMask00);
   tolua_function(tolua_S,"setColorMask",tolua_MyLuaBind_vid_IVideoDriver_setColorMask01);
   tolua_function(tolua_S,"getColorMask",tolua_MyLuaBind_vid_IVideoDriver_getColorMask00);
   tolua_function(tolua_S,"setBackgroundColor",tolua_MyLuaBind_vid_IVideoDriver_setBackgroundColor00);
   tolua_function(tolua_S,"getBackgroundColor",tolua_MyLuaBind_vid_IVideoDriver_getBackgroundColor00);
   tolua_function(tolua_S,"render2DRect",tolua_MyLuaBind_vid_IVideoDriver_render2DRect00);
   tolua_function(tolua_S,"makeScreenShotTexture",tolua_MyLuaBind_vid_IVideoDriver_makeScreenShotTexture00);
   tolua_function(tolua_S,"makeScreenShotImage",tolua_MyLuaBind_vid_IVideoDriver_makeScreenShotImage00);
   tolua_function(tolua_S,"beginRendering",tolua_MyLuaBind_vid_IVideoDriver_beginRendering00);
   tolua_function(tolua_S,"renderAll",tolua_MyLuaBind_vid_IVideoDriver_renderAll00);
   tolua_function(tolua_S,"renderPass",tolua_MyLuaBind_vid_IVideoDriver_renderPass00);
   tolua_function(tolua_S,"endRendering",tolua_MyLuaBind_vid_IVideoDriver_endRendering00);
   tolua_function(tolua_S,"swapBuffers",tolua_MyLuaBind_vid_IVideoDriver_swapBuffers00);
   tolua_function(tolua_S,"isRendering",tolua_MyLuaBind_vid_IVideoDriver_isRendering00);
   tolua_function(tolua_S,"getDynamicLightsMaximalAmount",tolua_MyLuaBind_vid_IVideoDriver_getDynamicLightsMaximalAmount00);
   tolua_function(tolua_S,"getDynamicLightsCount",tolua_MyLuaBind_vid_IVideoDriver_getDynamicLightsCount00);
   tolua_function(tolua_S,"getScreenSize",tolua_MyLuaBind_vid_IVideoDriver_getScreenSize00);
   tolua_function(tolua_S,"getCurrentFPS",tolua_MyLuaBind_vid_IVideoDriver_getCurrentFPS00);
   tolua_function(tolua_S,"getAverageFPS",tolua_MyLuaBind_vid_IVideoDriver_getAverageFPS00);
   tolua_function(tolua_S,"getRenderedTrianglesCount",tolua_MyLuaBind_vid_IVideoDriver_getRenderedTrianglesCount00);
   tolua_function(tolua_S,"getRenderedTrianglesCount",tolua_MyLuaBind_vid_IVideoDriver_getRenderedTrianglesCount01);
   tolua_function(tolua_S,"getRenderedDIPsCount",tolua_MyLuaBind_vid_IVideoDriver_getRenderedDIPsCount00);
   tolua_function(tolua_S,"getRenderedDIPsCount",tolua_MyLuaBind_vid_IVideoDriver_getRenderedDIPsCount01);
   tolua_function(tolua_S,"getMaximalColorAttachmentsAmount",tolua_MyLuaBind_vid_IVideoDriver_getMaximalColorAttachmentsAmount00);
   tolua_function(tolua_S,"getMaximalTextureUnitsAmount",tolua_MyLuaBind_vid_IVideoDriver_getMaximalTextureUnitsAmount00);
   tolua_function(tolua_S,"getMaximalTextureSize",tolua_MyLuaBind_vid_IVideoDriver_getMaximalTextureSize00);
   tolua_function(tolua_S,"setGlobalAmbientColor",tolua_MyLuaBind_vid_IVideoDriver_setGlobalAmbientColor00);
   tolua_function(tolua_S,"getGlobalAmbientColor",tolua_MyLuaBind_vid_IVideoDriver_getGlobalAmbientColor00);
   tolua_function(tolua_S,"setGlobalLightParams",tolua_MyLuaBind_vid_IVideoDriver_setGlobalLightParams00);
   tolua_function(tolua_S,"getGlobalLightParams",tolua_MyLuaBind_vid_IVideoDriver_getGlobalLightParams00);
   tolua_function(tolua_S,"setShadowColor",tolua_MyLuaBind_vid_IVideoDriver_setShadowColor00);
   tolua_function(tolua_S,"getShadowColor",tolua_MyLuaBind_vid_IVideoDriver_getShadowColor00);
   tolua_function(tolua_S,"getName",tolua_MyLuaBind_vid_IVideoDriver_getName00);
   tolua_function(tolua_S,"getTexture",tolua_MyLuaBind_vid_IVideoDriver_getTexture00);
   tolua_function(tolua_S,"addTexture",tolua_MyLuaBind_vid_IVideoDriver_addTexture00);
   tolua_function(tolua_S,"addTexture",tolua_MyLuaBind_vid_IVideoDriver_addTexture01);
   tolua_function(tolua_S,"addTexture",tolua_MyLuaBind_vid_IVideoDriver_addTexture02);
   tolua_function(tolua_S,"addRenderTargetTexture",tolua_MyLuaBind_vid_IVideoDriver_addRenderTargetTexture00);
   tolua_function(tolua_S,"addRenderTargetTexture",tolua_MyLuaBind_vid_IVideoDriver_addRenderTargetTexture01);
   tolua_function(tolua_S,"removeTexture",tolua_MyLuaBind_vid_IVideoDriver_removeTexture00);
   tolua_function(tolua_S,"getFont",tolua_MyLuaBind_vid_IVideoDriver_getFont00);
   tolua_function(tolua_S,"getBuiltInFont",tolua_MyLuaBind_vid_IVideoDriver_getBuiltInFont00);
   tolua_function(tolua_S,"setTextureCreationFlag",tolua_MyLuaBind_vid_IVideoDriver_setTextureCreationFlag00);
   tolua_function(tolua_S,"getTextureCreationFlag",tolua_MyLuaBind_vid_IVideoDriver_getTextureCreationFlag00);
   tolua_function(tolua_S,"getDriverType",tolua_MyLuaBind_vid_IVideoDriver_getDriverType00);
   tolua_function(tolua_S,"getDriverFamily",tolua_MyLuaBind_vid_IVideoDriver_getDriverFamily00);
   tolua_function(tolua_S,"setBackgroundColor",tolua_MyLuaBind_vid_IVideoDriver_setBackgroundColor01);
   tolua_function(tolua_S,"setBackgroundColor",tolua_MyLuaBind_vid_IVideoDriver_setBackgroundColor02);
   tolua_function(tolua_S,"findTexture",tolua_MyLuaBind_vid_IVideoDriver_findTexture00);
   tolua_function(tolua_S,"findTextureName",tolua_MyLuaBind_vid_IVideoDriver_findTextureName00);
   tolua_function(tolua_S,"setTextureName",tolua_MyLuaBind_vid_IVideoDriver_setTextureName00);
   tolua_function(tolua_S,"setViewPort",tolua_MyLuaBind_vid_IVideoDriver_setViewPort00);
   tolua_function(tolua_S,"getViewPort",tolua_MyLuaBind_vid_IVideoDriver_getViewPort00);
   tolua_function(tolua_S,"setFog",tolua_MyLuaBind_vid_IVideoDriver_setFog00);
   tolua_function(tolua_S,"getFog",tolua_MyLuaBind_vid_IVideoDriver_getFog00);
   tolua_function(tolua_S,"getVideoModeList",tolua_MyLuaBind_vid_IVideoDriver_getVideoModeList00);
   tolua_function(tolua_S,"getScreenCoordinatesFrom3DPosition",tolua_MyLuaBind_vid_IVideoDriver_getScreenCoordinatesFrom3DPosition00);
   tolua_function(tolua_S,"getScreenRelativeCoordinatesFrom3DPosition",tolua_MyLuaBind_vid_IVideoDriver_getScreenRelativeCoordinatesFrom3DPosition00);
   tolua_function(tolua_S,"getScreenProjectionCoordinatesFrom3DPosition",tolua_MyLuaBind_vid_IVideoDriver_getScreenProjectionCoordinatesFrom3DPosition00);
   tolua_function(tolua_S,"getScreenRectFrom3DVolume",tolua_MyLuaBind_vid_IVideoDriver_getScreenRectFrom3DVolume00);
   tolua_function(tolua_S,"register2DImageForRendering",tolua_MyLuaBind_vid_IVideoDriver_register2DImageForRendering00);
   tolua_function(tolua_S,"register2DImageForRendering",tolua_MyLuaBind_vid_IVideoDriver_register2DImageForRendering01);
   tolua_function(tolua_S,"registerGUIImageForRendering",tolua_MyLuaBind_vid_IVideoDriver_registerGUIImageForRendering00);
   tolua_function(tolua_S,"registerGUIRectangleForRendering",tolua_MyLuaBind_vid_IVideoDriver_registerGUIRectangleForRendering00);
   tolua_function(tolua_S,"findGPUProgramFileName",tolua_MyLuaBind_vid_IVideoDriver_findGPUProgramFileName00);
   tolua_function(tolua_S,"findGPUProgramFullFileName",tolua_MyLuaBind_vid_IVideoDriver_findGPUProgramFullFileName00);
   tolua_function(tolua_S,"addGPUProgram",tolua_MyLuaBind_vid_IVideoDriver_addGPUProgram00);
   tolua_function(tolua_S,"getGPUProgram",tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram00);
   tolua_function(tolua_S,"getGPUProgram",tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram01);
   tolua_function(tolua_S,"getGPUProgram",tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram02);
   tolua_function(tolua_S,"getGPUProgram",tolua_MyLuaBind_vid_IVideoDriver_getGPUProgram03);
   tolua_function(tolua_S,"loadGPUProgramsFromDir",tolua_MyLuaBind_vid_IVideoDriver_loadGPUProgramsFromDir00);
   tolua_function(tolua_S,"loadGPUProgramsFromDir",tolua_MyLuaBind_vid_IVideoDriver_loadGPUProgramsFromDir01);
   tolua_function(tolua_S,"compileGPUSources",tolua_MyLuaBind_vid_IVideoDriver_compileGPUSources00);
   tolua_function(tolua_S,"setPolygonFillMode",tolua_MyLuaBind_vid_IVideoDriver_setPolygonFillMode00);
   tolua_function(tolua_S,"getPolygonFillMode",tolua_MyLuaBind_vid_IVideoDriver_getPolygonFillMode00);
   tolua_function(tolua_S,"addRenderTarget",tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget00);
   tolua_function(tolua_S,"addRenderTarget",tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget01);
   tolua_function(tolua_S,"addRenderTarget",tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget02);
   tolua_function(tolua_S,"addRenderTarget",tolua_MyLuaBind_vid_IVideoDriver_addRenderTarget03);
   tolua_function(tolua_S,"removeRenderTarget",tolua_MyLuaBind_vid_IVideoDriver_removeRenderTarget00);
   tolua_function(tolua_S,"setRenderTarget",tolua_MyLuaBind_vid_IVideoDriver_setRenderTarget00);
   tolua_function(tolua_S,"getRenderTarget",tolua_MyLuaBind_vid_IVideoDriver_getRenderTarget00);
   tolua_function(tolua_S,"queryFeature",tolua_MyLuaBind_vid_IVideoDriver_queryFeature00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"vid",0);
 tolua_beginmodule(tolua_S,"vid");
  tolua_cclass(tolua_S,"IVideoModeList","vid::IVideoModeList","",NULL);
  tolua_beginmodule(tolua_S,"IVideoModeList");
   tolua_function(tolua_S,"getVideoModeCount",tolua_MyLuaBind_vid_IVideoModeList_getVideoModeCount00);
   tolua_function(tolua_S,"getVideoModeResolution",tolua_MyLuaBind_vid_IVideoModeList_getVideoModeResolution00);
   tolua_function(tolua_S,"getVideoModeDepth",tolua_MyLuaBind_vid_IVideoModeList_getVideoModeDepth00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"vid",0);
 tolua_beginmodule(tolua_S,"vid");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"STexCoordModifier","vid::STexCoordModifier","",tolua_collect_vid__STexCoordModifier);
  #else
  tolua_cclass(tolua_S,"STexCoordModifier","vid::STexCoordModifier","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"STexCoordModifier");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_vid_STexCoordModifier_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_vid_STexCoordModifier_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_vid_STexCoordModifier_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_vid_STexCoordModifier_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_vid_STexCoordModifier_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_vid_STexCoordModifier_new01_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_vid_STexCoordModifier_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_vid_STexCoordModifier_set00);
   tolua_function(tolua_S,"getType",tolua_MyLuaBind_vid_STexCoordModifier_getType00);
   tolua_function(tolua_S,"setType",tolua_MyLuaBind_vid_STexCoordModifier_setType00);
   tolua_function(tolua_S,"getTurbulent",tolua_MyLuaBind_vid_STexCoordModifier_getTurbulent00);
   tolua_function(tolua_S,"setTurbulent",tolua_MyLuaBind_vid_STexCoordModifier_setTurbulent00);
   tolua_function(tolua_S,"getMatrix00",tolua_MyLuaBind_vid_STexCoordModifier_getMatrix0000);
   tolua_function(tolua_S,"getMatrix01",tolua_MyLuaBind_vid_STexCoordModifier_getMatrix0100);
   tolua_function(tolua_S,"getMatrix10",tolua_MyLuaBind_vid_STexCoordModifier_getMatrix1000);
   tolua_function(tolua_S,"getMatrix11",tolua_MyLuaBind_vid_STexCoordModifier_getMatrix1100);
   tolua_function(tolua_S,"setMatrix",tolua_MyLuaBind_vid_STexCoordModifier_setMatrix00);
   tolua_function(tolua_S,"getTranslate0",tolua_MyLuaBind_vid_STexCoordModifier_getTranslate000);
   tolua_function(tolua_S,"getTranslate1",tolua_MyLuaBind_vid_STexCoordModifier_getTranslate100);
   tolua_function(tolua_S,"setTranslate",tolua_MyLuaBind_vid_STexCoordModifier_setTranslate00);
   tolua_function(tolua_S,"getScale0",tolua_MyLuaBind_vid_STexCoordModifier_getScale000);
   tolua_function(tolua_S,"getScale1",tolua_MyLuaBind_vid_STexCoordModifier_getScale100);
   tolua_function(tolua_S,"setScale",tolua_MyLuaBind_vid_STexCoordModifier_setScale00);
   tolua_function(tolua_S,"getScroll0",tolua_MyLuaBind_vid_STexCoordModifier_getScroll000);
   tolua_function(tolua_S,"getScroll1",tolua_MyLuaBind_vid_STexCoordModifier_getScroll100);
   tolua_function(tolua_S,"setScroll",tolua_MyLuaBind_vid_STexCoordModifier_setScroll00);
   tolua_function(tolua_S,"getRotateSpeed",tolua_MyLuaBind_vid_STexCoordModifier_getRotateSpeed00);
   tolua_function(tolua_S,"setRotateSpeed",tolua_MyLuaBind_vid_STexCoordModifier_setRotateSpeed00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"STextureLayer","vid::STextureLayer","",tolua_collect_vid__STextureLayer);
  #else
  tolua_cclass(tolua_S,"STextureLayer","vid::STextureLayer","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"STextureLayer");
   tolua_function(tolua_S,"set",tolua_MyLuaBind_vid_STextureLayer_set00);
   tolua_function(tolua_S,"getTexture",tolua_MyLuaBind_vid_STextureLayer_getTexture00);
   tolua_function(tolua_S,"setTexture",tolua_MyLuaBind_vid_STextureLayer_setTexture00);
   tolua_function(tolua_S,"setTexture",tolua_MyLuaBind_vid_STextureLayer_setTexture01);
   tolua_function(tolua_S,"setType",tolua_MyLuaBind_vid_STextureLayer_setType00);
   tolua_function(tolua_S,"getType",tolua_MyLuaBind_vid_STextureLayer_getType00);
   tolua_function(tolua_S,"update",tolua_MyLuaBind_vid_STextureLayer_update00);
   tolua_function(tolua_S,"setProjectionParams",tolua_MyLuaBind_vid_STextureLayer_setProjectionParams00);
   tolua_function(tolua_S,"getProjectionWidth",tolua_MyLuaBind_vid_STextureLayer_getProjectionWidth00);
   tolua_function(tolua_S,"getProjectionHeight",tolua_MyLuaBind_vid_STextureLayer_getProjectionHeight00);
   tolua_function(tolua_S,"getProjectionPos",tolua_MyLuaBind_vid_STextureLayer_getProjectionPos00);
   tolua_function(tolua_S,"getProjectionDir",tolua_MyLuaBind_vid_STextureLayer_getProjectionDir00);
   tolua_function(tolua_S,"getProjectionUp",tolua_MyLuaBind_vid_STextureLayer_getProjectionUp00);
   tolua_function(tolua_S,"setTexMatrix",tolua_MyLuaBind_vid_STextureLayer_setTexMatrix00);
   tolua_function(tolua_S,"getTexMatrix",tolua_MyLuaBind_vid_STextureLayer_getTexMatrix00);
   tolua_function(tolua_S,"getTexCoordGen",tolua_MyLuaBind_vid_STextureLayer_getTexCoordGen00);
   tolua_function(tolua_S,"setTexCoordGen",tolua_MyLuaBind_vid_STextureLayer_setTexCoordGen00);
   tolua_function(tolua_S,"getTexCoordModifiersCount",tolua_MyLuaBind_vid_STextureLayer_getTexCoordModifiersCount00);
   tolua_function(tolua_S,"getTexCoordModifier",tolua_MyLuaBind_vid_STextureLayer_getTexCoordModifier00);
   tolua_function(tolua_S,"addTexCoordModifier",tolua_MyLuaBind_vid_STextureLayer_addTexCoordModifier00);
   tolua_function(tolua_S,"removeTexCoordModifier",tolua_MyLuaBind_vid_STextureLayer_removeTexCoordModifier00);
   tolua_function(tolua_S,"setTexCoordModifier",tolua_MyLuaBind_vid_STextureLayer_setTexCoordModifier00);
   tolua_function(tolua_S,"swapTexCoordModifiers",tolua_MyLuaBind_vid_STextureLayer_swapTexCoordModifiers00);
   tolua_function(tolua_S,"isTexCoordAnimated",tolua_MyLuaBind_vid_STextureLayer_isTexCoordAnimated00);
   tolua_function(tolua_S,"getTexRGBScale",tolua_MyLuaBind_vid_STextureLayer_getTexRGBScale00);
   tolua_function(tolua_S,"setTexRGBScale",tolua_MyLuaBind_vid_STextureLayer_setTexRGBScale00);
   tolua_function(tolua_S,"getTexCoordAddr",tolua_MyLuaBind_vid_STextureLayer_getTexCoordAddr00);
   tolua_function(tolua_S,"setTexCoordAddr",tolua_MyLuaBind_vid_STextureLayer_setTexCoordAddr00);
   tolua_function(tolua_S,"getTexCoordChannel",tolua_MyLuaBind_vid_STextureLayer_getTexCoordChannel00);
   tolua_function(tolua_S,"setTexCoordChannel",tolua_MyLuaBind_vid_STextureLayer_setTexCoordChannel00);
   tolua_function(tolua_S,"enableFilter",tolua_MyLuaBind_vid_STextureLayer_enableFilter00);
   tolua_function(tolua_S,"isFilterEnabled",tolua_MyLuaBind_vid_STextureLayer_isFilterEnabled00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SRenderPass","vid::SRenderPass","",NULL);
  tolua_beginmodule(tolua_S,"SRenderPass");
   tolua_function(tolua_S,"set",tolua_MyLuaBind_vid_SRenderPass_set00);
   tolua_function(tolua_S,"update",tolua_MyLuaBind_vid_SRenderPass_update00);
   tolua_function(tolua_S,"getNumber",tolua_MyLuaBind_vid_SRenderPass_getNumber00);
   tolua_array(tolua_S,"Layers",tolua_get_MyLuaBind_vid_SRenderPass_Layers,tolua_set_MyLuaBind_vid_SRenderPass_Layers);
   tolua_function(tolua_S,"getAmbientColor",tolua_MyLuaBind_vid_SRenderPass_getAmbientColor00);
   tolua_function(tolua_S,"setAmbientColor",tolua_MyLuaBind_vid_SRenderPass_setAmbientColor00);
   tolua_function(tolua_S,"getDiffuseColor",tolua_MyLuaBind_vid_SRenderPass_getDiffuseColor00);
   tolua_function(tolua_S,"setDiffuseColor",tolua_MyLuaBind_vid_SRenderPass_setDiffuseColor00);
   tolua_function(tolua_S,"getEmissiveColor",tolua_MyLuaBind_vid_SRenderPass_getEmissiveColor00);
   tolua_function(tolua_S,"setEmissiveColor",tolua_MyLuaBind_vid_SRenderPass_setEmissiveColor00);
   tolua_function(tolua_S,"getSpecularColor",tolua_MyLuaBind_vid_SRenderPass_getSpecularColor00);
   tolua_function(tolua_S,"setSpecularColor",tolua_MyLuaBind_vid_SRenderPass_setSpecularColor00);
   tolua_function(tolua_S,"getShininess",tolua_MyLuaBind_vid_SRenderPass_getShininess00);
   tolua_function(tolua_S,"setShininess",tolua_MyLuaBind_vid_SRenderPass_setShininess00);
   tolua_function(tolua_S,"getFlag",tolua_MyLuaBind_vid_SRenderPass_getFlag00);
   tolua_function(tolua_S,"setFlag",tolua_MyLuaBind_vid_SRenderPass_setFlag00);
   tolua_function(tolua_S,"getColorFunc",tolua_MyLuaBind_vid_SRenderPass_getColorFunc00);
   tolua_function(tolua_S,"getAlphaFunc",tolua_MyLuaBind_vid_SRenderPass_getAlphaFunc00);
   tolua_function(tolua_S,"setColorFunc",tolua_MyLuaBind_vid_SRenderPass_setColorFunc00);
   tolua_function(tolua_S,"setAlphaFunc",tolua_MyLuaBind_vid_SRenderPass_setAlphaFunc00);
   tolua_function(tolua_S,"getColorGen",tolua_MyLuaBind_vid_SRenderPass_getColorGen00);
   tolua_function(tolua_S,"getAlphaGen",tolua_MyLuaBind_vid_SRenderPass_getAlphaGen00);
   tolua_function(tolua_S,"setColorGen",tolua_MyLuaBind_vid_SRenderPass_setColorGen00);
   tolua_function(tolua_S,"setAlphaGen",tolua_MyLuaBind_vid_SRenderPass_setAlphaGen00);
   tolua_function(tolua_S,"getDepthTest",tolua_MyLuaBind_vid_SRenderPass_getDepthTest00);
   tolua_function(tolua_S,"getAlphaTest",tolua_MyLuaBind_vid_SRenderPass_getAlphaTest00);
   tolua_function(tolua_S,"setDepthTest",tolua_MyLuaBind_vid_SRenderPass_setDepthTest00);
   tolua_function(tolua_S,"setAlphaTest",tolua_MyLuaBind_vid_SRenderPass_setAlphaTest00);
   tolua_function(tolua_S,"getSrcBlendFunc",tolua_MyLuaBind_vid_SRenderPass_getSrcBlendFunc00);
   tolua_function(tolua_S,"getDstBlendFunc",tolua_MyLuaBind_vid_SRenderPass_getDstBlendFunc00);
   tolua_function(tolua_S,"setBlendFuncs",tolua_MyLuaBind_vid_SRenderPass_setBlendFuncs00);
   tolua_function(tolua_S,"getBlendEquation",tolua_MyLuaBind_vid_SRenderPass_getBlendEquation00);
   tolua_function(tolua_S,"setBlendEquation",tolua_MyLuaBind_vid_SRenderPass_setBlendEquation00);
   tolua_function(tolua_S,"isTransparent",tolua_MyLuaBind_vid_SRenderPass_isTransparent00);
   tolua_function(tolua_S,"isLighting",tolua_MyLuaBind_vid_SRenderPass_isLighting00);
   tolua_function(tolua_S,"getLightingMode",tolua_MyLuaBind_vid_SRenderPass_getLightingMode00);
   tolua_function(tolua_S,"setLightingMode",tolua_MyLuaBind_vid_SRenderPass_setLightingMode00);
   tolua_function(tolua_S,"setGPUProgram",tolua_MyLuaBind_vid_SRenderPass_setGPUProgram00);
   tolua_function(tolua_S,"getGPUProgram",tolua_MyLuaBind_vid_SRenderPass_getGPUProgram00);
   tolua_function(tolua_S,"swapLayers",tolua_MyLuaBind_vid_SRenderPass_swapLayers00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SMaterial","vid::SMaterial","",tolua_collect_vid__SMaterial);
  #else
  tolua_cclass(tolua_S,"SMaterial","vid::SMaterial","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SMaterial");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_vid_SMaterial_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_vid_SMaterial_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_vid_SMaterial_new00_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_vid_SMaterial_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_vid_SMaterial_set00);
   tolua_function(tolua_S,"update",tolua_MyLuaBind_vid_SMaterial_update00);
   tolua_function(tolua_S,"getPass",tolua_MyLuaBind_vid_SMaterial_getPass00);
   tolua_function(tolua_S,"getPassesCount",tolua_MyLuaBind_vid_SMaterial_getPassesCount00);
   tolua_function(tolua_S,"addPass",tolua_MyLuaBind_vid_SMaterial_addPass00);
   tolua_function(tolua_S,"removePass",tolua_MyLuaBind_vid_SMaterial_removePass00);
   tolua_function(tolua_S,"getHash",tolua_MyLuaBind_vid_SMaterial_getHash00);
   tolua_function(tolua_S,"loadFromFile",tolua_MyLuaBind_vid_SMaterial_loadFromFile00);
   tolua_function(tolua_S,"saveToFile",tolua_MyLuaBind_vid_SMaterial_saveToFile00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"vid",0);
 tolua_beginmodule(tolua_S,"vid");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SFog","vid::SFog","",tolua_collect_vid__SFog);
  #else
  tolua_cclass(tolua_S,"SFog","vid::SFog","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SFog");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_vid_SFog_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_vid_SFog_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_vid_SFog_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_vid_SFog_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_vid_SFog_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_vid_SFog_new01_local);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_vid_SFog_set00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_vid_SFog_set01);
   tolua_variable(tolua_S,"Type",tolua_get_vid__SFog_Type,tolua_set_vid__SFog_Type);
   tolua_variable(tolua_S,"Color",tolua_get_vid__SFog_Color,tolua_set_vid__SFog_Color);
   tolua_variable(tolua_S,"Start",tolua_get_vid__SFog_Start,tolua_set_vid__SFog_Start);
   tolua_variable(tolua_S,"End",tolua_get_vid__SFog_End,tolua_set_vid__SFog_End);
   tolua_variable(tolua_S,"Density",tolua_get_vid__SFog_Density,tolua_set_vid__SFog_Density);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"vid",0);
 tolua_beginmodule(tolua_S,"vid");
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"SLight","vid::SLight","",tolua_collect_vid__SLight);
  #else
  tolua_cclass(tolua_S,"SLight","vid::SLight","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"SLight");
   tolua_function(tolua_S,"new",tolua_MyLuaBind_vid_SLight_new00);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_vid_SLight_new00_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_vid_SLight_new00_local);
   tolua_function(tolua_S,"new",tolua_MyLuaBind_vid_SLight_new01);
   tolua_function(tolua_S,"new_local",tolua_MyLuaBind_vid_SLight_new01_local);
   tolua_function(tolua_S,".call",tolua_MyLuaBind_vid_SLight_new01_local);
   tolua_function(tolua_S,"delete",tolua_MyLuaBind_vid_SLight_delete00);
   tolua_function(tolua_S,"set",tolua_MyLuaBind_vid_SLight_set00);
   tolua_variable(tolua_S,"AmbientColor",tolua_get_vid__SLight_AmbientColor,tolua_set_vid__SLight_AmbientColor);
   tolua_variable(tolua_S,"DiffuseColor",tolua_get_vid__SLight_DiffuseColor,tolua_set_vid__SLight_DiffuseColor);
   tolua_variable(tolua_S,"SpecularColor",tolua_get_vid__SLight_SpecularColor,tolua_set_vid__SLight_SpecularColor);
   tolua_variable(tolua_S,"Position",tolua_get_vid__SLight_Position,tolua_set_vid__SLight_Position);
   tolua_variable(tolua_S,"Radius",tolua_get_vid__SLight_Radius,tolua_set_vid__SLight_Radius);
   tolua_variable(tolua_S,"CastShadows",tolua_get_vid__SLight_CastShadows,tolua_set_vid__SLight_CastShadows);
   tolua_variable(tolua_S,"Type",tolua_get_vid__SLight_Type,tolua_set_vid__SLight_Type);
   tolua_variable(tolua_S,"Enabled",tolua_get_vid__SLight_Enabled,tolua_set_vid__SLight_Enabled);
   tolua_variable(tolua_S,"Dynamic",tolua_get_vid__SLight_Dynamic,tolua_set_vid__SLight_Dynamic);
   tolua_variable(tolua_S,"IntensityWave",tolua_get_vid__SLight_IntensityWave,tolua_set_vid__SLight_IntensityWave);
   tolua_variable(tolua_S,"IntensityWaveEnabled",tolua_get_vid__SLight_IntensityWaveEnabled,tolua_set_vid__SLight_IntensityWaveEnabled);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"vid",0);
 tolua_beginmodule(tolua_S,"vid");
  tolua_cclass(tolua_S,"IFont","vid::IFont","",NULL);
  tolua_beginmodule(tolua_S,"IFont");
   tolua_function(tolua_S,"setSize",tolua_MyLuaBind_vid_IFont_setSize00);
   tolua_function(tolua_S,"getSize",tolua_MyLuaBind_vid_IFont_getSize00);
   tolua_function(tolua_S,"registerForRendering",tolua_MyLuaBind_vid_IFont_registerForRendering00);
   tolua_function(tolua_S,"getDimension",tolua_MyLuaBind_vid_IFont_getDimension00);
   tolua_function(tolua_S,"getDimension",tolua_MyLuaBind_vid_IFont_getDimension01);
   tolua_function(tolua_S,"getCharacterFromPos",tolua_MyLuaBind_vid_IFont_getCharacterFromPos00);
   tolua_function(tolua_S,"getFileName",tolua_MyLuaBind_vid_IFont_getFileName00);
   tolua_function(tolua_S,"setMonospaceMode",tolua_MyLuaBind_vid_IFont_setMonospaceMode00);
   tolua_function(tolua_S,"isMonospaceMode",tolua_MyLuaBind_vid_IFont_isMonospaceMode00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"vid",0);
 tolua_beginmodule(tolua_S,"vid");
  tolua_cclass(tolua_S,"SGPUProgramShaderInfo","vid::SGPUProgramShaderInfo","",NULL);
  tolua_beginmodule(tolua_S,"SGPUProgramShaderInfo");
   tolua_variable(tolua_S,"Uniforms",tolua_get_vid__SGPUProgramShaderInfo_Uniforms,tolua_set_vid__SGPUProgramShaderInfo_Uniforms);
   tolua_variable(tolua_S,"Driver",tolua_get_vid__SGPUProgramShaderInfo_Driver,tolua_set_vid__SGPUProgramShaderInfo_Driver);
   tolua_variable(tolua_S,"VertexVer",tolua_get_vid__SGPUProgramShaderInfo_VertexVer,tolua_set_vid__SGPUProgramShaderInfo_VertexVer);
   tolua_variable(tolua_S,"PixelVer",tolua_get_vid__SGPUProgramShaderInfo_PixelVer,tolua_set_vid__SGPUProgramShaderInfo_PixelVer);
   tolua_function(tolua_S,"getTag",tolua_MyLuaBind_vid_SGPUProgramShaderInfo_getTag00);
   tolua_function(tolua_S,"getVertexFileName",tolua_MyLuaBind_vid_SGPUProgramShaderInfo_getVertexFileName00);
   tolua_function(tolua_S,"getPixelFileName",tolua_MyLuaBind_vid_SGPUProgramShaderInfo_getPixelFileName00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SGPUProgramInfo","vid::SGPUProgramInfo","",NULL);
  tolua_beginmodule(tolua_S,"SGPUProgramInfo");
   tolua_variable(tolua_S,"VertexType",tolua_get_vid__SGPUProgramInfo_VertexType,tolua_set_vid__SGPUProgramInfo_VertexType);
   tolua_variable(tolua_S,"LightsCount",tolua_get_vid__SGPUProgramInfo_LightsCount,tolua_set_vid__SGPUProgramInfo_LightsCount);
   tolua_variable(tolua_S,"Hash",tolua_get_vid__SGPUProgramInfo_Hash,tolua_set_vid__SGPUProgramInfo_Hash);
   tolua_variable(tolua_S,"TaggedShadersCount",tolua_get_vid__SGPUProgramInfo_TaggedShadersCount,tolua_set_vid__SGPUProgramInfo_TaggedShadersCount);
   tolua_variable(tolua_S,"OtherShadersCount",tolua_get_vid__SGPUProgramInfo_OtherShadersCount,tolua_set_vid__SGPUProgramInfo_OtherShadersCount);
   tolua_function(tolua_S,"getTaggedShaderInfo",tolua_MyLuaBind_vid_SGPUProgramInfo_getTaggedShaderInfo00);
   tolua_function(tolua_S,"getOtherShaderInfo",tolua_MyLuaBind_vid_SGPUProgramInfo_getOtherShaderInfo00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IGPUProgram","vid::IGPUProgram","",NULL);
  tolua_beginmodule(tolua_S,"IGPUProgram");
   tolua_function(tolua_S,"setUniformfv",tolua_MyLuaBind_vid_IGPUProgram_setUniformfv00);
   tolua_function(tolua_S,"setUniformiv",tolua_MyLuaBind_vid_IGPUProgram_setUniformiv00);
   tolua_function(tolua_S,"setUniform1f",tolua_MyLuaBind_vid_IGPUProgram_setUniform1f00);
   tolua_function(tolua_S,"setUniform1i",tolua_MyLuaBind_vid_IGPUProgram_setUniform1i00);
   tolua_function(tolua_S,"getUniformMask",tolua_MyLuaBind_vid_IGPUProgram_getUniformMask00);
   tolua_function(tolua_S,"isOK",tolua_MyLuaBind_vid_IGPUProgram_isOK00);
   tolua_function(tolua_S,"recreate",tolua_MyLuaBind_vid_IGPUProgram_recreate00);
   tolua_function(tolua_S,"getLightsCount",tolua_MyLuaBind_vid_IGPUProgram_getLightsCount00);
  tolua_endmodule(tolua_S);
  tolua_function(tolua_S,"loadGPUProgramInfo",tolua_MyLuaBind_vid_loadGPUProgramInfo00);
  tolua_function(tolua_S,"initIdentityGPUProgramInfo",tolua_MyLuaBind_vid_initIdentityGPUProgramInfo00);
  tolua_function(tolua_S,"setGPUProgramInfoLightsCount",tolua_MyLuaBind_vid_setGPUProgramInfoLightsCount00);
  tolua_function(tolua_S,"appendGPUProgramInfo",tolua_MyLuaBind_vid_appendGPUProgramInfo00);
  tolua_function(tolua_S,"writeGPUProgramInfo",tolua_MyLuaBind_vid_writeGPUProgramInfo00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"vid",0);
 tolua_beginmodule(tolua_S,"vid");
  tolua_cclass(tolua_S,"IVertexBuffer","vid::IVertexBuffer","",NULL);
  tolua_beginmodule(tolua_S,"IVertexBuffer");
   tolua_function(tolua_S,"getType",tolua_MyLuaBind_vid_IVertexBuffer_getType00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IIndexBuffer","vid::IIndexBuffer","",NULL);
  tolua_beginmodule(tolua_S,"IIndexBuffer");
   tolua_function(tolua_S,"getType",tolua_MyLuaBind_vid_IIndexBuffer_getType00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"IRenderBuffer","vid::IRenderBuffer","",NULL);
  tolua_beginmodule(tolua_S,"IRenderBuffer");
   tolua_function(tolua_S,"getType",tolua_MyLuaBind_vid_IRenderBuffer_getType00);
   tolua_function(tolua_S,"getDrawPrimitiveType",tolua_MyLuaBind_vid_IRenderBuffer_getDrawPrimitiveType00);
   tolua_function(tolua_S,"getIndices",tolua_MyLuaBind_vid_IRenderBuffer_getIndices00);
   tolua_function(tolua_S,"getVertices",tolua_MyLuaBind_vid_IRenderBuffer_getVertices00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"vid",0);
 tolua_beginmodule(tolua_S,"vid");
  tolua_cclass(tolua_S,"IRenderTarget","vid::IRenderTarget","",NULL);
  tolua_beginmodule(tolua_S,"IRenderTarget");
   tolua_function(tolua_S,"bindColorTexture",tolua_MyLuaBind_vid_IRenderTarget_bindColorTexture00);
   tolua_function(tolua_S,"bindColorTexture",tolua_MyLuaBind_vid_IRenderTarget_bindColorTexture01);
   tolua_function(tolua_S,"bindDepthTexture",tolua_MyLuaBind_vid_IRenderTarget_bindDepthTexture00);
   tolua_function(tolua_S,"rebuild",tolua_MyLuaBind_vid_IRenderTarget_rebuild00);
   tolua_function(tolua_S,"getColorTexture",tolua_MyLuaBind_vid_IRenderTarget_getColorTexture00);
   tolua_function(tolua_S,"getDepthTexture",tolua_MyLuaBind_vid_IRenderTarget_getDepthTexture00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"os",0);
 tolua_beginmodule(tolua_S,"os");
  tolua_cclass(tolua_S,"STimeValue","os::STimeValue","",NULL);
  tolua_beginmodule(tolua_S,"STimeValue");
   tolua_variable(tolua_S,"Year",tolua_get_os__STimeValue_Year,tolua_set_os__STimeValue_Year);
   tolua_variable(tolua_S,"Month",tolua_get_os__STimeValue_Month,tolua_set_os__STimeValue_Month);
   tolua_variable(tolua_S,"MonthDay",tolua_get_os__STimeValue_MonthDay,tolua_set_os__STimeValue_MonthDay);
   tolua_variable(tolua_S,"WeekDay",tolua_get_os__STimeValue_WeekDay,tolua_set_os__STimeValue_WeekDay);
   tolua_variable(tolua_S,"Hour",tolua_get_os__STimeValue_Hour,tolua_set_os__STimeValue_Hour);
   tolua_variable(tolua_S,"Minute",tolua_get_os__STimeValue_Minute,tolua_set_os__STimeValue_Minute);
   tolua_variable(tolua_S,"Second",tolua_get_os__STimeValue_Second,tolua_set_os__STimeValue_Second);
   tolua_variable(tolua_S,"Milisecond",tolua_get_os__STimeValue_Milisecond,tolua_set_os__STimeValue_Milisecond);
  tolua_endmodule(tolua_S);
  tolua_function(tolua_S,"getOperationSystemVersion",tolua_MyLuaBind_os_getOperationSystemVersion00);
  tolua_function(tolua_S,"copyToClipboard",tolua_MyLuaBind_os_copyToClipboard00);
  tolua_function(tolua_S,"getTextFromClipboard",tolua_MyLuaBind_os_getTextFromClipboard00);
  tolua_function(tolua_S,"getMonitorBrightness",tolua_MyLuaBind_os_getMonitorBrightness00);
  tolua_function(tolua_S,"setMonitorBrightness",tolua_MyLuaBind_os_setMonitorBrightness00);
  tolua_function(tolua_S,"switchMonitorToFullScreen",tolua_MyLuaBind_os_switchMonitorToFullScreen00);
  tolua_function(tolua_S,"restoreMonitorSettings",tolua_MyLuaBind_os_restoreMonitorSettings00);
  tolua_function(tolua_S,"getCurrentProcessName",tolua_MyLuaBind_os_getCurrentProcessName00);
  tolua_function(tolua_S,"getCurrentTime",tolua_MyLuaBind_os_getCurrentTime00);
  tolua_function(tolua_S,"getCurrentTimeString",tolua_MyLuaBind_os_getCurrentTimeString00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"os",0);
 tolua_beginmodule(tolua_S,"os");
  tolua_cclass(tolua_S,"ITimer","os::ITimer","",NULL);
  tolua_beginmodule(tolua_S,"ITimer");
   tolua_function(tolua_S,"getSystemTime",tolua_MyLuaBind_os_ITimer_getSystemTime00);
   tolua_function(tolua_S,"getTime",tolua_MyLuaBind_os_ITimer_getTime00);
   tolua_function(tolua_S,"getSystemTimeSec",tolua_MyLuaBind_os_ITimer_getSystemTimeSec00);
   tolua_function(tolua_S,"getTimeSec",tolua_MyLuaBind_os_ITimer_getTimeSec00);
   tolua_function(tolua_S,"suspend",tolua_MyLuaBind_os_ITimer_suspend00);
   tolua_function(tolua_S,"resume",tolua_MyLuaBind_os_ITimer_resume00);
   tolua_function(tolua_S,"isSuspended",tolua_MyLuaBind_os_ITimer_isSuspended00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"ITimerMain","os::ITimerMain","os::ITimer",NULL);
  tolua_beginmodule(tolua_S,"ITimerMain");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_os_ITimerMain_getSingleton00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"ITimerSecond","os::ITimerSecond","os::ITimer",NULL);
  tolua_beginmodule(tolua_S,"ITimerSecond");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_os_ITimerSecond_getSingleton00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"os",0);
 tolua_beginmodule(tolua_S,"os");
  tolua_cclass(tolua_S,"IMemStatus","os::IMemStatus","",NULL);
  tolua_beginmodule(tolua_S,"IMemStatus");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_os_IMemStatus_getSingleton00);
   tolua_function(tolua_S,"getAllocatedBytes",tolua_MyLuaBind_os_IMemStatus_getAllocatedBytes00);
   tolua_function(tolua_S,"getAllocsPerSec",tolua_MyLuaBind_os_IMemStatus_getAllocsPerSec00);
   tolua_function(tolua_S,"getDeallocsPerSec",tolua_MyLuaBind_os_IMemStatus_getDeallocsPerSec00);
   tolua_function(tolua_S,"getAllocBytesPerSec",tolua_MyLuaBind_os_IMemStatus_getAllocBytesPerSec00);
   tolua_function(tolua_S,"getDeallocBytesPerSec",tolua_MyLuaBind_os_IMemStatus_getDeallocBytesPerSec00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scr",0);
 tolua_beginmodule(tolua_S,"scr");
  tolua_cclass(tolua_S,"IScriptManager","scr::IScriptManager","scr::ICoreScriptManagerInterface",NULL);
  tolua_beginmodule(tolua_S,"IScriptManager");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_scr_IScriptManager_getSingleton00);
   tolua_function(tolua_S,"runScriptText",tolua_MyLuaBind_scr_IScriptManager_runScriptText00);
   tolua_function(tolua_S,"setScriptCallback",tolua_MyLuaBind_scr_IScriptManager_setScriptCallback00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"scr",0);
 tolua_beginmodule(tolua_S,"scr");
  tolua_cclass(tolua_S,"ICoreScriptManagerInterface","scr::ICoreScriptManagerInterface","",NULL);
  tolua_beginmodule(tolua_S,"ICoreScriptManagerInterface");
   tolua_function(tolua_S,"runScript",tolua_MyLuaBind_scr_ICoreScriptManagerInterface_runScript00);
   tolua_function(tolua_S,"clearScriptMemory",tolua_MyLuaBind_scr_ICoreScriptManagerInterface_clearScriptMemory00);
   tolua_function(tolua_S,"getScriptMemoryKBytes",tolua_MyLuaBind_scr_ICoreScriptManagerInterface_getScriptMemoryKBytes00);
   tolua_function(tolua_S,"setScriptMaxMemoryKBytes",tolua_MyLuaBind_scr_ICoreScriptManagerInterface_setScriptMaxMemoryKBytes00);
   tolua_function(tolua_S,"getCoreScripterPtr",tolua_MyLuaBind_scr_ICoreScriptManagerInterface_getCoreScripterPtr00);
   tolua_function(tolua_S,"setScriptsFullDir",tolua_MyLuaBind_scr_ICoreScriptManagerInterface_setScriptsFullDir00);
   tolua_function(tolua_S,"getScriptsFullDir",tolua_MyLuaBind_scr_ICoreScriptManagerInterface_getScriptsFullDir00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"ICoreScriptManager","scr::ICoreScriptManager","scr::ICoreScriptManagerInterface",NULL);
  tolua_beginmodule(tolua_S,"ICoreScriptManager");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_scr_ICoreScriptManager_getSingleton00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"mm",0);
 tolua_beginmodule(tolua_S,"mm");
  tolua_cclass(tolua_S,"ISoundDriver","mm::ISoundDriver","",NULL);
  tolua_beginmodule(tolua_S,"ISoundDriver");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_mm_ISoundDriver_getSingleton00);
   tolua_function(tolua_S,"getPos",tolua_MyLuaBind_mm_ISoundDriver_getPos00);
   tolua_function(tolua_S,"getVelocity",tolua_MyLuaBind_mm_ISoundDriver_getVelocity00);
   tolua_function(tolua_S,"getViewDir",tolua_MyLuaBind_mm_ISoundDriver_getViewDir00);
   tolua_function(tolua_S,"getUpDir",tolua_MyLuaBind_mm_ISoundDriver_getUpDir00);
   tolua_function(tolua_S,"moveTo",tolua_MyLuaBind_mm_ISoundDriver_moveTo00);
   tolua_function(tolua_S,"moveBy",tolua_MyLuaBind_mm_ISoundDriver_moveBy00);
   tolua_function(tolua_S,"setVelocity",tolua_MyLuaBind_mm_ISoundDriver_setVelocity00);
   tolua_function(tolua_S,"setOrientation",tolua_MyLuaBind_mm_ISoundDriver_setOrientation00);
   tolua_function(tolua_S,"cloneSound",tolua_MyLuaBind_mm_ISoundDriver_cloneSound00);
   tolua_function(tolua_S,"getSound",tolua_MyLuaBind_mm_ISoundDriver_getSound00);
   tolua_function(tolua_S,"findSoundFileName",tolua_MyLuaBind_mm_ISoundDriver_findSoundFileName00);
   tolua_function(tolua_S,"findSoundFullFileName",tolua_MyLuaBind_mm_ISoundDriver_findSoundFullFileName00);
   tolua_function(tolua_S,"clearUnusedSoundCache",tolua_MyLuaBind_mm_ISoundDriver_clearUnusedSoundCache00);
   tolua_function(tolua_S,"updateSounds",tolua_MyLuaBind_mm_ISoundDriver_updateSounds00);
   tolua_function(tolua_S,"getPlayingSoundsCount",tolua_MyLuaBind_mm_ISoundDriver_getPlayingSoundsCount00);
   tolua_function(tolua_S,"getSoundsCount",tolua_MyLuaBind_mm_ISoundDriver_getSoundsCount00);
   tolua_function(tolua_S,"getSoundDriverType",tolua_MyLuaBind_mm_ISoundDriver_getSoundDriverType00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"mm",0);
 tolua_beginmodule(tolua_S,"mm");
  tolua_cclass(tolua_S,"ISoundData","mm::ISoundData","",NULL);
  tolua_beginmodule(tolua_S,"ISoundData");
   tolua_function(tolua_S,"getNumChannels",tolua_MyLuaBind_mm_ISoundData_getNumChannels00);
   tolua_function(tolua_S,"getFrequency",tolua_MyLuaBind_mm_ISoundData_getFrequency00);
   tolua_function(tolua_S,"getBitsPerSample",tolua_MyLuaBind_mm_ISoundData_getBitsPerSample00);
   tolua_function(tolua_S,"getSize",tolua_MyLuaBind_mm_ISoundData_getSize00);
   tolua_function(tolua_S,"read",tolua_MyLuaBind_mm_ISoundData_read00);
   tolua_function(tolua_S,"seek",tolua_MyLuaBind_mm_ISoundData_seek00);
   tolua_function(tolua_S,"getTime",tolua_MyLuaBind_mm_ISoundData_getTime00);
   tolua_function(tolua_S,"atEnd",tolua_MyLuaBind_mm_ISoundData_atEnd00);
   tolua_function(tolua_S,"getFileName",tolua_MyLuaBind_mm_ISoundData_getFileName00);
   tolua_function(tolua_S,"getType",tolua_MyLuaBind_mm_ISoundData_getType00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"mm",0);
 tolua_beginmodule(tolua_S,"mm");
  tolua_cclass(tolua_S,"ISound","mm::ISound","",NULL);
  tolua_beginmodule(tolua_S,"ISound");
   tolua_function(tolua_S,"getPos",tolua_MyLuaBind_mm_ISound_getPos00);
   tolua_function(tolua_S,"getVelocity",tolua_MyLuaBind_mm_ISound_getVelocity00);
   tolua_function(tolua_S,"getGain",tolua_MyLuaBind_mm_ISound_getGain00);
   tolua_function(tolua_S,"getVolume",tolua_MyLuaBind_mm_ISound_getVolume00);
   tolua_function(tolua_S,"getPitch",tolua_MyLuaBind_mm_ISound_getPitch00);
   tolua_function(tolua_S,"isLooping",tolua_MyLuaBind_mm_ISound_isLooping00);
   tolua_function(tolua_S,"isPlaying",tolua_MyLuaBind_mm_ISound_isPlaying00);
   tolua_function(tolua_S,"atEnd",tolua_MyLuaBind_mm_ISound_atEnd00);
   tolua_function(tolua_S,"isAutoDelete",tolua_MyLuaBind_mm_ISound_isAutoDelete00);
   tolua_function(tolua_S,"moveTo",tolua_MyLuaBind_mm_ISound_moveTo00);
   tolua_function(tolua_S,"moveBy",tolua_MyLuaBind_mm_ISound_moveBy00);
   tolua_function(tolua_S,"setVelocity",tolua_MyLuaBind_mm_ISound_setVelocity00);
   tolua_function(tolua_S,"setPitch",tolua_MyLuaBind_mm_ISound_setPitch00);
   tolua_function(tolua_S,"setGain",tolua_MyLuaBind_mm_ISound_setGain00);
   tolua_function(tolua_S,"setVolume",tolua_MyLuaBind_mm_ISound_setVolume00);
   tolua_function(tolua_S,"setLooping",tolua_MyLuaBind_mm_ISound_setLooping00);
   tolua_function(tolua_S,"play",tolua_MyLuaBind_mm_ISound_play00);
   tolua_function(tolua_S,"pause",tolua_MyLuaBind_mm_ISound_pause00);
   tolua_function(tolua_S,"stop",tolua_MyLuaBind_mm_ISound_stop00);
   tolua_function(tolua_S,"rewind",tolua_MyLuaBind_mm_ISound_rewind00);
   tolua_function(tolua_S,"getSoundData",tolua_MyLuaBind_mm_ISound_getSoundData00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"dyn",0);
 tolua_beginmodule(tolua_S,"dyn");
  tolua_cclass(tolua_S,"IDynamicManager","dyn::IDynamicManager","",NULL);
  tolua_beginmodule(tolua_S,"IDynamicManager");
   tolua_function(tolua_S,"getSingleton",tolua_MyLuaBind_dyn_IDynamicManager_getSingleton00);
   tolua_function(tolua_S,"getEnabledDynamicObjectsCount",tolua_MyLuaBind_dyn_IDynamicManager_getEnabledDynamicObjectsCount00);
   tolua_function(tolua_S,"getDynamicObjectsCount",tolua_MyLuaBind_dyn_IDynamicManager_getDynamicObjectsCount00);
   tolua_function(tolua_S,"getCustomCollisionPointsCount",tolua_MyLuaBind_dyn_IDynamicManager_getCustomCollisionPointsCount00);
   tolua_function(tolua_S,"getDynamicCollisionPointsCount",tolua_MyLuaBind_dyn_IDynamicManager_getDynamicCollisionPointsCount00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 return 1;
}


#if defined(LUA_VERSION_NUM) && LUA_VERSION_NUM >= 501
 int luaopen_MyLuaBind (lua_State* tolua_S) {
 return tolua_MyLuaBind_open(tolua_S);
};
#endif

