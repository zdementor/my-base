//|-------------------------------------------------------------------------
//| File:        MD2Helper.h
//|
//| Descr:       This file is a part of the 'MyEngine'
//| Author:      Zhuk 'zdementor' Dmitry (aka ZDimitor)
//| Email:       zdimitor@pochta.ru, sibergames@nm.ru
//|
//|     Copyright (c) 2004-2009 by Zhuk Dmitry, Krasnoyarsk - Moscow
//|                      All Rights Reserved.
//|-------------------------------------------------------------------------
#ifndef MD2HelperHPP
#define MD2HelperHPP

//---------------------------------------------------------------------------

#include <my_inc.h>

//---------------------------------------------------------------------------
namespace my {
namespace scn {
namespace md2 {
//---------------------------------------------------------------------------

#ifdef _MSC_VER
#   pragma pack( push, packing )
#   pragma pack( 1 )
#   define PACK_STRUCT
#elif defined( __GNUC__ )
#   define PACK_STRUCT  __attribute__((packed))
#elif defined( __BORLANDC__ )
#   pragma pack( push, packing )
#   pragma pack( 1 )
#   define PACK_STRUCT
#else
#   error compiler not supported
#endif

//---------------------------------------------------------------------------

// structs needed to load the md2-format
const s32 MD2_MAGIC_NUMBER  = 844121161;
const s32 MD2_VERSION       = 8;
const s32 MD2_MAX_VERTS     = 2048;
const s32 MD2_FRAME_SHIFT   = 3;

//---------------------------------------------------------------------------

struct SMD2Header
{
    s32 magic;
    s32 version;
    s32 skinWidth;
    s32 skinHeight;
    s32 frameSize;
    s32 numSkins;
    s32 numVertices;
    s32 numTexcoords;
    s32 numTriangles;   
    s32 numGlCommands;
    s32 numFrames;
    s32 offsetSkins;
    s32 offsetTexcoords;
    s32 offsetTriangles;
    s32 offsetFrames;
    s32 offsetGlCommands;
    s32 offsetEnd;
} 
PACK_STRUCT;

//---------------------------------------------------------------------------

struct SMD2Vertex
{
    u8 vertex[3];
    u8 lightNormalIndex;
} 
PACK_STRUCT;

//---------------------------------------------------------------------------
struct SMD2Frame
{
    f32 scale[3];
    f32 translate[3];
    c8  name[16];
    SMD2Vertex vertices[1];
} 
PACK_STRUCT;

//---------------------------------------------------------------------------

struct SMD2Triangle
{
    s16 vertexIndices[3];
    s16 textureIndices[3];
} 
PACK_STRUCT;

//---------------------------------------------------------------------------

struct SMD2TextureCoordinate
{
    s16 s;
    s16 t;
}
PACK_STRUCT;

//---------------------------------------------------------------------------

struct SMD2GLCommand
{
    f32 s, t;
    s32 vertexIndex;
} 
PACK_STRUCT;

//---------------------------------------------------------------------------

// Default alignment
#ifdef _MSC_VER
#   pragma pack( pop, packing )
#elif defined ( __BORLANDC__ )
#   pragma pack( pop, packing )
#endif

#undef PACK_STRUCT

//---------------------------------------------------------------------------

const s32 Q2_VERTEX_NORMAL_TABLE_SIZE = 162;

const f32 Q2_VERTEX_NORMAL_TABLE[Q2_VERTEX_NORMAL_TABLE_SIZE][3] = 
{
    {-0.525731f, 0.000000f, 0.850651f}, 
    {-0.442863f, 0.238856f, 0.864188f}, 
    {-0.295242f, 0.000000f, 0.955423f}, 
    {-0.309017f, 0.500000f, 0.809017f}, 
    {-0.162460f, 0.262866f, 0.951056f}, 
    {0.000000f, 0.000000f, 1.000000f}, 
    {0.000000f, 0.850651f, 0.525731f}, 
    {-0.147621f, 0.716567f, 0.681718f}, 
    {0.147621f, 0.716567f, 0.681718f}, 
    {0.000000f, 0.525731f, 0.850651f}, 
    {0.309017f, 0.500000f, 0.809017f}, 
    {0.525731f, 0.000000f, 0.850651f}, 
    {0.295242f, 0.000000f, 0.955423f}, 
    {0.442863f, 0.238856f, 0.864188f}, 
    {0.162460f, 0.262866f, 0.951056f}, 
    {-0.681718f, 0.147621f, 0.716567f}, 
    {-0.809017f, 0.309017f, 0.500000f}, 
    {-0.587785f, 0.425325f, 0.688191f}, 
    {-0.850651f, 0.525731f, 0.000000f}, 
    {-0.864188f, 0.442863f, 0.238856f}, 
    {-0.716567f, 0.681718f, 0.147621f}, 
    {-0.688191f, 0.587785f, 0.425325f}, 
    {-0.500000f, 0.809017f, 0.309017f}, 
    {-0.238856f, 0.864188f, 0.442863f}, 
    {-0.425325f, 0.688191f, 0.587785f}, 
    {-0.716567f, 0.681718f, -0.147621f}, 
    {-0.500000f, 0.809017f, -0.309017f}, 
    {-0.525731f, 0.850651f, 0.000000f}, 
    {0.000000f, 0.850651f, -0.525731f}, 
    {-0.238856f, 0.864188f, -0.442863f}, 
    {0.000000f, 0.955423f, -0.295242f}, 
    {-0.262866f, 0.951056f, -0.162460f}, 
    {0.000000f, 1.000000f, 0.000000f}, 
    {0.000000f, 0.955423f, 0.295242f}, 
    {-0.262866f, 0.951056f, 0.162460f}, 
    {0.238856f, 0.864188f, 0.442863f}, 
    {0.262866f, 0.951056f, 0.162460f}, 
    {0.500000f, 0.809017f, 0.309017f}, 
    {0.238856f, 0.864188f, -0.442863f}, 
    {0.262866f, 0.951056f, -0.162460f}, 
    {0.500000f, 0.809017f, -0.309017f}, 
    {0.850651f, 0.525731f, 0.000000f}, 
    {0.716567f, 0.681718f, 0.147621f}, 
    {0.716567f, 0.681718f, -0.147621f}, 
    {0.525731f, 0.850651f, 0.000000f}, 
    {0.425325f, 0.688191f, 0.587785f}, 
    {0.864188f, 0.442863f, 0.238856f}, 
    {0.688191f, 0.587785f, 0.425325f}, 
    {0.809017f, 0.309017f, 0.500000f}, 
    {0.681718f, 0.147621f, 0.716567f}, 
    {0.587785f, 0.425325f, 0.688191f}, 
    {0.955423f, 0.295242f, 0.000000f}, 
    {1.000000f, 0.000000f, 0.000000f}, 
    {0.951056f, 0.162460f, 0.262866f}, 
    {0.850651f, -0.525731f, 0.000000f}, 
    {0.955423f, -0.295242f, 0.000000f}, 
    {0.864188f, -0.442863f, 0.238856f}, 
    {0.951056f, -0.162460f, 0.262866f}, 
    {0.809017f, -0.309017f, 0.500000f}, 
    {0.681718f, -0.147621f, 0.716567f}, 
    {0.850651f, 0.000000f, 0.525731f}, 
    {0.864188f, 0.442863f, -0.238856f}, 
    {0.809017f, 0.309017f, -0.500000f}, 
    {0.951056f, 0.162460f, -0.262866f}, 
    {0.525731f, 0.000000f, -0.850651f}, 
    {0.681718f, 0.147621f, -0.716567f}, 
    {0.681718f, -0.147621f, -0.716567f}, 
    {0.850651f, 0.000000f, -0.525731f}, 
    {0.809017f, -0.309017f, -0.500000f}, 
    {0.864188f, -0.442863f, -0.238856f}, 
    {0.951056f, -0.162460f, -0.262866f}, 
    {0.147621f, 0.716567f, -0.681718f}, 
    {0.309017f, 0.500000f, -0.809017f}, 
    {0.425325f, 0.688191f, -0.587785f}, 
    {0.442863f, 0.238856f, -0.864188f}, 
    {0.587785f, 0.425325f, -0.688191f}, 
    {0.688191f, 0.587785f, -0.425325f}, 
    {-0.147621f, 0.716567f, -0.681718f}, 
    {-0.309017f, 0.500000f, -0.809017f}, 
    {0.000000f, 0.525731f, -0.850651f}, 
    {-0.525731f, 0.000000f, -0.850651f}, 
    {-0.442863f, 0.238856f, -0.864188f}, 
    {-0.295242f, 0.000000f, -0.955423f}, 
    {-0.162460f, 0.262866f, -0.951056f}, 
    {0.000000f, 0.000000f, -1.000000f}, 
    {0.295242f, 0.000000f, -0.955423f}, 
    {0.162460f, 0.262866f, -0.951056f}, 
    {-0.442863f, -0.238856f, -0.864188f}, 
    {-0.309017f, -0.500000f, -0.809017f}, 
    {-0.162460f, -0.262866f, -0.951056f}, 
    {0.000000f, -0.850651f, -0.525731f}, 
    {-0.147621f, -0.716567f, -0.681718f}, 
    {0.147621f, -0.716567f, -0.681718f}, 
    {0.000000f, -0.525731f, -0.850651f}, 
    {0.309017f, -0.500000f, -0.809017f}, 
    {0.442863f, -0.238856f, -0.864188f}, 
    {0.162460f, -0.262866f, -0.951056f}, 
    {0.238856f, -0.864188f, -0.442863f}, 
    {0.500000f, -0.809017f, -0.309017f}, 
    {0.425325f, -0.688191f, -0.587785f}, 
    {0.716567f, -0.681718f, -0.147621f}, 
    {0.688191f, -0.587785f, -0.425325f}, 
    {0.587785f, -0.425325f, -0.688191f}, 
    {0.000000f, -0.955423f, -0.295242f}, 
    {0.000000f, -1.000000f, 0.000000f}, 
    {0.262866f, -0.951056f, -0.162460f}, 
    {0.000000f, -0.850651f, 0.525731f}, 
    {0.000000f, -0.955423f, 0.295242f}, 
    {0.238856f, -0.864188f, 0.442863f}, 
    {0.262866f, -0.951056f, 0.162460f}, 
    {0.500000f, -0.809017f, 0.309017f}, 
    {0.716567f, -0.681718f, 0.147621f}, 
    {0.525731f, -0.850651f, 0.000000f}, 
    {-0.238856f, -0.864188f, -0.442863f}, 
    {-0.500000f, -0.809017f, -0.309017f}, 
    {-0.262866f, -0.951056f, -0.162460f}, 
    {-0.850651f, -0.525731f, 0.000000f}, 
    {-0.716567f, -0.681718f, -0.147621f}, 
    {-0.716567f, -0.681718f, 0.147621f}, 
    {-0.525731f, -0.850651f, 0.000000f}, 
    {-0.500000f, -0.809017f, 0.309017f}, 
    {-0.238856f, -0.864188f, 0.442863f}, 
    {-0.262866f, -0.951056f, 0.162460f}, 
    {-0.864188f, -0.442863f, 0.238856f}, 
    {-0.809017f, -0.309017f, 0.500000f}, 
    {-0.688191f, -0.587785f, 0.425325f}, 
    {-0.681718f, -0.147621f, 0.716567f}, 
    {-0.442863f, -0.238856f, 0.864188f}, 
    {-0.587785f, -0.425325f, 0.688191f}, 
    {-0.309017f, -0.500000f, 0.809017f}, 
    {-0.147621f, -0.716567f, 0.681718f}, 
    {-0.425325f, -0.688191f, 0.587785f}, 
    {-0.162460f, -0.262866f, 0.951056f}, 
    {0.442863f, -0.238856f, 0.864188f}, 
    {0.162460f, -0.262866f, 0.951056f}, 
    {0.309017f, -0.500000f, 0.809017f}, 
    {0.147621f, -0.716567f, 0.681718f}, 
    {0.000000f, -0.525731f, 0.850651f}, 
    {0.425325f, -0.688191f, 0.587785f}, 
    {0.587785f, -0.425325f, 0.688191f}, 
    {0.688191f, -0.587785f, 0.425325f}, 
    {-0.955423f, 0.295242f, 0.000000f}, 
    {-0.951056f, 0.162460f, 0.262866f}, 
    {-1.000000f, 0.000000f, 0.000000f}, 
    {-0.850651f, 0.000000f, 0.525731f}, 
    {-0.955423f, -0.295242f, 0.000000f}, 
    {-0.951056f, -0.162460f, 0.262866f}, 
    {-0.864188f, 0.442863f, -0.238856f}, 
    {-0.951056f, 0.162460f, -0.262866f}, 
    {-0.809017f, 0.309017f, -0.500000f}, 
    {-0.864188f, -0.442863f, -0.238856f}, 
    {-0.951056f, -0.162460f, -0.262866f}, 
    {-0.809017f, -0.309017f, -0.500000f}, 
    {-0.681718f, 0.147621f, -0.716567f}, 
    {-0.681718f, -0.147621f, -0.716567f}, 
    {-0.850651f, 0.000000f, -0.525731f}, 
    {-0.688191f, 0.587785f, -0.425325f}, 
    {-0.587785f, 0.425325f, -0.688191f}, 
    {-0.425325f, 0.688191f, -0.587785f}, 
    {-0.425325f, -0.688191f, -0.587785f}, 
    {-0.587785f, -0.425325f, -0.688191f}, 
    {-0.688191f, -0.587785f, -0.425325f}, 
};

//---------------------------------------------------------------------------

struct SMD2AnimationType
{
    s32 begin;
    s32 end;
}; 

//---------------------------------------------------------------------------
} // end namespace md2
} // end namespace scn
} // end namespace my
//---------------------------------------------------------------------------

#endif // #ifndef MD2HelperHPP